
coms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800b718  0800b718  0001b718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc4  0800bbc4  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbc4  0800bbc4  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbc4  0800bbc4  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc4  0800bbc4  0001bbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800bbcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  20000360  0800bf2c  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015d4  0800bf2c  000215d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017644  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003342  00000000  00000000  000379d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0003ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0003ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254cf  00000000  00000000  0003c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001072e  00000000  00000000  00061b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7a2  00000000  00000000  000722ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141a4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  00141aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6fc 	.word	0x0800b6fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0800b6fc 	.word	0x0800b6fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <Insert_SensorData>:
    float humidity;
} SensorData;

SensorData sensorData[DATA_COUNT];

void Insert_SensorData(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
    for (int i = 0; i < DATA_COUNT; i++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e04f      	b.n	8000cf4 <Insert_SensorData+0xac>
        sensorData[i].id = i;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b298      	uxth	r0, r3
 8000c58:	492f      	ldr	r1, [pc, #188]	; (8000d18 <Insert_SensorData+0xd0>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	4602      	mov	r2, r0
 8000c68:	801a      	strh	r2, [r3, #0]
        sensorData[i].temperature = 25.0 + (i * 0.1);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fc5a 	bl	8000524 <__aeabi_i2d>
 8000c70:	a325      	add	r3, pc, #148	; (adr r3, 8000d08 <Insert_SensorData+0xc0>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <Insert_SensorData+0xd4>)
 8000c88:	f7ff fb00 	bl	800028c <__adddf3>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff88 	bl	8000ba8 <__aeabi_d2f>
 8000c98:	4601      	mov	r1, r0
 8000c9a:	481f      	ldr	r0, [pc, #124]	; (8000d18 <Insert_SensorData+0xd0>)
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4403      	add	r3, r0
 8000ca8:	3304      	adds	r3, #4
 8000caa:	6019      	str	r1, [r3, #0]
        sensorData[i].humidity = 60.0 + (i * 0.2);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fc39 	bl	8000524 <__aeabi_i2d>
 8000cb2:	a317      	add	r3, pc, #92	; (adr r3, 8000d10 <Insert_SensorData+0xc8>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fc9e 	bl	80005f8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <Insert_SensorData+0xd8>)
 8000cca:	f7ff fadf 	bl	800028c <__adddf3>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff ff67 	bl	8000ba8 <__aeabi_d2f>
 8000cda:	4601      	mov	r1, r0
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <Insert_SensorData+0xd0>)
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4403      	add	r3, r0
 8000cea:	3308      	adds	r3, #8
 8000cec:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < DATA_COUNT; i++) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	ddac      	ble.n	8000c54 <Insert_SensorData+0xc>
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	f3af 8000 	nop.w
 8000d08:	9999999a 	.word	0x9999999a
 8000d0c:	3fb99999 	.word	0x3fb99999
 8000d10:	9999999a 	.word	0x9999999a
 8000d14:	3fc99999 	.word	0x3fc99999
 8000d18:	200005ac 	.word	0x200005ac
 8000d1c:	40390000 	.word	0x40390000
 8000d20:	404e0000 	.word	0x404e0000

08000d24 <main>:
//}

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void) {
 8000d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d28:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000d2c:	af06      	add	r7, sp, #24
    HAL_Init();
 8000d2e:	f000 fa42 	bl	80011b6 <HAL_Init>
    SystemClock_Config();
 8000d32:	f000 f88f 	bl	8000e54 <SystemClock_Config>
    MX_USB_DEVICE_Init();
 8000d36:	f007 f849 	bl	8007dcc <MX_USB_DEVICE_Init>

    char jsonBuffer[512];
    Insert_SensorData();
 8000d3a:	f7ff ff85 	bl	8000c48 <Insert_SensorData>

    while (1) {
        int offset = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset, "[");
 8000d44:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d48:	463a      	mov	r2, r7
 8000d4a:	18d0      	adds	r0, r2, r3
 8000d4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000d54:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <main+0x118>)
 8000d56:	4619      	mov	r1, r3
 8000d58:	f008 fa92 	bl	8009280 <sniprintf>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d62:	4413      	add	r3, r2
 8000d64:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

        for (int i = 0; i < DATA_COUNT; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000d6e:	e04c      	b.n	8000e0a <main+0xe6>
            offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000d70:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d74:	463a      	mov	r2, r7
 8000d76:	18d6      	adds	r6, r2, r3
 8000d78:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d7c:	f5c3 7800 	rsb	r8, r3, #512	; 0x200
                               "{\"id\":%d,\"temperature\":%.2f,\"humidity\":%.2f}%s",
                               sensorData[i].id, sensorData[i].temperature, sensorData[i].humidity,
 8000d80:	492f      	ldr	r1, [pc, #188]	; (8000e40 <main+0x11c>)
 8000d82:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	440b      	add	r3, r1
 8000d90:	881b      	ldrh	r3, [r3, #0]
            offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000d92:	4699      	mov	r9, r3
                               sensorData[i].id, sensorData[i].temperature, sensorData[i].humidity,
 8000d94:	492a      	ldr	r1, [pc, #168]	; (8000e40 <main+0x11c>)
 8000d96:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	440b      	add	r3, r1
 8000da4:	3304      	adds	r3, #4
 8000da6:	681b      	ldr	r3, [r3, #0]
            offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fbcd 	bl	8000548 <__aeabi_f2d>
 8000dae:	4604      	mov	r4, r0
 8000db0:	460d      	mov	r5, r1
                               sensorData[i].id, sensorData[i].temperature, sensorData[i].humidity,
 8000db2:	4923      	ldr	r1, [pc, #140]	; (8000e40 <main+0x11c>)
 8000db4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	681b      	ldr	r3, [r3, #0]
            offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fbbe 	bl	8000548 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8000dd4:	2909      	cmp	r1, #9
 8000dd6:	d101      	bne.n	8000ddc <main+0xb8>
 8000dd8:	491a      	ldr	r1, [pc, #104]	; (8000e44 <main+0x120>)
 8000dda:	e000      	b.n	8000dde <main+0xba>
 8000ddc:	491a      	ldr	r1, [pc, #104]	; (8000e48 <main+0x124>)
 8000dde:	9104      	str	r1, [sp, #16]
 8000de0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000de4:	e9cd 4500 	strd	r4, r5, [sp]
 8000de8:	464b      	mov	r3, r9
 8000dea:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <main+0x128>)
 8000dec:	4641      	mov	r1, r8
 8000dee:	4630      	mov	r0, r6
 8000df0:	f008 fa46 	bl	8009280 <sniprintf>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000dfa:	4413      	add	r3, r2
 8000dfc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        for (int i = 0; i < DATA_COUNT; i++) {
 8000e00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e04:	3301      	adds	r3, #1
 8000e06:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	ddae      	ble.n	8000d70 <main+0x4c>
                               (i == DATA_COUNT - 1) ? "" : ",");
        }

        snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset, "]\r\n");
 8000e12:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e16:	463a      	mov	r2, r7
 8000e18:	18d0      	adds	r0, r2, r3
 8000e1a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e1e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <main+0x12c>)
 8000e24:	4619      	mov	r1, r3
 8000e26:	f008 fa2b 	bl	8009280 <sniprintf>

        USB_SendData(jsonBuffer);
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 ffbc 	bl	8007daa <USB_SendData>
        HAL_Delay(5000);
 8000e32:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e36:	f000 fa33 	bl	80012a0 <HAL_Delay>
    while (1) {
 8000e3a:	e780      	b.n	8000d3e <main+0x1a>
 8000e3c:	0800b718 	.word	0x0800b718
 8000e40:	200005ac 	.word	0x200005ac
 8000e44:	0800b71c 	.word	0x0800b71c
 8000e48:	0800b720 	.word	0x0800b720
 8000e4c:	0800b724 	.word	0x0800b724
 8000e50:	0800b754 	.word	0x0800b754

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b096      	sub	sp, #88	; 0x58
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2244      	movs	r2, #68	; 0x44
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fd9a 	bl	800899c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e7a:	f002 f8e1 	bl	8003040 <HAL_PWREx_ControlVoltageScaling>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e84:	f000 f838 	bl	8000ef8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e94:	2360      	movs	r3, #96	; 0x60
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ea4:	2328      	movs	r3, #40	; 0x28
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 f927 	bl	800310c <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ec4:	f000 f818 	bl	8000ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fd25 	bl	8003930 <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000eec:	f000 f804 	bl	8000ef8 <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3758      	adds	r7, #88	; 0x58
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>
	...

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_MspInit+0x44>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_MspInit+0x44>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6613      	str	r3, [r2, #96]	; 0x60
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_MspInit+0x44>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_MspInit+0x44>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_MspInit+0x44>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_MspInit+0x44>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f962 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USB_IRQHandler+0x10>)
 8000fa6:	f000 fbe9 	bl	800177c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200012c8 	.word	0x200012c8

08000fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	return 1;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_kill>:

int _kill(int pid, int sig)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fce:	f007 fcbb 	bl	8008948 <__errno>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2216      	movs	r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
	return -1;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_exit>:

void _exit (int status)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ffe7 	bl	8000fc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ff6:	e7fe      	b.n	8000ff6 <_exit+0x12>

08000ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e00a      	b.n	8001020 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800100a:	f3af 8000 	nop.w
 800100e:	4601      	mov	r1, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf0      	blt.n	800100a <_read+0x12>
	}

return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e009      	b.n	8001058 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf1      	blt.n	8001044 <_write+0x12>
	}
	return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_close>:

int _close(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001092:	605a      	str	r2, [r3, #4]
	return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_isatty>:

int _isatty(int file)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	return 1;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f007 fc20 	bl	8008948 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000c000 	.word	0x2000c000
 8001134:	00000400 	.word	0x00000400
 8001138:	2000037c 	.word	0x2000037c
 800113c:	200015d8 	.word	0x200015d8

08001140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff ffea 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopForever+0xe>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopForever+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f007 fbdf 	bl	8008954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001196:	f7ff fdc5 	bl	8000d24 <main>

0800119a <LoopForever>:

LoopForever:
    b LoopForever
 800119a:	e7fe      	b.n	800119a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800119c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80011a8:	0800bbcc 	.word	0x0800bbcc
  ldr r2, =_sbss
 80011ac:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80011b0:	200015d4 	.word	0x200015d4

080011b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_IRQHandler>

080011b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f961 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f80e 	bl	80011e8 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	e001      	b.n	80011dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d8:	f7ff fe94 	bl	8000f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_InitTick+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d023      	beq.n	8001244 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_InitTick+0x70>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_InitTick+0x6c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f96d 	bl	80014f2 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10f      	bne.n	800123e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d809      	bhi.n	8001238 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f937 	bl	800149e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_InitTick+0x74>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e007      	b.n	8001248 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e004      	b.n	8001248 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e001      	b.n	8001248 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	20000000 	.word	0x20000000
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	20000624 	.word	0x20000624

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000624 	.word	0x20000624

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800150a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150c:	b08b      	sub	sp, #44	; 0x2c
 800150e:	af06      	add	r7, sp, #24
 8001510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e109      	b.n	8001730 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d106      	bne.n	8001536 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f006 fe63 	bl	80081fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 ff40 	bl	80043c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	687e      	ldr	r6, [r7, #4]
 8001550:	466d      	mov	r5, sp
 8001552:	f106 0410 	add.w	r4, r6, #16
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001562:	1d33      	adds	r3, r6, #4
 8001564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f002 ff06 	bl	8004378 <USB_CoreInit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0d8      	b.n	8001730 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f002 ff3a 	bl	80043fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e04d      	b.n	800162c <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	3305      	adds	r3, #5
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3304      	adds	r3, #4
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	b298      	uxth	r0, r3
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	333a      	adds	r3, #58	; 0x3a
 80015d0:	4602      	mov	r2, r0
 80015d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	3307      	adds	r3, #7
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	333c      	adds	r3, #60	; 0x3c
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	3340      	adds	r3, #64	; 0x40
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3344      	adds	r3, #68	; 0x44
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	3301      	adds	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3ac      	bcc.n	8001590 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e044      	b.n	80016c6 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	f203 136d 	addw	r3, r3, #365	; 0x16d
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	f203 136f 	addw	r3, r3, #367	; 0x16f
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	3301      	adds	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3b5      	bcc.n	800163c <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	687e      	ldr	r6, [r7, #4]
 80016d8:	466d      	mov	r5, sp
 80016da:	f106 0410 	add.w	r4, r6, #16
 80016de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ea:	1d33      	adds	r3, r6, #4
 80016ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ee:	6838      	ldr	r0, [r7, #0]
 80016f0:	f002 fe92 	bl	8004418 <USB_DevInit>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2202      	movs	r2, #2
 80016fe:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e014      	b.n	8001730 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f001 fc55 	bl	8002fce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fe3a 	bl	80063a2 <USB_DevDisconnect>

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001738 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_PCD_Start+0x16>
 800174a:	2302      	movs	r3, #2
 800174c:	e012      	b.n	8001774 <HAL_PCD_Start+0x3c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fe1d 	bl	800439a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fe05 	bl	8006374 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fe1f 	bl	80063cc <USB_ReadInterrupts>
 800178e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fb3e 	bl	8001e1c <PCD_EP_ISR_Handler>

    return;
 80017a0:	e110      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017be:	b292      	uxth	r2, r2
 80017c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f006 fdba 	bl	800833e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017ca:	2100      	movs	r1, #0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f8fc 	bl	80019ca <HAL_PCD_SetAddress>

    return;
 80017d2:	e0f7      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017f0:	b292      	uxth	r2, r2
 80017f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017f6:	e0e5      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00c      	beq.n	800181c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001814:	b292      	uxth	r2, r2
 8001816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800181a:	e0d3      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d034      	beq.n	8001890 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0204 	bic.w	r2, r2, #4
 8001838:	b292      	uxth	r2, r2
 800183a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	b292      	uxth	r2, r2
 8001852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f007 f818 	bl	80088a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f006 fd9d 	bl	80083b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001888:	b292      	uxth	r2, r2
 800188a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800188e:	e099      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001896:	2b00      	cmp	r3, #0
 8001898:	d027      	beq.n	80018ea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c4:	b292      	uxth	r2, r2
 80018c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0204 	orr.w	r2, r2, #4
 80018dc:	b292      	uxth	r2, r2
 80018de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f006 fd4a 	bl	800837c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018e8:	e06c      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d040      	beq.n	8001976 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d12b      	bne.n	800196e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	b292      	uxth	r2, r2
 800192a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001936:	b29a      	uxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0208 	orr.w	r2, r2, #8
 8001940:	b292      	uxth	r2, r2
 8001942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001956:	b29b      	uxth	r3, r3
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001964:	2101      	movs	r1, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f006 ff9a 	bl	80088a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800196c:	e02a      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f006 fd04 	bl	800837c <HAL_PCD_SuspendCallback>
    return;
 8001974:	e026      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00f      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001988:	b29a      	uxth	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001992:	b292      	uxth	r2, r2
 8001994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f006 fcc2 	bl	8008322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800199e:	e011      	b.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00c      	beq.n	80019c4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019bc:	b292      	uxth	r2, r2
 80019be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019c2:	bf00      	nop
  }
}
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_PCD_SetAddress+0x1a>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e013      	b.n	8001a0c <HAL_PCD_SetAddress+0x42>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fca5 	bl	800634c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	70fb      	strb	r3, [r7, #3]
 8001a26:	460b      	mov	r3, r1
 8001a28:	803b      	strh	r3, [r7, #0]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da0f      	bge.n	8001a5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3304      	adds	r3, #4
 8001a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	705a      	strb	r2, [r3, #1]
 8001a58:	e00f      	b.n	8001a7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 0207 	and.w	r2, r3, #7
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a86:	883a      	ldrh	r2, [r7, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	78ba      	ldrb	r2, [r7, #2]
 8001a90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aa4:	78bb      	ldrb	r3, [r7, #2]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_PCD_EP_Open+0xaa>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e00e      	b.n	8001adc <HAL_PCD_EP_Open+0xc8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fcc5 	bl	800445c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8001ada:	7afb      	ldrb	r3, [r7, #11]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da0f      	bge.n	8001b18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	705a      	strb	r2, [r3, #1]
 8001b16:	e00f      	b.n	8001b38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	f003 0207 	and.w	r2, r3, #7
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3304      	adds	r3, #4
 8001b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_PCD_EP_Close+0x6e>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e00e      	b.n	8001b70 <HAL_PCD_EP_Close+0x8c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f835 	bl	8004bd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 0207 	and.w	r2, r3, #7
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d106      	bne.n	8001bde <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6979      	ldr	r1, [r7, #20]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 f9e7 	bl	8004faa <USB_EPStartXfer>
 8001bdc:	e005      	b.n	8001bea <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6979      	ldr	r1, [r7, #20]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 f9e0 	bl	8004faa <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	460b      	mov	r3, r1
 8001c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 f98b 	bl	8004faa <USB_EPStartXfer>
 8001c94:	e005      	b.n	8001ca2 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 f984 	bl	8004faa <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 0207 	and.w	r2, r3, #7
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d901      	bls.n	8001cca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e04e      	b.n	8001d68 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0f      	bge.n	8001cf2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	705a      	strb	r2, [r3, #1]
 8001cf0:	e00d      	b.n	8001d0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_PCD_EP_SetStall+0x82>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e01c      	b.n	8001d68 <HAL_PCD_EP_SetStall+0xbc>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 fa06 	bl	800614e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f004 fb47 	bl	80063ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 020f 	and.w	r2, r3, #15
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d901      	bls.n	8001d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e042      	b.n	8001e14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da0f      	bge.n	8001db6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	705a      	strb	r2, [r3, #1]
 8001db4:	e00f      	b.n	8001dd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0207 	and.w	r2, r3, #7
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_PCD_EP_ClrStall+0x86>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e00e      	b.n	8001e14 <HAL_PCD_EP_ClrStall+0xa4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 f9f3 	bl	80061f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b096      	sub	sp, #88	; 0x58
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e24:	e3a9      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001e40:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 8169 	bne.w	800211c <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d150      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	81fb      	strh	r3, [r7, #14]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	332c      	adds	r3, #44	; 0x2c
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f006 fa18 	bl	80082ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8357 	beq.w	800257a <PCD_EP_ISR_Handler+0x75e>
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 8352 	bne.w	800257a <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001ef6:	e340      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f0a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d032      	beq.n	8001f7c <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8001f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f004 fa99 	bl	8006488 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f62:	4013      	ands	r3, r2
 8001f64:	823b      	strh	r3, [r7, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	8a3a      	ldrh	r2, [r7, #16]
 8001f6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f70:	b292      	uxth	r2, r2
 8001f72:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f006 f98d 	bl	8008294 <HAL_PCD_SetupStageCallback>
 8001f7a:	e2fe      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f7c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f280 82fa 	bge.w	800257a <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f92:	4013      	ands	r3, r2
 8001f94:	83fb      	strh	r3, [r7, #30]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	8bfa      	ldrh	r2, [r7, #30]
 8001f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d019      	beq.n	8002008 <PCD_EP_ISR_Handler+0x1ec>
 8001fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	6959      	ldr	r1, [r3, #20]
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f004 fa4b 	bl	8006488 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ffe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002000:	2100      	movs	r1, #0
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f006 f958 	bl	80082b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002012:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 82ad 	bne.w	800257a <PCD_EP_ISR_Handler+0x75e>
 8002020:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002024:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800202c:	f000 82a5 	beq.w	800257a <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4413      	add	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b3e      	cmp	r3, #62	; 0x3e
 8002056:	d918      	bls.n	800208a <PCD_EP_ISR_Handler+0x26e>
 8002058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	647b      	str	r3, [r7, #68]	; 0x44
 8002060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <PCD_EP_ISR_Handler+0x256>
 800206c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206e:	3b01      	subs	r3, #1
 8002070:	647b      	str	r3, [r7, #68]	; 0x44
 8002072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002074:	b29b      	uxth	r3, r3
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	b29b      	uxth	r3, r3
 800207a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002082:	b29a      	uxth	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	e029      	b.n	80020de <PCD_EP_ISR_Handler+0x2c2>
 800208a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <PCD_EP_ISR_Handler+0x29c>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800209c:	b29a      	uxth	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	801a      	strh	r2, [r3, #0]
 80020b6:	e012      	b.n	80020de <PCD_EP_ISR_Handler+0x2c2>
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	647b      	str	r3, [r7, #68]	; 0x44
 80020c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <PCD_EP_ISR_Handler+0x2b6>
 80020cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ce:	3301      	adds	r3, #1
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	029b      	lsls	r3, r3, #10
 80020d8:	b29a      	uxth	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	827b      	strh	r3, [r7, #18]
 80020f0:	8a7b      	ldrh	r3, [r7, #18]
 80020f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020f6:	827b      	strh	r3, [r7, #18]
 80020f8:	8a7b      	ldrh	r3, [r7, #18]
 80020fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020fe:	827b      	strh	r3, [r7, #18]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	8a7b      	ldrh	r3, [r7, #18]
 8002106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800210a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002116:	b29b      	uxth	r3, r3
 8002118:	8013      	strh	r3, [r2, #0]
 800211a:	e22e      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002130:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002134:	2b00      	cmp	r3, #0
 8002136:	f280 80f7 	bge.w	8002328 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29a      	uxth	r2, r3
 800214c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002150:	4013      	ands	r3, r2
 8002152:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002170:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218a:	7b1b      	ldrb	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d123      	bne.n	80021d8 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002198:	b29b      	uxth	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80021b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 808e 	beq.w	80022de <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c8:	6959      	ldr	r1, [r3, #20]
 80021ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021cc:	88da      	ldrh	r2, [r3, #6]
 80021ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021d2:	f004 f959 	bl	8006488 <USB_ReadPMA>
 80021d6:	e082      	b.n	80022de <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021da:	78db      	ldrb	r3, [r3, #3]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d10a      	bne.n	80021f6 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021e4:	461a      	mov	r2, r3
 80021e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f9d4 	bl	8002596 <HAL_PCD_EP_DB_Receive>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021f4:	e073      	b.n	80022de <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002210:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	441a      	add	r2, r3
 8002222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800222a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800222e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002236:	b29b      	uxth	r3, r3
 8002238:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d022      	beq.n	800229a <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225c:	b29b      	uxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	4413      	add	r3, r2
 800226e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002278:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800227c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02c      	beq.n	80022de <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800228a:	6959      	ldr	r1, [r3, #20]
 800228c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800228e:	891a      	ldrh	r2, [r3, #8]
 8002290:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002294:	f004 f8f8 	bl	8006488 <USB_ReadPMA>
 8002298:	e021      	b.n	80022de <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80022c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d4:	895a      	ldrh	r2, [r3, #10]
 80022d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022da:	f004 f8d5 	bl	8006488 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022e6:	441a      	add	r2, r3
 80022e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022f4:	441a      	add	r2, r3
 80022f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <PCD_EP_ISR_Handler+0x4f2>
 8002302:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d206      	bcs.n	800231c <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800230e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f005 ffcf 	bl	80082b8 <HAL_PCD_DataOutStageCallback>
 800231a:	e005      	b.n	8002328 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002322:	4618      	mov	r0, r3
 8002324:	f002 fe41 	bl	8004faa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002328:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8122 	beq.w	800257a <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002336:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	3304      	adds	r3, #4
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	441a      	add	r2, r3
 8002378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800237c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002384:	b29b      	uxth	r3, r3
 8002386:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238a:	78db      	ldrb	r3, [r3, #3]
 800238c:	2b01      	cmp	r3, #1
 800238e:	f040 80a2 	bne.w	80024d6 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	7b1b      	ldrb	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8093 	beq.w	80024c8 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d046      	beq.n	800243c <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d126      	bne.n	8002404 <PCD_EP_ISR_Handler+0x5e8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	4413      	add	r3, r2
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	00da      	lsls	r2, r3, #3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	4413      	add	r3, r2
 80023d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e061      	b.n	80024c8 <PCD_EP_ISR_Handler+0x6ac>
 8002404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d15d      	bne.n	80024c8 <PCD_EP_ISR_Handler+0x6ac>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	4413      	add	r3, r2
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	00da      	lsls	r2, r3, #3
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	4413      	add	r3, r2
 800242e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	2200      	movs	r2, #0
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	e045      	b.n	80024c8 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d126      	bne.n	8002498 <PCD_EP_ISR_Handler+0x67c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	4413      	add	r3, r2
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00da      	lsls	r2, r3, #3
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	4413      	add	r3, r2
 800246c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800247c:	b29a      	uxth	r2, r3
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002490:	b29a      	uxth	r2, r3
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e017      	b.n	80024c8 <PCD_EP_ISR_Handler+0x6ac>
 8002498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d113      	bne.n	80024c8 <PCD_EP_ISR_Handler+0x6ac>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	4413      	add	r3, r2
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	00da      	lsls	r2, r3, #3
 80024b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ba:	4413      	add	r3, r2
 80024bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2200      	movs	r2, #0
 80024c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f005 ff0d 	bl	80082ee <HAL_PCD_DataInStageCallback>
 80024d4:	e051      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80024d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d144      	bne.n	800256c <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002512:	429a      	cmp	r2, r3
 8002514:	d907      	bls.n	8002526 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	619a      	str	r2, [r3, #24]
 8002524:	e002      	b.n	800252c <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f005 fed7 	bl	80082ee <HAL_PCD_DataInStageCallback>
 8002540:	e01b      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800254a:	441a      	add	r2, r3
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002558:	441a      	add	r2, r3
 800255a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fd20 	bl	8004faa <USB_EPStartXfer>
 800256a:	e006      	b.n	800257a <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800256c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002570:	461a      	mov	r2, r3
 8002572:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f917 	bl	80027a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002582:	b29b      	uxth	r3, r3
 8002584:	b21b      	sxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	f6ff ac4d 	blt.w	8001e26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3758      	adds	r7, #88	; 0x58
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b088      	sub	sp, #32
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d07c      	beq.n	80026a8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	8b7b      	ldrh	r3, [r7, #26]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d306      	bcc.n	80025ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	8b7b      	ldrh	r3, [r7, #26]
 80025e4:	1ad2      	subs	r2, r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	619a      	str	r2, [r3, #24]
 80025ea:	e002      	b.n	80025f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d123      	bne.n	8002642 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002614:	833b      	strh	r3, [r7, #24]
 8002616:	8b3b      	ldrh	r3, [r7, #24]
 8002618:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800261c:	833b      	strh	r3, [r7, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	8b3b      	ldrh	r3, [r7, #24]
 800262e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263e:	b29b      	uxth	r3, r3
 8002640:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01f      	beq.n	800268c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	82fb      	strh	r3, [r7, #22]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	441a      	add	r2, r3
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800268c:	8b7b      	ldrh	r3, [r7, #26]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8085 	beq.w	800279e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6959      	ldr	r1, [r3, #20]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	891a      	ldrh	r2, [r3, #8]
 80026a0:	8b7b      	ldrh	r3, [r7, #26]
 80026a2:	f003 fef1 	bl	8006488 <USB_ReadPMA>
 80026a6:	e07a      	b.n	800279e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	8b7b      	ldrh	r3, [r7, #26]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d306      	bcc.n	80026e6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	e002      	b.n	80026ec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d123      	bne.n	800273c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	83fb      	strh	r3, [r7, #30]
 8002710:	8bfb      	ldrh	r3, [r7, #30]
 8002712:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002716:	83fb      	strh	r3, [r7, #30]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	441a      	add	r2, r3
 8002726:	8bfb      	ldrh	r3, [r7, #30]
 8002728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	b29b      	uxth	r3, r3
 800273a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11f      	bne.n	8002786 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	83bb      	strh	r3, [r7, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	441a      	add	r2, r3
 8002770:	8bbb      	ldrh	r3, [r7, #28]
 8002772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002782:	b29b      	uxth	r3, r3
 8002784:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002786:	8b7b      	ldrh	r3, [r7, #26]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	6959      	ldr	r1, [r3, #20]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	895a      	ldrh	r2, [r3, #10]
 8002798:	8b7b      	ldrh	r3, [r7, #26]
 800279a:	f003 fe75 	bl	8006488 <USB_ReadPMA>
    }
  }

  return count;
 800279e:	8b7b      	ldrh	r3, [r7, #26]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0a2      	sub	sp, #136	; 0x88
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 81c5 	beq.w	8002b4c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d907      	bls.n	8002806 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027fe:	1ad2      	subs	r2, r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	e002      	b.n	800280c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 80b9 	bne.w	8002988 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	785b      	ldrb	r3, [r3, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d126      	bne.n	800286c <HAL_PCD_EP_DB_Transmit+0xc4>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	4413      	add	r3, r2
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00da      	lsls	r2, r3, #3
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	4413      	add	r3, r2
 8002840:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002850:	b29a      	uxth	r2, r3
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002864:	b29a      	uxth	r2, r3
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	e01a      	b.n	80028a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d116      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	633b      	str	r3, [r7, #48]	; 0x30
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002882:	b29b      	uxth	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	4413      	add	r3, r2
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	00da      	lsls	r2, r3, #3
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	4413      	add	r3, r2
 8002896:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	2200      	movs	r2, #0
 80028a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d126      	bne.n	80028fe <HAL_PCD_EP_DB_Transmit+0x156>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4413      	add	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	e017      	b.n	800292e <HAL_PCD_EP_DB_Transmit+0x186>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	785b      	ldrb	r3, [r3, #1]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d113      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x186>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	4413      	add	r3, r2
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	00da      	lsls	r2, r3, #3
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	4413      	add	r3, r2
 8002922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2200      	movs	r2, #0
 800292c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f005 fcda 	bl	80082ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 82d2 	beq.w	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002960:	827b      	strh	r3, [r7, #18]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	8a7b      	ldrh	r3, [r7, #18]
 8002972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002982:	b29b      	uxth	r3, r3
 8002984:	8013      	strh	r3, [r2, #0]
 8002986:	e2b0      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d021      	beq.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80029c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f040 8284 	bne.w	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ea:	441a      	add	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f8:	441a      	add	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d309      	bcc.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	621a      	str	r2, [r3, #32]
 8002a1c:	e015      	b.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d107      	bne.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002a26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a34:	e009      	b.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d155      	bne.n	8002afe <HAL_PCD_EP_DB_Transmit+0x356>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	4413      	add	r3, r2
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00da      	lsls	r2, r3, #3
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	4413      	add	r3, r2
 8002a74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a7e:	d916      	bls.n	8002aae <HAL_PCD_EP_DB_Transmit+0x306>
 8002a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a92:	3b01      	subs	r3, #1
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	e043      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d112      	bne.n	8002ada <HAL_PCD_EP_DB_Transmit+0x332>
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	e02d      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x348>
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	3301      	adds	r3, #1
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e01b      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d117      	bne.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1a:	4413      	add	r3, r2
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	00da      	lsls	r2, r3, #3
 8002b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b26:	4413      	add	r3, r2
 8002b28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b34:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6959      	ldr	r1, [r3, #20]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	891a      	ldrh	r2, [r3, #8]
 8002b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f003 fc5d 	bl	8006404 <USB_WritePMA>
 8002b4a:	e1ce      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d307      	bcc.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b88:	1ad2      	subs	r2, r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	619a      	str	r2, [r3, #24]
 8002b8e:	e002      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 80c4 	bne.w	8002d28 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d126      	bne.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bbc:	4413      	add	r3, r2
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00da      	lsls	r2, r3, #3
 8002bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	e01a      	b.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x484>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d116      	bne.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x484>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	673b      	str	r3, [r7, #112]	; 0x70
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c12:	4413      	add	r3, r2
 8002c14:	673b      	str	r3, [r7, #112]	; 0x70
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	00da      	lsls	r2, r3, #3
 8002c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	2200      	movs	r2, #0
 8002c2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d12f      	bne.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c52:	4413      	add	r3, r2
 8002c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	00da      	lsls	r2, r3, #3
 8002c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c62:	4413      	add	r3, r2
 8002c64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c96:	801a      	strh	r2, [r3, #0]
 8002c98:	e017      	b.n	8002cca <HAL_PCD_EP_DB_Transmit+0x522>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d113      	bne.n	8002cca <HAL_PCD_EP_DB_Transmit+0x522>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00da      	lsls	r2, r3, #3
 8002cba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f005 fb0c 	bl	80082ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 8104 	bne.w	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	8013      	strh	r3, [r2, #0]
 8002d26:	e0e0      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d121      	bne.n	8002d76 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	441a      	add	r2, r3
 8002d5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f040 80b4 	bne.w	8002eea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d8a:	441a      	add	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d98:	441a      	add	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d309      	bcc.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db6:	1ad2      	subs	r2, r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	621a      	str	r2, [r3, #32]
 8002dbc:	e015      	b.n	8002dea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002dc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dd4:	e009      	b.n	8002dea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	663b      	str	r3, [r7, #96]	; 0x60
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d155      	bne.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e0c:	4413      	add	r3, r2
 8002e0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	00da      	lsls	r2, r3, #3
 8002e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e18:	4413      	add	r3, r2
 8002e1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e22:	2b3e      	cmp	r3, #62	; 0x3e
 8002e24:	d916      	bls.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x694>
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	029b      	lsls	r3, r3, #10
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	e040      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d112      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	e02a      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	677b      	str	r3, [r7, #116]	; 0x74
 8002e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e92:	3301      	adds	r3, #1
 8002e94:	677b      	str	r3, [r7, #116]	; 0x74
 8002e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea0:	801a      	strh	r2, [r3, #0]
 8002ea2:	e018      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d114      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eba:	4413      	add	r3, r2
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	00da      	lsls	r2, r3, #3
 8002ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6959      	ldr	r1, [r3, #20]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	895a      	ldrh	r2, [r3, #10]
 8002ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f003 fa8d 	bl	8006404 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f04:	823b      	strh	r3, [r7, #16]
 8002f06:	8a3b      	ldrh	r3, [r7, #16]
 8002f08:	f083 0310 	eor.w	r3, r3, #16
 8002f0c:	823b      	strh	r3, [r7, #16]
 8002f0e:	8a3b      	ldrh	r3, [r7, #16]
 8002f10:	f083 0320 	eor.w	r3, r3, #32
 8002f14:	823b      	strh	r3, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	8a3b      	ldrh	r3, [r7, #16]
 8002f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3788      	adds	r7, #136	; 0x88
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	4613      	mov	r3, r2
 8002f54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f56:	897b      	ldrh	r3, [r7, #10]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e00a      	b.n	8002f92 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f7c:	897a      	ldrh	r2, [r7, #10]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f92:	893b      	ldrh	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	80da      	strh	r2, [r3, #6]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2201      	movs	r2, #1
 8002fac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003006:	b29b      	uxth	r3, r3
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_PWREx_GetVoltageRange+0x18>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304e:	d130      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d038      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2232      	movs	r2, #50	; 0x32
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003084:	e002      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d102      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f2      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d110      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d007      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c8:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000
 80030e4:	20000000 	.word	0x20000000
 80030e8:	431bde83 	.word	0x431bde83

080030ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fa:	6053      	str	r3, [r2, #4]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40007000 	.word	0x40007000

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e3fe      	b.n	800391c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311e:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003128:	4b9e      	ldr	r3, [pc, #632]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80e4 	beq.w	8003308 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_RCC_OscConfig+0x4a>
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	f040 808b 	bne.w	8003264 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b01      	cmp	r3, #1
 8003152:	f040 8087 	bne.w	8003264 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003156:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e3d6      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	4b8c      	ldr	r3, [pc, #560]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_RCC_OscConfig+0x7c>
 800317e:	4b89      	ldr	r3, [pc, #548]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003186:	e005      	b.n	8003194 <HAL_RCC_OscConfig+0x88>
 8003188:	4b86      	ldr	r3, [pc, #536]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003194:	4293      	cmp	r3, r2
 8003196:	d223      	bcs.n	80031e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fd53 	bl	8003c48 <RCC_SetFlashLatencyFromMSIRange>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e3b7      	b.n	800391c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ac:	4b7d      	ldr	r3, [pc, #500]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7c      	ldr	r2, [pc, #496]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b7a      	ldr	r3, [pc, #488]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4977      	ldr	r1, [pc, #476]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4972      	ldr	r1, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e025      	b.n	800322c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e0:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6f      	ldr	r2, [pc, #444]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	496a      	ldr	r1, [pc, #424]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fe:	4b69      	ldr	r3, [pc, #420]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	4965      	ldr	r1, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fd13 	bl	8003c48 <RCC_SetFlashLatencyFromMSIRange>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e377      	b.n	800391c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800322c:	f000 fc80 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	495a      	ldr	r1, [pc, #360]	; (80033a8 <HAL_RCC_OscConfig+0x29c>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCC_OscConfig+0x2a0>)
 800324a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800324c:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_OscConfig+0x2a4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd ffc9 	bl	80011e8 <HAL_InitTick>
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d052      	beq.n	8003306 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	e35b      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d032      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4c      	ldr	r2, [pc, #304]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003278:	f7fe f806 	bl	8001288 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003280:	f7fe f802 	bl	8001288 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e344      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	493b      	ldr	r1, [pc, #236]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	4936      	ldr	r1, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e01a      	b.n	8003308 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d2:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032de:	f7fd ffd3 	bl	8001288 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e6:	f7fd ffcf 	bl	8001288 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e311      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x1da>
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003306:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d074      	beq.n	80033fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x21a>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d10e      	bne.n	800333e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d10b      	bne.n	800333e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d064      	beq.n	80033fc <HAL_RCC_OscConfig+0x2f0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d160      	bne.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e2ee      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x24a>
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e01d      	b.n	8003392 <HAL_RCC_OscConfig+0x286>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x26e>
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x286>
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fd ff75 	bl	8001288 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a0:	e011      	b.n	80033c6 <HAL_RCC_OscConfig+0x2ba>
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	0800b7a0 	.word	0x0800b7a0
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd ff68 	bl	8001288 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e2aa      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c6:	4baf      	ldr	r3, [pc, #700]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2a8>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd ff58 	bl	8001288 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fd ff54 	bl	8001288 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e296      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ee:	4ba5      	ldr	r3, [pc, #660]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x2d0>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d060      	beq.n	80034cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d005      	beq.n	800341c <HAL_RCC_OscConfig+0x310>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d119      	bne.n	800344a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d116      	bne.n	800344a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	4b99      	ldr	r3, [pc, #612]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x328>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e273      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b93      	ldr	r3, [pc, #588]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	4990      	ldr	r1, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003448:	e040      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d023      	beq.n	800349a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003452:	4b8c      	ldr	r3, [pc, #560]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a8b      	ldr	r2, [pc, #556]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fd ff13 	bl	8001288 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003466:	f7fd ff0f 	bl	8001288 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e251      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	497c      	ldr	r1, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	e018      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a79      	ldr	r2, [pc, #484]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fd feef 	bl	8001288 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fd feeb 	bl	8001288 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e22d      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c0:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03c      	beq.n	8003552 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01c      	beq.n	800351a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e6:	4a67      	ldr	r2, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fd feca 	bl	8001288 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fd fec6 	bl	8001288 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e208      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ef      	beq.n	80034f8 <HAL_RCC_OscConfig+0x3ec>
 8003518:	e01b      	b.n	8003552 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800351c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fd fead 	bl	8001288 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003532:	f7fd fea9 	bl	8001288 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1eb      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ef      	bne.n	8003532 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a6 	beq.w	80036ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003564:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10d      	bne.n	800358c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003588:	2301      	movs	r3, #1
 800358a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d118      	bne.n	80035ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a4:	f7fd fe70 	bl	8001288 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fd fe6c 	bl	8001288 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e1ae      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035be:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4d8>
 80035d2:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e2:	e024      	b.n	800362e <HAL_RCC_OscConfig+0x522>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d110      	bne.n	800360e <HAL_RCC_OscConfig+0x502>
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	4a24      	ldr	r2, [pc, #144]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800360c:	e00f      	b.n	800362e <HAL_RCC_OscConfig+0x522>
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fd fe27 	bl	8001288 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fd fe23 	bl	8001288 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e163      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ed      	beq.n	800363e <HAL_RCC_OscConfig+0x532>
 8003662:	e01a      	b.n	800369a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd fe10 	bl	8001288 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366a:	e00f      	b.n	800368c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd fe0c 	bl	8001288 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d906      	bls.n	800368c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e14c      	b.n	800391c <HAL_RCC_OscConfig+0x810>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368c:	4ba5      	ldr	r3, [pc, #660]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e8      	bne.n	800366c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a0:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	4a9f      	ldr	r2, [pc, #636]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d03c      	beq.n	8003732 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01c      	beq.n	80036fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036c0:	4b98      	ldr	r3, [pc, #608]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80036c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c6:	4a97      	ldr	r2, [pc, #604]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd fdda 	bl	8001288 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d8:	f7fd fdd6 	bl	8001288 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e118      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ea:	4b8e      	ldr	r3, [pc, #568]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80036ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ef      	beq.n	80036d8 <HAL_RCC_OscConfig+0x5cc>
 80036f8:	e01b      	b.n	8003732 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036fa:	4b8a      	ldr	r3, [pc, #552]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80036fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003700:	4a88      	ldr	r2, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fd fdbd 	bl	8001288 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003712:	f7fd fdb9 	bl	8001288 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0fb      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003724:	4b7f      	ldr	r3, [pc, #508]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ef      	bne.n	8003712 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80ef 	beq.w	800391a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	2b02      	cmp	r3, #2
 8003742:	f040 80c5 	bne.w	80038d0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003746:	4b77      	ldr	r3, [pc, #476]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0203 	and.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	429a      	cmp	r2, r3
 8003758:	d12c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	3b01      	subs	r3, #1
 8003766:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d123      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d11b      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d113      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d109      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d067      	beq.n	8003884 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d062      	beq.n	8003880 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037ba:	4b5a      	ldr	r3, [pc, #360]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0a8      	b.n	800391c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037ca:	4b56      	ldr	r3, [pc, #344]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a55      	ldr	r2, [pc, #340]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80037d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037d6:	f7fd fd57 	bl	8001288 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd fd53 	bl	8001288 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e095      	b.n	800391c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fc:	4b49      	ldr	r3, [pc, #292]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	4b49      	ldr	r3, [pc, #292]	; (8003928 <HAL_RCC_OscConfig+0x81c>)
 8003802:	4013      	ands	r3, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800380c:	3a01      	subs	r2, #1
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003816:	0212      	lsls	r2, r2, #8
 8003818:	4311      	orrs	r1, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0552      	lsls	r2, r2, #21
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800382a:	0852      	lsrs	r2, r2, #1
 800382c:	3a01      	subs	r2, #1
 800382e:	0652      	lsls	r2, r2, #25
 8003830:	4311      	orrs	r1, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003836:	06d2      	lsls	r2, r2, #27
 8003838:	430a      	orrs	r2, r1
 800383a:	493a      	ldr	r1, [pc, #232]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003840:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a37      	ldr	r2, [pc, #220]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800384c:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a34      	ldr	r2, [pc, #208]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003858:	f7fd fd16 	bl	8001288 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd fd12 	bl	8001288 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e054      	b.n	800391c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800387e:	e04c      	b.n	800391a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e04b      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d144      	bne.n	800391a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a23      	ldr	r2, [pc, #140]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a8:	f7fd fcee 	bl	8001288 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fcea 	bl	8001288 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e02c      	b.n	800391c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x7a4>
 80038ce:	e024      	b.n	800391a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d01f      	beq.n	8003916 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80038dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd fcd1 	bl	8001288 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fd fccd 	bl	8001288 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e00f      	b.n	800391c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	4905      	ldr	r1, [pc, #20]	; (8003924 <HAL_RCC_OscConfig+0x818>)
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_RCC_OscConfig+0x820>)
 8003910:	4013      	ands	r3, r2
 8003912:	60cb      	str	r3, [r1, #12]
 8003914:	e001      	b.n	800391a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	019d808c 	.word	0x019d808c
 800392c:	feeefffc 	.word	0xfeeefffc

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0e7      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b75      	ldr	r3, [pc, #468]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d910      	bls.n	8003974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4970      	ldr	r1, [pc, #448]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b6e      	ldr	r3, [pc, #440]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0cf      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d010      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398c:	429a      	cmp	r2, r3
 800398e:	d908      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4960      	ldr	r1, [pc, #384]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d04c      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	4b5a      	ldr	r3, [pc, #360]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0a6      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	4b54      	ldr	r3, [pc, #336]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d115      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e09a      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039e6:	4b4e      	ldr	r3, [pc, #312]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e08e      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f6:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e086      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4943      	ldr	r1, [pc, #268]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fc36 	bl	8001288 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fd fc32 	bl	8001288 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e06e      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d208      	bcs.n	8003a76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b2e      	ldr	r3, [pc, #184]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	492b      	ldr	r1, [pc, #172]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a76:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d210      	bcs.n	8003aa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 0207 	bic.w	r2, r3, #7
 8003a8c:	4923      	ldr	r1, [pc, #140]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCC_ClockConfig+0x1ec>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e036      	b.n	8003b14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	4918      	ldr	r1, [pc, #96]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4910      	ldr	r1, [pc, #64]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae4:	f000 f824 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	490b      	ldr	r1, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x1f4>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1f8>)
 8003b02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b04:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1fc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd fb6d 	bl	80011e8 <HAL_InitTick>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b12:	7afb      	ldrb	r3, [r7, #11]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40022000 	.word	0x40022000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800b7a0 	.word	0x0800b7a0
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b48:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x34>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d121      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d11e      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b64:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b70:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e004      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bb4:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d134      	bne.n	8003c28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0xac>
 8003bd4:	e005      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bd8:	617b      	str	r3, [r7, #20]
      break;
 8003bda:	e005      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bde:	617b      	str	r3, [r7, #20]
      break;
 8003be0:	e002      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	617b      	str	r3, [r7, #20]
      break;
 8003be6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be8:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	fb02 f203 	mul.w	r2, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	0e5b      	lsrs	r3, r3, #25
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c28:	69bb      	ldr	r3, [r7, #24]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	0800b7b0 	.word	0x0800b7b0
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	007a1200 	.word	0x007a1200

08003c48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c60:	f7ff f9e0 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c64:	6178      	str	r0, [r7, #20]
 8003c66:	e014      	b.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	; 0x58
 8003c74:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c80:	f7ff f9d0 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d10b      	bne.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d919      	bls.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ca4:	d902      	bls.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e013      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cac:	2301      	movs	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e010      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d902      	bls.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb8:	2303      	movs	r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e00a      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d102      	bne.n	8003cca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	e004      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d101      	bne.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 0207 	bic.w	r2, r3, #7
 8003cdc:	4909      	ldr	r1, [pc, #36]	; (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d001      	beq.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40022000 	.word	0x40022000

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d14:	2300      	movs	r3, #0
 8003d16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d031      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d2c:	d01a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d32:	d814      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d4a:	e00c      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa1e 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	74fb      	strb	r3, [r7, #19]
      break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d6c:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	494e      	ldr	r1, [pc, #312]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d82:	e001      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 809e 	beq.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d9a:	4b46      	ldr	r3, [pc, #280]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db0:	4b40      	ldr	r3, [pc, #256]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	4a3f      	ldr	r2, [pc, #252]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6593      	str	r3, [r2, #88]	; 0x58
 8003dbc:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd8:	f7fd fa56 	bl	8001288 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dde:	e009      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fd fa52 	bl	8001288 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	74fb      	strb	r3, [r7, #19]
        break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df4:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ef      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d15a      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e06:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01e      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d019      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e4e:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fa12 	bl	8001288 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fd fa0e 	bl	8001288 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d902      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e7e:	e006      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ec      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	74bb      	strb	r3, [r7, #18]
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec0:	7c7b      	ldrb	r3, [r7, #17]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4bb2      	ldr	r3, [pc, #712]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4ab1      	ldr	r2, [pc, #708]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ede:	4bac      	ldr	r3, [pc, #688]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f023 0203 	bic.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	49a8      	ldr	r1, [pc, #672]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f00:	4ba3      	ldr	r3, [pc, #652]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f023 020c 	bic.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	49a0      	ldr	r1, [pc, #640]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f22:	4b9b      	ldr	r3, [pc, #620]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	4997      	ldr	r1, [pc, #604]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	498f      	ldr	r1, [pc, #572]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4b8a      	ldr	r3, [pc, #552]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	4986      	ldr	r1, [pc, #536]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f88:	4b81      	ldr	r3, [pc, #516]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	497e      	ldr	r1, [pc, #504]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003faa:	4b79      	ldr	r3, [pc, #484]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4975      	ldr	r1, [pc, #468]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fcc:	4b70      	ldr	r3, [pc, #448]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	496d      	ldr	r1, [pc, #436]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fee:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	4964      	ldr	r1, [pc, #400]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d028      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004010:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401e:	495c      	ldr	r1, [pc, #368]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402e:	d106      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b57      	ldr	r3, [pc, #348]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a56      	ldr	r2, [pc, #344]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
 800403c:	e011      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004046:	d10c      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f8a0 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d028      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800406e:	4b48      	ldr	r3, [pc, #288]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407c:	4944      	ldr	r1, [pc, #272]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408c:	d106      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4a3f      	ldr	r2, [pc, #252]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004098:	60d3      	str	r3, [r2, #12]
 800409a:	e011      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f871 	bl	8004194 <RCCEx_PLLSAI1_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d028      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040cc:	4b30      	ldr	r3, [pc, #192]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	492d      	ldr	r1, [pc, #180]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ea:	d106      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f6:	60d3      	str	r3, [r2, #12]
 80040f8:	e011      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004102:	d10c      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f842 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01c      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	4915      	ldr	r1, [pc, #84]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f81f 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4904      	ldr	r1, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004186:	7cbb      	ldrb	r3, [r7, #18]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000

08004194 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a2:	4b74      	ldr	r3, [pc, #464]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041ae:	4b71      	ldr	r3, [pc, #452]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0203 	and.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d10d      	bne.n	80041da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
       ||
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041c6:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
       ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d047      	beq.n	800426a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	e044      	b.n	800426a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d018      	beq.n	800421a <RCCEx_PLLSAI1_Config+0x86>
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d825      	bhi.n	8004238 <RCCEx_PLLSAI1_Config+0xa4>
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d002      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0x62>
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d009      	beq.n	8004208 <RCCEx_PLLSAI1_Config+0x74>
 80041f4:	e020      	b.n	8004238 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041f6:	4b5f      	ldr	r3, [pc, #380]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11d      	bne.n	800423e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004206:	e01a      	b.n	800423e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004208:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d116      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e013      	b.n	8004242 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800421a:	4b56      	ldr	r3, [pc, #344]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10f      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004226:	4b53      	ldr	r3, [pc, #332]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004236:	e006      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e004      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
    }

    if(status == HAL_OK)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10d      	bne.n	800426a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800424e:	4b49      	ldr	r3, [pc, #292]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	430b      	orrs	r3, r1
 8004264:	4943      	ldr	r1, [pc, #268]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004266:	4313      	orrs	r3, r2
 8004268:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d17c      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004270:	4b40      	ldr	r3, [pc, #256]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a3f      	ldr	r2, [pc, #252]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800427a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427c:	f7fd f804 	bl	8001288 <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004282:	e009      	b.n	8004298 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004284:	f7fd f800 	bl	8001288 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	73fb      	strb	r3, [r7, #15]
        break;
 8004296:	e005      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004298:	4b36      	ldr	r3, [pc, #216]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ef      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d15f      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d110      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6892      	ldr	r2, [r2, #8]
 80042c0:	0211      	lsls	r1, r2, #8
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68d2      	ldr	r2, [r2, #12]
 80042c6:	06d2      	lsls	r2, r2, #27
 80042c8:	430a      	orrs	r2, r1
 80042ca:	492a      	ldr	r1, [pc, #168]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
 80042d0:	e027      	b.n	8004322 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d112      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6912      	ldr	r2, [r2, #16]
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0552      	lsls	r2, r2, #21
 80042f4:	430a      	orrs	r2, r1
 80042f6:	491f      	ldr	r1, [pc, #124]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
 80042fc:	e011      	b.n	8004322 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042fe:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004306:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6892      	ldr	r2, [r2, #8]
 800430e:	0211      	lsls	r1, r2, #8
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6952      	ldr	r2, [r2, #20]
 8004314:	0852      	lsrs	r2, r2, #1
 8004316:	3a01      	subs	r2, #1
 8004318:	0652      	lsls	r2, r2, #25
 800431a:	430a      	orrs	r2, r1
 800431c:	4915      	ldr	r1, [pc, #84]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a13      	ldr	r2, [pc, #76]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800432c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fc ffab 	bl	8001288 <HAL_GetTick>
 8004332:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004334:	e009      	b.n	800434a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004336:	f7fc ffa7 	bl	8001288 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d902      	bls.n	800434a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	73fb      	strb	r3, [r7, #15]
          break;
 8004348:	e005      	b.n	8004356 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ef      	beq.n	8004336 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	4903      	ldr	r1, [pc, #12]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000

08004378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004378:	b084      	sub	sp, #16
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	f107 0014 	add.w	r0, r7, #20
 8004386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	b004      	add	sp, #16
 8004398:	4770      	bx	lr

0800439a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043aa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80043ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80043d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	4013      	ands	r3, r2
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004418:	b084      	sub	sp, #16
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	f107 0014 	add.w	r0, r7, #20
 8004426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	b004      	add	sp, #16
 8004458:	4770      	bx	lr
	...

0800445c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800445c:	b480      	push	{r7}
 800445e:	b09d      	sub	sp, #116	; 0x74
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	78db      	ldrb	r3, [r3, #3]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d81f      	bhi.n	80044ce <USB_ActivateEndpoint+0x72>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <USB_ActivateEndpoint+0x38>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044a5 	.word	0x080044a5
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044d7 	.word	0x080044d7
 80044a0:	080044b3 	.word	0x080044b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044b0:	e012      	b.n	80044d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80044ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044be:	e00b      	b.n	80044d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044cc:	e004      	b.n	80044d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80044d4:	e000      	b.n	80044d8 <USB_ActivateEndpoint+0x7c>
      break;
 80044d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	b21b      	sxth	r3, r3
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	b21a      	sxth	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b21b      	sxth	r3, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	b21b      	sxth	r3, r3
 800451e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	b29b      	uxth	r3, r3
 8004542:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	7b1b      	ldrb	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 816e 	bne.w	800482a <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8084 	beq.w	8004660 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	4413      	add	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	00da      	lsls	r2, r3, #3
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	88db      	ldrh	r3, [r3, #6]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	827b      	strh	r3, [r7, #18]
 800459a:	8a7b      	ldrh	r3, [r7, #18]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <USB_ActivateEndpoint+0x180>
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	823b      	strh	r3, [r7, #16]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	441a      	add	r2, r3
 80045c6:	8a3b      	ldrh	r3, [r7, #16]
 80045c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	78db      	ldrb	r3, [r3, #3]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d020      	beq.n	8004626 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	81bb      	strh	r3, [r7, #12]
 80045fc:	89bb      	ldrh	r3, [r7, #12]
 80045fe:	f083 0320 	eor.w	r3, r3, #32
 8004602:	81bb      	strh	r3, [r7, #12]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	89bb      	ldrh	r3, [r7, #12]
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
 8004624:	e2cb      	b.n	8004bbe <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	81fb      	strh	r3, [r7, #14]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
 800465e:	e2ae      	b.n	8004bbe <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	4413      	add	r3, r2
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	00da      	lsls	r2, r3, #3
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	4413      	add	r3, r2
 800467e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	4413      	add	r3, r2
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	00da      	lsls	r2, r3, #3
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b3e      	cmp	r3, #62	; 0x3e
 80046be:	d918      	bls.n	80046f2 <USB_ActivateEndpoint+0x296>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <USB_ActivateEndpoint+0x27e>
 80046d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d6:	3b01      	subs	r3, #1
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046dc:	b29b      	uxth	r3, r3
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	801a      	strh	r2, [r3, #0]
 80046f0:	e029      	b.n	8004746 <USB_ActivateEndpoint+0x2ea>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d112      	bne.n	8004720 <USB_ActivateEndpoint+0x2c4>
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004704:	b29a      	uxth	r2, r3
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e012      	b.n	8004746 <USB_ActivateEndpoint+0x2ea>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	66bb      	str	r3, [r7, #104]	; 0x68
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <USB_ActivateEndpoint+0x2de>
 8004734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004736:	3301      	adds	r3, #1
 8004738:	66bb      	str	r3, [r7, #104]	; 0x68
 800473a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29a      	uxth	r2, r3
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	847b      	strh	r3, [r7, #34]	; 0x22
 8004754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01b      	beq.n	8004796 <USB_ActivateEndpoint+0x33a>
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	843b      	strh	r3, [r7, #32]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	8c3b      	ldrh	r3, [r7, #32]
 8004782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	b29b      	uxth	r3, r3
 8004794:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d124      	bne.n	80047e8 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	83bb      	strh	r3, [r7, #28]
 80047b6:	8bbb      	ldrh	r3, [r7, #28]
 80047b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047bc:	83bb      	strh	r3, [r7, #28]
 80047be:	8bbb      	ldrh	r3, [r7, #28]
 80047c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047c4:	83bb      	strh	r3, [r7, #28]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	8bbb      	ldrh	r3, [r7, #28]
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
 80047e6:	e1ea      	b.n	8004bbe <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	83fb      	strh	r3, [r7, #30]
 8004800:	8bfb      	ldrh	r3, [r7, #30]
 8004802:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004806:	83fb      	strh	r3, [r7, #30]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	8bfb      	ldrh	r3, [r7, #30]
 8004814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	b29b      	uxth	r3, r3
 8004826:	8013      	strh	r3, [r2, #0]
 8004828:	e1c9      	b.n	8004bbe <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	78db      	ldrb	r3, [r3, #3]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d11e      	bne.n	8004870 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004848:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e01d      	b.n	80048ac <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	4413      	add	r3, r2
 80048be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	00da      	lsls	r2, r3, #3
 80048c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	891b      	ldrh	r3, [r3, #8]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	657b      	str	r3, [r7, #84]	; 0x54
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	4413      	add	r3, r2
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	00da      	lsls	r2, r3, #3
 80048fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fc:	4413      	add	r3, r2
 80048fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004902:	653b      	str	r3, [r7, #80]	; 0x50
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	895b      	ldrh	r3, [r3, #10]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004912:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 8093 	bne.w	8004a44 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800492e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01b      	beq.n	8004972 <USB_ActivateEndpoint+0x516>
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004950:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800495e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004980:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <USB_ActivateEndpoint+0x566>
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049be:	b29b      	uxth	r3, r3
 80049c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80049da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80049e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a20:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
 8004a42:	e0bc      	b.n	8004bbe <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01d      	beq.n	8004a9c <USB_ActivateEndpoint+0x640>
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004aac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01d      	beq.n	8004af4 <USB_ActivateEndpoint+0x698>
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d024      	beq.n	8004b46 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b1a:	f083 0320 	eor.w	r3, r3, #32
 8004b1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
 8004b44:	e01d      	b.n	8004b82 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004bbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3774      	adds	r7, #116	; 0x74
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop

08004bd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b08d      	sub	sp, #52	; 0x34
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	7b1b      	ldrb	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 808e 	bne.w	8004d00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d044      	beq.n	8004c76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	81bb      	strh	r3, [r7, #12]
 8004bfa:	89bb      	ldrh	r3, [r7, #12]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <USB_DeactivateEndpoint+0x6c>
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	817b      	strh	r3, [r7, #10]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c52:	813b      	strh	r3, [r7, #8]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	893b      	ldrh	r3, [r7, #8]
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]
 8004c74:	e192      	b.n	8004f9c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	827b      	strh	r3, [r7, #18]
 8004c84:	8a7b      	ldrh	r3, [r7, #18]
 8004c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01b      	beq.n	8004cc6 <USB_DeactivateEndpoint+0xf6>
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	823b      	strh	r3, [r7, #16]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	8a3b      	ldrh	r3, [r7, #16]
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	81fb      	strh	r3, [r7, #14]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
 8004cfe:	e14d      	b.n	8004f9c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f040 80a5 	bne.w	8004e54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	843b      	strh	r3, [r7, #32]
 8004d18:	8c3b      	ldrh	r3, [r7, #32]
 8004d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01b      	beq.n	8004d5a <USB_DeactivateEndpoint+0x18a>
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d38:	83fb      	strh	r3, [r7, #30]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	83bb      	strh	r3, [r7, #28]
 8004d68:	8bbb      	ldrh	r3, [r7, #28]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01b      	beq.n	8004daa <USB_DeactivateEndpoint+0x1da>
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	837b      	strh	r3, [r7, #26]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8b7b      	ldrh	r3, [r7, #26]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	833b      	strh	r3, [r7, #24]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8b3b      	ldrh	r3, [r7, #24]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df8:	82fb      	strh	r3, [r7, #22]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8afb      	ldrh	r3, [r7, #22]
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	82bb      	strh	r3, [r7, #20]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	8abb      	ldrh	r3, [r7, #20]
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]
 8004e52:	e0a3      	b.n	8004f9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <USB_DeactivateEndpoint+0x2d4>
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004eb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <USB_DeactivateEndpoint+0x324>
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3734      	adds	r7, #52	; 0x34
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b0c2      	sub	sp, #264	; 0x108
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	1d3b      	adds	r3, r7, #4
 8004fb2:	6018      	str	r0, [r3, #0]
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fb8:	463b      	mov	r3, r7
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f040 8509 	bne.w	80059d6 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	463b      	mov	r3, r7
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d905      	bls.n	8004fe0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fde:	e004      	b.n	8004fea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	7b1b      	ldrb	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d128      	bne.n	8005046 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6959      	ldr	r1, [r3, #20]
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	88da      	ldrh	r2, [r3, #6]
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005004:	b29b      	uxth	r3, r3
 8005006:	1d38      	adds	r0, r7, #4
 8005008:	6800      	ldr	r0, [r0, #0]
 800500a:	f001 f9fb 	bl	8006404 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4413      	add	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	00da      	lsls	r2, r3, #3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	f000 bc9f 	b.w	8005984 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	2b02      	cmp	r3, #2
 800504e:	f040 8347 	bne.w	80056e0 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005052:	463b      	mov	r3, r7
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	f240 82eb 	bls.w	800563a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	463b      	mov	r3, r7
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	441a      	add	r2, r3
 8005090:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	463b      	mov	r3, r7
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	463b      	mov	r3, r7
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8159 	beq.w	8005388 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	633b      	str	r3, [r7, #48]	; 0x30
 80050dc:	463b      	mov	r3, r7
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d164      	bne.n	80051b0 <USB_EPStartXfer+0x206>
 80050e6:	1d3b      	adds	r3, r7, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	4413      	add	r3, r2
 80050fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fe:	463b      	mov	r3, r7
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	00da      	lsls	r2, r3, #3
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	4413      	add	r3, r2
 800510a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005114:	2b3e      	cmp	r3, #62	; 0x3e
 8005116:	d91c      	bls.n	8005152 <USB_EPStartXfer+0x1a8>
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <USB_EPStartXfer+0x18e>
 800512e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005132:	3b01      	subs	r3, #1
 8005134:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005138:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800513c:	b29b      	uxth	r3, r3
 800513e:	029b      	lsls	r3, r3, #10
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29a      	uxth	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e04a      	b.n	80051e8 <USB_EPStartXfer+0x23e>
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005156:	2b00      	cmp	r3, #0
 8005158:	d112      	bne.n	8005180 <USB_EPStartXfer+0x1d6>
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005164:	b29a      	uxth	r2, r3
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	801a      	strh	r2, [r3, #0]
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005178:	b29a      	uxth	r2, r3
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e033      	b.n	80051e8 <USB_EPStartXfer+0x23e>
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <USB_EPStartXfer+0x1f6>
 8005196:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800519a:	3301      	adds	r3, #1
 800519c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	e01b      	b.n	80051e8 <USB_EPStartXfer+0x23e>
 80051b0:	463b      	mov	r3, r7
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d116      	bne.n	80051e8 <USB_EPStartXfer+0x23e>
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	4413      	add	r3, r2
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
 80051cc:	463b      	mov	r3, r7
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	00da      	lsls	r2, r3, #3
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	895b      	ldrh	r3, [r3, #10]
 80051ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6959      	ldr	r1, [r3, #20]
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005202:	1d38      	adds	r0, r7, #4
 8005204:	6800      	ldr	r0, [r0, #0]
 8005206:	f001 f8fd 	bl	8006404 <USB_WritePMA>
            ep->xfer_buff += len;
 800520a:	463b      	mov	r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005214:	441a      	add	r2, r3
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a1a      	ldr	r2, [r3, #32]
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d909      	bls.n	8005240 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	621a      	str	r2, [r3, #32]
 800523e:	e008      	b.n	8005252 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005252:	463b      	mov	r3, r7
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d164      	bne.n	8005326 <USB_EPStartXfer+0x37c>
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	4413      	add	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	463b      	mov	r3, r7
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	00da      	lsls	r2, r3, #3
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528a:	2b3e      	cmp	r3, #62	; 0x3e
 800528c:	d91c      	bls.n	80052c8 <USB_EPStartXfer+0x31e>
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <USB_EPStartXfer+0x304>
 80052a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a8:	3b01      	subs	r3, #1
 80052aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e04d      	b.n	8005364 <USB_EPStartXfer+0x3ba>
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d112      	bne.n	80052f6 <USB_EPStartXfer+0x34c>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052da:	b29a      	uxth	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e036      	b.n	8005364 <USB_EPStartXfer+0x3ba>
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <USB_EPStartXfer+0x36c>
 800530c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005310:	3301      	adds	r3, #1
 8005312:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29a      	uxth	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e01e      	b.n	8005364 <USB_EPStartXfer+0x3ba>
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d119      	bne.n	8005364 <USB_EPStartXfer+0x3ba>
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	1d3b      	adds	r3, r7, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	4413      	add	r3, r2
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	00da      	lsls	r2, r3, #3
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	4413      	add	r3, r2
 8005354:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535e:	b29a      	uxth	r2, r3
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	891b      	ldrh	r3, [r3, #8]
 800536a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800536e:	463b      	mov	r3, r7
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6959      	ldr	r1, [r3, #20]
 8005374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005378:	b29b      	uxth	r3, r3
 800537a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800537e:	1d38      	adds	r0, r7, #4
 8005380:	6800      	ldr	r0, [r0, #0]
 8005382:	f001 f83f 	bl	8006404 <USB_WritePMA>
 8005386:	e2fd      	b.n	8005984 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d164      	bne.n	800545c <USB_EPStartXfer+0x4b2>
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	64bb      	str	r3, [r7, #72]	; 0x48
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a6:	4413      	add	r3, r2
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	00da      	lsls	r2, r3, #3
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b4:	4413      	add	r3, r2
 80053b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ba:	647b      	str	r3, [r7, #68]	; 0x44
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	2b3e      	cmp	r3, #62	; 0x3e
 80053c2:	d91c      	bls.n	80053fe <USB_EPStartXfer+0x454>
 80053c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <USB_EPStartXfer+0x43a>
 80053da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053de:	3b01      	subs	r3, #1
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	029b      	lsls	r3, r3, #10
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e04d      	b.n	800549a <USB_EPStartXfer+0x4f0>
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005402:	2b00      	cmp	r3, #0
 8005404:	d112      	bne.n	800542c <USB_EPStartXfer+0x482>
 8005406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005410:	b29a      	uxth	r2, r3
 8005412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	e036      	b.n	800549a <USB_EPStartXfer+0x4f0>
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <USB_EPStartXfer+0x4a2>
 8005442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005446:	3301      	adds	r3, #1
 8005448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800544c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005450:	b29b      	uxth	r3, r3
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	b29a      	uxth	r2, r3
 8005456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	e01e      	b.n	800549a <USB_EPStartXfer+0x4f0>
 800545c:	463b      	mov	r3, r7
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d119      	bne.n	800549a <USB_EPStartXfer+0x4f0>
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	653b      	str	r3, [r7, #80]	; 0x50
 800546c:	1d3b      	adds	r3, r7, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547a:	4413      	add	r3, r2
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
 800547e:	463b      	mov	r3, r7
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	00da      	lsls	r2, r3, #3
 8005486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005488:	4413      	add	r3, r2
 800548a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005494:	b29a      	uxth	r2, r3
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	891b      	ldrh	r3, [r3, #8]
 80054a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6959      	ldr	r1, [r3, #20]
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054b4:	1d38      	adds	r0, r7, #4
 80054b6:	6800      	ldr	r0, [r0, #0]
 80054b8:	f000 ffa4 	bl	8006404 <USB_WritePMA>
            ep->xfer_buff += len;
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c6:	441a      	add	r2, r3
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054ce:	463b      	mov	r3, r7
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d909      	bls.n	80054f2 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80054de:	463b      	mov	r3, r7
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e8:	1ad2      	subs	r2, r2, r3
 80054ea:	463b      	mov	r3, r7
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	621a      	str	r2, [r3, #32]
 80054f0:	e008      	b.n	8005504 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054fc:	463b      	mov	r3, r7
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	643b      	str	r3, [r7, #64]	; 0x40
 800550a:	463b      	mov	r3, r7
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d164      	bne.n	80055de <USB_EPStartXfer+0x634>
 8005514:	1d3b      	adds	r3, r7, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	4413      	add	r3, r2
 800552a:	63bb      	str	r3, [r7, #56]	; 0x38
 800552c:	463b      	mov	r3, r7
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00da      	lsls	r2, r3, #3
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	4413      	add	r3, r2
 8005538:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
 800553e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005542:	2b3e      	cmp	r3, #62	; 0x3e
 8005544:	d91c      	bls.n	8005580 <USB_EPStartXfer+0x5d6>
 8005546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <USB_EPStartXfer+0x5bc>
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	3b01      	subs	r3, #1
 8005562:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	b29b      	uxth	r3, r3
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e04a      	b.n	8005616 <USB_EPStartXfer+0x66c>
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005584:	2b00      	cmp	r3, #0
 8005586:	d112      	bne.n	80055ae <USB_EPStartXfer+0x604>
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005592:	b29a      	uxth	r2, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e033      	b.n	8005616 <USB_EPStartXfer+0x66c>
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <USB_EPStartXfer+0x624>
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	e01b      	b.n	8005616 <USB_EPStartXfer+0x66c>
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d116      	bne.n	8005616 <USB_EPStartXfer+0x66c>
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f6:	4413      	add	r3, r2
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	00da      	lsls	r2, r3, #3
 8005602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005604:	4413      	add	r3, r2
 8005606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005610:	b29a      	uxth	r2, r3
 8005612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005614:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	895b      	ldrh	r3, [r3, #10]
 800561c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6959      	ldr	r1, [r3, #20]
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562a:	b29b      	uxth	r3, r3
 800562c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005630:	1d38      	adds	r0, r7, #4
 8005632:	6800      	ldr	r0, [r0, #0]
 8005634:	f000 fee6 	bl	8006404 <USB_WritePMA>
 8005638:	e1a4      	b.n	8005984 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005644:	1d3b      	adds	r3, r7, #4
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	463b      	mov	r3, r7
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005684:	b29b      	uxth	r3, r3
 8005686:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005696:	b29b      	uxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569c:	4413      	add	r3, r2
 800569e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	00da      	lsls	r2, r3, #3
 80056a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056bc:	463b      	mov	r3, r7
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	891b      	ldrh	r3, [r3, #8]
 80056c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6959      	ldr	r1, [r3, #20]
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056d6:	1d38      	adds	r0, r7, #4
 80056d8:	6800      	ldr	r0, [r0, #0]
 80056da:	f000 fe93 	bl	8006404 <USB_WritePMA>
 80056de:	e151      	b.n	8005984 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a1a      	ldr	r2, [r3, #32]
 80056e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 809b 	beq.w	8005844 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	673b      	str	r3, [r7, #112]	; 0x70
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d164      	bne.n	80057e8 <USB_EPStartXfer+0x83e>
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	66bb      	str	r3, [r7, #104]	; 0x68
 8005724:	1d3b      	adds	r3, r7, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005732:	4413      	add	r3, r2
 8005734:	66bb      	str	r3, [r7, #104]	; 0x68
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00da      	lsls	r2, r3, #3
 800573e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005740:	4413      	add	r3, r2
 8005742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005746:	667b      	str	r3, [r7, #100]	; 0x64
 8005748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574c:	2b3e      	cmp	r3, #62	; 0x3e
 800574e:	d91c      	bls.n	800578a <USB_EPStartXfer+0x7e0>
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <USB_EPStartXfer+0x7c6>
 8005766:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800576a:	3b01      	subs	r3, #1
 800576c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005770:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005774:	b29b      	uxth	r3, r3
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e04a      	b.n	8005820 <USB_EPStartXfer+0x876>
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578e:	2b00      	cmp	r3, #0
 8005790:	d112      	bne.n	80057b8 <USB_EPStartXfer+0x80e>
 8005792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579c:	b29a      	uxth	r2, r3
 800579e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e033      	b.n	8005820 <USB_EPStartXfer+0x876>
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <USB_EPStartXfer+0x82e>
 80057ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057d2:	3301      	adds	r3, #1
 80057d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057dc:	b29b      	uxth	r3, r3
 80057de:	029b      	lsls	r3, r3, #10
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e01b      	b.n	8005820 <USB_EPStartXfer+0x876>
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d116      	bne.n	8005820 <USB_EPStartXfer+0x876>
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005800:	4413      	add	r3, r2
 8005802:	673b      	str	r3, [r7, #112]	; 0x70
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	00da      	lsls	r2, r3, #3
 800580c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800580e:	4413      	add	r3, r2
 8005810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005814:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	b29a      	uxth	r2, r3
 800581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	895b      	ldrh	r3, [r3, #10]
 8005826:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800582a:	463b      	mov	r3, r7
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6959      	ldr	r1, [r3, #20]
 8005830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005834:	b29b      	uxth	r3, r3
 8005836:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800583a:	1d38      	adds	r0, r7, #4
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f000 fde1 	bl	8006404 <USB_WritePMA>
 8005842:	e09f      	b.n	8005984 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d164      	bne.n	8005918 <USB_EPStartXfer+0x96e>
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005854:	1d3b      	adds	r3, r7, #4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005862:	4413      	add	r3, r2
 8005864:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	00da      	lsls	r2, r3, #3
 800586e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005870:	4413      	add	r3, r2
 8005872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005876:	67bb      	str	r3, [r7, #120]	; 0x78
 8005878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587c:	2b3e      	cmp	r3, #62	; 0x3e
 800587e:	d91c      	bls.n	80058ba <USB_EPStartXfer+0x910>
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <USB_EPStartXfer+0x8f6>
 8005896:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800589a:	3b01      	subs	r3, #1
 800589c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e053      	b.n	8005962 <USB_EPStartXfer+0x9b8>
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d112      	bne.n	80058e8 <USB_EPStartXfer+0x93e>
 80058c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e03c      	b.n	8005962 <USB_EPStartXfer+0x9b8>
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <USB_EPStartXfer+0x95e>
 80058fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005902:	3301      	adds	r3, #1
 8005904:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005908:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800590c:	b29b      	uxth	r3, r3
 800590e:	029b      	lsls	r3, r3, #10
 8005910:	b29a      	uxth	r2, r3
 8005912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	e024      	b.n	8005962 <USB_EPStartXfer+0x9b8>
 8005918:	463b      	mov	r3, r7
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	785b      	ldrb	r3, [r3, #1]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d11f      	bne.n	8005962 <USB_EPStartXfer+0x9b8>
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800592a:	1d3b      	adds	r3, r7, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005932:	b29b      	uxth	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800593a:	4413      	add	r3, r2
 800593c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	00da      	lsls	r2, r3, #3
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594c:	4413      	add	r3, r2
 800594e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	b29a      	uxth	r2, r3
 800595c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005960:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005962:	463b      	mov	r3, r7
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	891b      	ldrh	r3, [r3, #8]
 8005968:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6959      	ldr	r1, [r3, #20]
 8005972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005976:	b29b      	uxth	r3, r3
 8005978:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800597c:	1d38      	adds	r0, r7, #4
 800597e:	6800      	ldr	r0, [r0, #0]
 8005980:	f000 fd40 	bl	8006404 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599e:	817b      	strh	r3, [r7, #10]
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	f083 0310 	eor.w	r3, r3, #16
 80059a6:	817b      	strh	r3, [r7, #10]
 80059a8:	897b      	ldrh	r3, [r7, #10]
 80059aa:	f083 0320 	eor.w	r3, r3, #32
 80059ae:	817b      	strh	r3, [r7, #10]
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	8013      	strh	r3, [r2, #0]
 80059d4:	e3b5      	b.n	8006142 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	7b1b      	ldrb	r3, [r3, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f040 8090 	bne.w	8005b02 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059e2:	463b      	mov	r3, r7
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	463b      	mov	r3, r7
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d90e      	bls.n	8005a10 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	463b      	mov	r3, r7
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	619a      	str	r2, [r3, #24]
 8005a0e:	e008      	b.n	8005a22 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	00da      	lsls	r2, r3, #3
 8005a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a5c:	d91d      	bls.n	8005a9a <USB_EPStartXfer+0xaf0>
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <USB_EPStartXfer+0xad4>
 8005a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e325      	b.n	80060e6 <USB_EPStartXfer+0x113c>
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d116      	bne.n	8005ad0 <USB_EPStartXfer+0xb26>
 8005aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e30a      	b.n	80060e6 <USB_EPStartXfer+0x113c>
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <USB_EPStartXfer+0xb46>
 8005ae6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aea:	3301      	adds	r3, #1
 8005aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005af0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	029b      	lsls	r3, r3, #10
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e2f1      	b.n	80060e6 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	78db      	ldrb	r3, [r3, #3]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	f040 818f 	bne.w	8005e2c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b0e:	463b      	mov	r3, r7
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d175      	bne.n	8005c04 <USB_EPStartXfer+0xc5a>
 8005b18:	1d3b      	adds	r3, r7, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b30:	4413      	add	r3, r2
 8005b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	00da      	lsls	r2, r3, #3
 8005b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b3e      	cmp	r3, #62	; 0x3e
 8005b54:	d91f      	bls.n	8005b96 <USB_EPStartXfer+0xbec>
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b62:	463b      	mov	r3, r7
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <USB_EPStartXfer+0xbd0>
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b74:	3b01      	subs	r3, #1
 8005b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e05c      	b.n	8005c50 <USB_EPStartXfer+0xca6>
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d116      	bne.n	8005bce <USB_EPStartXfer+0xc24>
 8005ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	e040      	b.n	8005c50 <USB_EPStartXfer+0xca6>
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bda:	463b      	mov	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <USB_EPStartXfer+0xc48>
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e025      	b.n	8005c50 <USB_EPStartXfer+0xca6>
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d120      	bne.n	8005c50 <USB_EPStartXfer+0xca6>
 8005c0e:	1d3b      	adds	r3, r7, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c26:	4413      	add	r3, r2
 8005c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	00da      	lsls	r2, r3, #3
 8005c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c58:	463b      	mov	r3, r7
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d175      	bne.n	8005d4e <USB_EPStartXfer+0xda4>
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c80:	463b      	mov	r3, r7
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	00da      	lsls	r2, r3, #3
 8005c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9e:	d91f      	bls.n	8005ce0 <USB_EPStartXfer+0xd36>
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cac:	463b      	mov	r3, r7
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USB_EPStartXfer+0xd1a>
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e058      	b.n	8005d92 <USB_EPStartXfer+0xde8>
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d116      	bne.n	8005d18 <USB_EPStartXfer+0xd6e>
 8005cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	e03c      	b.n	8005d92 <USB_EPStartXfer+0xde8>
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <USB_EPStartXfer+0xd92>
 8005d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d36:	3301      	adds	r3, #1
 8005d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e021      	b.n	8005d92 <USB_EPStartXfer+0xde8>
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d11c      	bne.n	8005d92 <USB_EPStartXfer+0xde8>
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00da      	lsls	r2, r3, #3
 8005d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d90:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d92:	463b      	mov	r3, r7
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 81a4 	beq.w	80060e6 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	463b      	mov	r3, r7
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005db2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <USB_EPStartXfer+0xe20>
 8005dbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 8187 	bne.w	80060e6 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f040 8180 	bne.w	80060e6 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	463b      	mov	r3, r7
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005e04:	1d3b      	adds	r3, r7, #4
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	8013      	strh	r3, [r2, #0]
 8005e2a:	e15c      	b.n	80060e6 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	78db      	ldrb	r3, [r3, #3]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 8155 	bne.w	80060e2 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	463b      	mov	r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d90e      	bls.n	8005e66 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5c:	1ad2      	subs	r2, r2, r3
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	619a      	str	r2, [r3, #24]
 8005e64:	e008      	b.n	8005e78 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005e70:	463b      	mov	r3, r7
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2200      	movs	r2, #0
 8005e76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d16f      	bne.n	8005f62 <USB_EPStartXfer+0xfb8>
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e8a:	1d3b      	adds	r3, r7, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	00da      	lsls	r2, r3, #3
 8005ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	2b3e      	cmp	r3, #62	; 0x3e
 8005ebc:	d91d      	bls.n	8005efa <USB_EPStartXfer+0xf50>
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <USB_EPStartXfer+0xf34>
 8005ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e058      	b.n	8005fac <USB_EPStartXfer+0x1002>
 8005efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d116      	bne.n	8005f30 <USB_EPStartXfer+0xf86>
 8005f02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	e03d      	b.n	8005fac <USB_EPStartXfer+0x1002>
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <USB_EPStartXfer+0xfa6>
 8005f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e024      	b.n	8005fac <USB_EPStartXfer+0x1002>
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d11f      	bne.n	8005fac <USB_EPStartXfer+0x1002>
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f84:	4413      	add	r3, r2
 8005f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	00da      	lsls	r2, r3, #3
 8005f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f96:	4413      	add	r3, r2
 8005f98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d16f      	bne.n	800609e <USB_EPStartXfer+0x10f4>
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fdc:	463b      	mov	r3, r7
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	00da      	lsls	r2, r3, #3
 8005fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fe8:	4413      	add	r3, r2
 8005fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff8:	d91d      	bls.n	8006036 <USB_EPStartXfer+0x108c>
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2b00      	cmp	r3, #0
 800600e:	d104      	bne.n	800601a <USB_EPStartXfer+0x1070>
 8006010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006014:	3b01      	subs	r3, #1
 8006016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800601a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800601e:	b29b      	uxth	r3, r3
 8006020:	029b      	lsls	r3, r3, #10
 8006022:	b29b      	uxth	r3, r3
 8006024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	e057      	b.n	80060e6 <USB_EPStartXfer+0x113c>
 8006036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <USB_EPStartXfer+0x10c2>
 800603e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e03c      	b.n	80060e6 <USB_EPStartXfer+0x113c>
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <USB_EPStartXfer+0x10e2>
 8006082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006086:	3301      	adds	r3, #1
 8006088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800608c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006090:	b29b      	uxth	r3, r3
 8006092:	029b      	lsls	r3, r3, #10
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	e023      	b.n	80060e6 <USB_EPStartXfer+0x113c>
 800609e:	463b      	mov	r3, r7
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d11e      	bne.n	80060e6 <USB_EPStartXfer+0x113c>
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060b8:	4413      	add	r3, r2
 80060ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00da      	lsls	r2, r3, #3
 80060c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e001      	b.n	80060e6 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e02e      	b.n	8006144 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	463b      	mov	r3, r7
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006104:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006108:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800610c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006110:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006114:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006118:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800614e:	b480      	push	{r7}
 8006150:	b085      	sub	sp, #20
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d020      	beq.n	80061a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006176:	81bb      	strh	r3, [r7, #12]
 8006178:	89bb      	ldrh	r3, [r7, #12]
 800617a:	f083 0310 	eor.w	r3, r3, #16
 800617e:	81bb      	strh	r3, [r7, #12]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	89bb      	ldrh	r3, [r7, #12]
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]
 80061a0:	e01f      	b.n	80061e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	81fb      	strh	r3, [r7, #14]
 80061ba:	89fb      	ldrh	r3, [r7, #14]
 80061bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061c0:	81fb      	strh	r3, [r7, #14]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	441a      	add	r2, r3
 80061cc:	89fb      	ldrh	r3, [r7, #14]
 80061ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061de:	b29b      	uxth	r3, r3
 80061e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	7b1b      	ldrb	r3, [r3, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 809d 	bne.w	800633e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d04c      	beq.n	80062a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	823b      	strh	r3, [r7, #16]
 800621a:	8a3b      	ldrh	r3, [r7, #16]
 800621c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01b      	beq.n	800625c <USB_EPClearStall+0x6c>
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	81fb      	strh	r3, [r7, #14]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	89fb      	ldrh	r3, [r7, #14]
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d06c      	beq.n	800633e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627a:	81bb      	strh	r3, [r7, #12]
 800627c:	89bb      	ldrh	r3, [r7, #12]
 800627e:	f083 0320 	eor.w	r3, r3, #32
 8006282:	81bb      	strh	r3, [r7, #12]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	89bb      	ldrh	r3, [r7, #12]
 8006290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8013      	strh	r3, [r2, #0]
 80062a4:	e04b      	b.n	800633e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	82fb      	strh	r3, [r7, #22]
 80062b4:	8afb      	ldrh	r3, [r7, #22]
 80062b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01b      	beq.n	80062f6 <USB_EPClearStall+0x106>
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d4:	82bb      	strh	r3, [r7, #20]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	8abb      	ldrh	r3, [r7, #20]
 80062e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	827b      	strh	r3, [r7, #18]
 800630e:	8a7b      	ldrh	r3, [r7, #18]
 8006310:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006314:	827b      	strh	r3, [r7, #18]
 8006316:	8a7b      	ldrh	r3, [r7, #18]
 8006318:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800631c:	827b      	strh	r3, [r7, #18]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	8a7b      	ldrh	r3, [r7, #18]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29a      	uxth	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063da:	b29b      	uxth	r3, r3
 80063dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80063de:	68fb      	ldr	r3, [r7, #12]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006404:	b480      	push	{r7}
 8006406:	b08b      	sub	sp, #44	; 0x2c
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	460b      	mov	r3, r1
 8006414:	80fb      	strh	r3, [r7, #6]
 8006416:	4613      	mov	r3, r2
 8006418:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800641a:	88bb      	ldrh	r3, [r7, #4]
 800641c:	3301      	adds	r3, #1
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006434:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
 800643a:	e01b      	b.n	8006474 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	b21a      	sxth	r2, r3
 800644c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006450:	4313      	orrs	r3, r2
 8006452:	b21b      	sxth	r3, r3
 8006454:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	8a7a      	ldrh	r2, [r7, #18]
 800645a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	3302      	adds	r3, #2
 8006460:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	3301      	adds	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	3b01      	subs	r3, #1
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e0      	bne.n	800643c <USB_WritePMA+0x38>
  }
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	372c      	adds	r7, #44	; 0x2c
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006488:	b480      	push	{r7}
 800648a:	b08b      	sub	sp, #44	; 0x2c
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4611      	mov	r1, r2
 8006494:	461a      	mov	r2, r3
 8006496:	460b      	mov	r3, r1
 8006498:	80fb      	strh	r3, [r7, #6]
 800649a:	4613      	mov	r3, r2
 800649c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800649e:	88bb      	ldrh	r3, [r7, #4]
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
 80064be:	e018      	b.n	80064f2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	3302      	adds	r3, #2
 80064cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3301      	adds	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	0a1b      	lsrs	r3, r3, #8
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3301      	adds	r3, #1
 80064ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	3b01      	subs	r3, #1
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e3      	bne.n	80064c0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	701a      	strb	r2, [r3, #0]
  }
}
 8006514:	bf00      	nop
 8006516:	372c      	adds	r7, #44	; 0x2c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800652c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006530:	f002 f9ec 	bl	800890c <USBD_static_malloc>
 8006534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d105      	bne.n	8006548 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006544:	2302      	movs	r3, #2
 8006546:	e066      	b.n	8006616 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7c1b      	ldrb	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d119      	bne.n	800658c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655c:	2202      	movs	r2, #2
 800655e:	2181      	movs	r1, #129	; 0x81
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 ffd5 	bl	8008510 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800656c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006570:	2202      	movs	r2, #2
 8006572:	2101      	movs	r1, #1
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 ffcb 	bl	8008510 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2210      	movs	r2, #16
 8006586:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800658a:	e016      	b.n	80065ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800658c:	2340      	movs	r3, #64	; 0x40
 800658e:	2202      	movs	r2, #2
 8006590:	2181      	movs	r1, #129	; 0x81
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 ffbc 	bl	8008510 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	2202      	movs	r2, #2
 80065a2:	2101      	movs	r1, #1
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 ffb3 	bl	8008510 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2210      	movs	r2, #16
 80065b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ba:	2308      	movs	r3, #8
 80065bc:	2203      	movs	r2, #3
 80065be:	2182      	movs	r1, #130	; 0x82
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 ffa5 	bl	8008510 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7c1b      	ldrb	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fa:	2101      	movs	r1, #1
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f002 f903 	bl	8008808 <USBD_LL_PrepareReceive>
 8006602:	e007      	b.n	8006614 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	2101      	movs	r1, #1
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f002 f8fa 	bl	8008808 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800662a:	2181      	movs	r1, #129	; 0x81
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 ffad 	bl	800858c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006638:	2101      	movs	r1, #1
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 ffa6 	bl	800858c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006648:	2182      	movs	r1, #130	; 0x82
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 ff9e 	bl	800858c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667a:	4618      	mov	r0, r3
 800667c:	f002 f954 	bl	8008928 <USBD_static_free>
    pdev->pClassData = NULL;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e0af      	b.n	800681c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d03f      	beq.n	8006748 <USBD_CDC_Setup+0xb4>
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	f040 809f 	bne.w	800680c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	88db      	ldrh	r3, [r3, #6]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d02e      	beq.n	8006734 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	b25b      	sxtb	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da16      	bge.n	800670e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80066ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	88d2      	ldrh	r2, [r2, #6]
 80066f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	88db      	ldrh	r3, [r3, #6]
 80066f8:	2b07      	cmp	r3, #7
 80066fa:	bf28      	it	cs
 80066fc:	2307      	movcs	r3, #7
 80066fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	89fa      	ldrh	r2, [r7, #14]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 facf 	bl	8007caa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800670c:	e085      	b.n	800681a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	785a      	ldrb	r2, [r3, #1]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	88db      	ldrh	r3, [r3, #6]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006724:	6939      	ldr	r1, [r7, #16]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	88db      	ldrh	r3, [r3, #6]
 800672a:	461a      	mov	r2, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fae8 	bl	8007d02 <USBD_CtlPrepareRx>
      break;
 8006732:	e072      	b.n	800681a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	7850      	ldrb	r0, [r2, #1]
 8006740:	2200      	movs	r2, #0
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	4798      	blx	r3
      break;
 8006746:	e068      	b.n	800681a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b0b      	cmp	r3, #11
 800674e:	d852      	bhi.n	80067f6 <USBD_CDC_Setup+0x162>
 8006750:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <USBD_CDC_Setup+0xc4>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	08006789 	.word	0x08006789
 800675c:	08006805 	.word	0x08006805
 8006760:	080067f7 	.word	0x080067f7
 8006764:	080067f7 	.word	0x080067f7
 8006768:	080067f7 	.word	0x080067f7
 800676c:	080067f7 	.word	0x080067f7
 8006770:	080067f7 	.word	0x080067f7
 8006774:	080067f7 	.word	0x080067f7
 8006778:	080067f7 	.word	0x080067f7
 800677c:	080067f7 	.word	0x080067f7
 8006780:	080067b3 	.word	0x080067b3
 8006784:	080067dd 	.word	0x080067dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b03      	cmp	r3, #3
 8006792:	d107      	bne.n	80067a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006794:	f107 030a 	add.w	r3, r7, #10
 8006798:	2202      	movs	r2, #2
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 fa84 	bl	8007caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067a2:	e032      	b.n	800680a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fa0e 	bl	8007bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ac:	2303      	movs	r3, #3
 80067ae:	75fb      	strb	r3, [r7, #23]
          break;
 80067b0:	e02b      	b.n	800680a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d107      	bne.n	80067ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067be:	f107 030d 	add.w	r3, r7, #13
 80067c2:	2201      	movs	r2, #1
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fa6f 	bl	8007caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067cc:	e01d      	b.n	800680a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f9f9 	bl	8007bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d6:	2303      	movs	r3, #3
 80067d8:	75fb      	strb	r3, [r7, #23]
          break;
 80067da:	e016      	b.n	800680a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d00f      	beq.n	8006808 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f9ec 	bl	8007bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067f4:	e008      	b.n	8006808 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f9e5 	bl	8007bc8 <USBD_CtlError>
          ret = USBD_FAIL;
 80067fe:	2303      	movs	r3, #3
 8006800:	75fb      	strb	r3, [r7, #23]
          break;
 8006802:	e002      	b.n	800680a <USBD_CDC_Setup+0x176>
          break;
 8006804:	bf00      	nop
 8006806:	e008      	b.n	800681a <USBD_CDC_Setup+0x186>
          break;
 8006808:	bf00      	nop
      }
      break;
 800680a:	e006      	b.n	800681a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 f9da 	bl	8007bc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	75fb      	strb	r3, [r7, #23]
      break;
 8006818:	bf00      	nop
  }

  return (uint8_t)ret;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006842:	2303      	movs	r3, #3
 8006844:	e04f      	b.n	80068e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800684c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3318      	adds	r3, #24
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d029      	beq.n	80068b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	3318      	adds	r3, #24
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	78f9      	ldrb	r1, [r7, #3]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	460b      	mov	r3, r1
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4403      	add	r3, r0
 8006884:	333c      	adds	r3, #60	; 0x3c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	fbb2 f1f3 	udiv	r1, r2, r3
 800688c:	fb03 f301 	mul.w	r3, r3, r1
 8006890:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006892:	2b00      	cmp	r3, #0
 8006894:	d110      	bne.n	80068b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3318      	adds	r3, #24
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068aa:	78f9      	ldrb	r1, [r7, #3]
 80068ac:	2300      	movs	r3, #0
 80068ae:	2200      	movs	r2, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 ff71 	bl	8008798 <USBD_LL_Transmit>
 80068b6:	e015      	b.n	80068e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006900:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800690c:	2303      	movs	r3, #3
 800690e:	e015      	b.n	800693c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 ffaf 	bl	8008878 <USBD_LL_GetRxDataSize>
 800691a:	4602      	mov	r2, r0
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006936:	4611      	mov	r1, r2
 8006938:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006952:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800695a:	2303      	movs	r3, #3
 800695c:	e01b      	b.n	8006996 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <USBD_CDC_EP0_RxReady+0x50>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800696e:	2bff      	cmp	r3, #255	; 0xff
 8006970:	d010      	beq.n	8006994 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006980:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006988:	b292      	uxth	r2, r2
 800698a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	22ff      	movs	r2, #255	; 0xff
 8006990:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2243      	movs	r2, #67	; 0x43
 80069ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	20000094 	.word	0x20000094

080069c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2243      	movs	r2, #67	; 0x43
 80069cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000050 	.word	0x20000050

080069e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2243      	movs	r2, #67	; 0x43
 80069ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80069ee:	4b03      	ldr	r3, [pc, #12]	; (80069fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	200000d8 	.word	0x200000d8

08006a00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a0e:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	2000000c 	.word	0x2000000c

08006a20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e004      	b.n	8006a3e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b087      	sub	sp, #28
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a5c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e008      	b.n	8006a7a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e004      	b.n	8006aac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e01a      	b.n	8006b10 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d114      	bne.n	8006b0e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b02:	2181      	movs	r1, #129	; 0x81
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 fe47 	bl	8008798 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e016      	b.n	8006b64 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7c1b      	ldrb	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fe5c 	bl	8008808 <USBD_LL_PrepareReceive>
 8006b50:	e007      	b.n	8006b62 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fe53 	bl	8008808 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e01f      	b.n	8006bc4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	79fa      	ldrb	r2, [r7, #7]
 8006bb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f001 fc15 	bl	80083e8 <USBD_LL_Init>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e016      	b.n	8006c12 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	f107 020e 	add.w	r2, r7, #14
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fc42 	bl	80084ac <USBD_LL_Start>
 8006c28:	4603      	mov	r3, r0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	78fa      	ldrb	r2, [r7, #3]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ff46 	bl	8007b54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d01a      	beq.n	8006d22 <USBD_LL_SetupStage+0x72>
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d822      	bhi.n	8006d36 <USBD_LL_SetupStage+0x86>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <USBD_LL_SetupStage+0x4a>
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d00a      	beq.n	8006d0e <USBD_LL_SetupStage+0x5e>
 8006cf8:	e01d      	b.n	8006d36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f9ee 	bl	80070e4 <USBD_StdDevReq>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0c:	e020      	b.n	8006d50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa52 	bl	80071c0 <USBD_StdItfReq>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e016      	b.n	8006d50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa91 	bl	8007252 <USBD_StdEPReq>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e00c      	b.n	8006d50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fc57 	bl	80085f8 <USBD_LL_StallEP>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d4e:	bf00      	nop
  }

  return ret;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	460b      	mov	r3, r1
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d138      	bne.n	8006de0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d14a      	bne.n	8006e16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d913      	bls.n	8006db4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	1ad2      	subs	r2, r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bf28      	it	cs
 8006da6:	4613      	movcs	r3, r2
 8006da8:	461a      	mov	r2, r3
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 ffc5 	bl	8007d3c <USBD_CtlContinueRx>
 8006db2:	e030      	b.n	8006e16 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d10b      	bne.n	8006dd8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 ffc0 	bl	8007d5e <USBD_CtlSendStatus>
 8006dde:	e01a      	b.n	8006e16 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d114      	bne.n	8006e16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	7afa      	ldrb	r2, [r7, #11]
 8006e02:	4611      	mov	r1, r2
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	4798      	blx	r3
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	e000      	b.n	8006e18 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d16b      	bne.n	8006f0c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3314      	adds	r3, #20
 8006e38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d156      	bne.n	8006ef2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d914      	bls.n	8006e7a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	1ad2      	subs	r2, r2, r3
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	461a      	mov	r2, r3
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 ff3a 	bl	8007ce0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2100      	movs	r1, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f001 fcc8 	bl	8008808 <USBD_LL_PrepareReceive>
 8006e78:	e03b      	b.n	8006ef2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d11c      	bne.n	8006ec0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d316      	bcc.n	8006ec0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d20f      	bcs.n	8006ec0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 ff1b 	bl	8007ce0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 fca5 	bl	8008808 <USBD_LL_PrepareReceive>
 8006ebe:	e018      	b.n	8006ef2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d10b      	bne.n	8006ee4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee4:	2180      	movs	r1, #128	; 0x80
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f001 fb86 	bl	80085f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 ff49 	bl	8007d84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d122      	bne.n	8006f42 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fe98 	bl	8006c32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f0a:	e01a      	b.n	8006f42 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d114      	bne.n	8006f42 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00e      	beq.n	8006f42 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	7afa      	ldrb	r2, [r7, #11]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	e000      	b.n	8006f44 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e02f      	b.n	8006fe0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00f      	beq.n	8006faa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6852      	ldr	r2, [r2, #4]
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006faa:	2340      	movs	r3, #64	; 0x40
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 faad 	bl	8008510 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2240      	movs	r2, #64	; 0x40
 8006fc2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fc6:	2340      	movs	r3, #64	; 0x40
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fa9f 	bl	8008510 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2240      	movs	r2, #64	; 0x40
 8006fdc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2204      	movs	r2, #4
 8007022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b04      	cmp	r3, #4
 8007046:	d106      	bne.n	8007056 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800704e:	b2da      	uxtb	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007076:	2303      	movs	r3, #3
 8007078:	e012      	b.n	80070a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d10b      	bne.n	800709e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	3301      	adds	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070c6:	8a3b      	ldrh	r3, [r7, #16]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	b21a      	sxth	r2, r3
 80070cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070d6:	89fb      	ldrh	r3, [r7, #14]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d005      	beq.n	800710a <USBD_StdDevReq+0x26>
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d853      	bhi.n	80071aa <USBD_StdDevReq+0xc6>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00b      	beq.n	800711e <USBD_StdDevReq+0x3a>
 8007106:	2b20      	cmp	r3, #32
 8007108:	d14f      	bne.n	80071aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
      break;
 800711c:	e04a      	b.n	80071b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b09      	cmp	r3, #9
 8007124:	d83b      	bhi.n	800719e <USBD_StdDevReq+0xba>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_StdDevReq+0x48>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007181 	.word	0x08007181
 8007130:	08007195 	.word	0x08007195
 8007134:	0800719f 	.word	0x0800719f
 8007138:	0800718b 	.word	0x0800718b
 800713c:	0800719f 	.word	0x0800719f
 8007140:	0800715f 	.word	0x0800715f
 8007144:	08007155 	.word	0x08007155
 8007148:	0800719f 	.word	0x0800719f
 800714c:	08007177 	.word	0x08007177
 8007150:	08007169 	.word	0x08007169
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f9de 	bl	8007518 <USBD_GetDescriptor>
          break;
 800715c:	e024      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fb6d 	bl	8007840 <USBD_SetAddress>
          break;
 8007166:	e01f      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fbac 	bl	80078c8 <USBD_SetConfig>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
          break;
 8007174:	e018      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fc4b 	bl	8007a14 <USBD_GetConfig>
          break;
 800717e:	e013      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fc7c 	bl	8007a80 <USBD_GetStatus>
          break;
 8007188:	e00e      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fcab 	bl	8007ae8 <USBD_SetFeature>
          break;
 8007192:	e009      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fcba 	bl	8007b10 <USBD_ClrFeature>
          break;
 800719c:	e004      	b.n	80071a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd11 	bl	8007bc8 <USBD_CtlError>
          break;
 80071a6:	bf00      	nop
      }
      break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fd0b 	bl	8007bc8 <USBD_CtlError>
      break;
 80071b2:	bf00      	nop
  }

  return ret;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop

080071c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d005      	beq.n	80071e6 <USBD_StdItfReq+0x26>
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d82f      	bhi.n	800723e <USBD_StdItfReq+0x7e>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <USBD_StdItfReq+0x26>
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d12b      	bne.n	800723e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d81d      	bhi.n	8007230 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	889b      	ldrh	r3, [r3, #4]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d813      	bhi.n	8007226 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	4798      	blx	r3
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	88db      	ldrh	r3, [r3, #6]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d110      	bne.n	800723a <USBD_StdItfReq+0x7a>
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10d      	bne.n	800723a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fd9d 	bl	8007d5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007224:	e009      	b.n	800723a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fccd 	bl	8007bc8 <USBD_CtlError>
          break;
 800722e:	e004      	b.n	800723a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fcc8 	bl	8007bc8 <USBD_CtlError>
          break;
 8007238:	e000      	b.n	800723c <USBD_StdItfReq+0x7c>
          break;
 800723a:	bf00      	nop
      }
      break;
 800723c:	e004      	b.n	8007248 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fcc1 	bl	8007bc8 <USBD_CtlError>
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	889b      	ldrh	r3, [r3, #4]
 8007264:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d007      	beq.n	8007282 <USBD_StdEPReq+0x30>
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	f200 8145 	bhi.w	8007502 <USBD_StdEPReq+0x2b0>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <USBD_StdEPReq+0x44>
 800727c:	2b20      	cmp	r3, #32
 800727e:	f040 8140 	bne.w	8007502 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
      break;
 8007294:	e13a      	b.n	800750c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d007      	beq.n	80072ae <USBD_StdEPReq+0x5c>
 800729e:	2b03      	cmp	r3, #3
 80072a0:	f300 8129 	bgt.w	80074f6 <USBD_StdEPReq+0x2a4>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d07f      	beq.n	80073a8 <USBD_StdEPReq+0x156>
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d03c      	beq.n	8007326 <USBD_StdEPReq+0xd4>
 80072ac:	e123      	b.n	80074f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d002      	beq.n	80072c0 <USBD_StdEPReq+0x6e>
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d016      	beq.n	80072ec <USBD_StdEPReq+0x9a>
 80072be:	e02c      	b.n	800731a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <USBD_StdEPReq+0x90>
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	2b80      	cmp	r3, #128	; 0x80
 80072ca:	d00a      	beq.n	80072e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f991 	bl	80085f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072d6:	2180      	movs	r1, #128	; 0x80
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f98d 	bl	80085f8 <USBD_LL_StallEP>
 80072de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072e0:	e020      	b.n	8007324 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fc6f 	bl	8007bc8 <USBD_CtlError>
              break;
 80072ea:	e01b      	b.n	8007324 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	885b      	ldrh	r3, [r3, #2]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10e      	bne.n	8007312 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <USBD_StdEPReq+0xc0>
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b80      	cmp	r3, #128	; 0x80
 80072fe:	d008      	beq.n	8007312 <USBD_StdEPReq+0xc0>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	88db      	ldrh	r3, [r3, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f973 	bl	80085f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fd23 	bl	8007d5e <USBD_CtlSendStatus>

              break;
 8007318:	e004      	b.n	8007324 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fc53 	bl	8007bc8 <USBD_CtlError>
              break;
 8007322:	bf00      	nop
          }
          break;
 8007324:	e0ec      	b.n	8007500 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d002      	beq.n	8007338 <USBD_StdEPReq+0xe6>
 8007332:	2b03      	cmp	r3, #3
 8007334:	d016      	beq.n	8007364 <USBD_StdEPReq+0x112>
 8007336:	e030      	b.n	800739a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <USBD_StdEPReq+0x108>
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b80      	cmp	r3, #128	; 0x80
 8007342:	d00a      	beq.n	800735a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f955 	bl	80085f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800734e:	2180      	movs	r1, #128	; 0x80
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f951 	bl	80085f8 <USBD_LL_StallEP>
 8007356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007358:	e025      	b.n	80073a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fc33 	bl	8007bc8 <USBD_CtlError>
              break;
 8007362:	e020      	b.n	80073a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d11b      	bne.n	80073a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f972 	bl	8008664 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fcec 	bl	8007d5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007398:	e004      	b.n	80073a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc13 	bl	8007bc8 <USBD_CtlError>
              break;
 80073a2:	e000      	b.n	80073a6 <USBD_StdEPReq+0x154>
              break;
 80073a4:	bf00      	nop
          }
          break;
 80073a6:	e0ab      	b.n	8007500 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d002      	beq.n	80073ba <USBD_StdEPReq+0x168>
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d032      	beq.n	800741e <USBD_StdEPReq+0x1cc>
 80073b8:	e097      	b.n	80074ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d007      	beq.n	80073d0 <USBD_StdEPReq+0x17e>
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d004      	beq.n	80073d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fbfd 	bl	8007bc8 <USBD_CtlError>
                break;
 80073ce:	e091      	b.n	80074f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da0b      	bge.n	80073f0 <USBD_StdEPReq+0x19e>
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	3310      	adds	r3, #16
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4413      	add	r3, r2
 80073ec:	3304      	adds	r3, #4
 80073ee:	e00b      	b.n	8007408 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	3304      	adds	r3, #4
 8007408:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2202      	movs	r2, #2
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fc47 	bl	8007caa <USBD_CtlSendData>
              break;
 800741c:	e06a      	b.n	80074f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800741e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da11      	bge.n	800744a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	f003 020f 	and.w	r2, r3, #15
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d117      	bne.n	8007470 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fbc0 	bl	8007bc8 <USBD_CtlError>
                  break;
 8007448:	e054      	b.n	80074f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fbad 	bl	8007bc8 <USBD_CtlError>
                  break;
 800746e:	e041      	b.n	80074f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007474:	2b00      	cmp	r3, #0
 8007476:	da0b      	bge.n	8007490 <USBD_StdEPReq+0x23e>
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	3310      	adds	r3, #16
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	4413      	add	r3, r2
 800748c:	3304      	adds	r3, #4
 800748e:	e00b      	b.n	80074a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <USBD_StdEPReq+0x264>
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b80      	cmp	r3, #128	; 0x80
 80074b4:	d103      	bne.n	80074be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e00e      	b.n	80074dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f904 	bl	80086d0 <USBD_LL_IsStallEP>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e002      	b.n	80074dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2202      	movs	r2, #2
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fbe1 	bl	8007caa <USBD_CtlSendData>
              break;
 80074e8:	e004      	b.n	80074f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fb6b 	bl	8007bc8 <USBD_CtlError>
              break;
 80074f2:	bf00      	nop
          }
          break;
 80074f4:	e004      	b.n	8007500 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb65 	bl	8007bc8 <USBD_CtlError>
          break;
 80074fe:	bf00      	nop
      }
      break;
 8007500:	e004      	b.n	800750c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb5f 	bl	8007bc8 <USBD_CtlError>
      break;
 800750a:	bf00      	nop
  }

  return ret;
 800750c:	7bfb      	ldrb	r3, [r7, #15]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	2b0e      	cmp	r3, #14
 800753a:	f200 8152 	bhi.w	80077e2 <USBD_GetDescriptor+0x2ca>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBD_GetDescriptor+0x2c>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	080075b5 	.word	0x080075b5
 8007548:	080075cd 	.word	0x080075cd
 800754c:	0800760d 	.word	0x0800760d
 8007550:	080077e3 	.word	0x080077e3
 8007554:	080077e3 	.word	0x080077e3
 8007558:	08007783 	.word	0x08007783
 800755c:	080077af 	.word	0x080077af
 8007560:	080077e3 	.word	0x080077e3
 8007564:	080077e3 	.word	0x080077e3
 8007568:	080077e3 	.word	0x080077e3
 800756c:	080077e3 	.word	0x080077e3
 8007570:	080077e3 	.word	0x080077e3
 8007574:	080077e3 	.word	0x080077e3
 8007578:	080077e3 	.word	0x080077e3
 800757c:	08007581 	.word	0x08007581
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075a2:	e126      	b.n	80077f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb0e 	bl	8007bc8 <USBD_CtlError>
        err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
      break;
 80075b2:	e11e      	b.n	80077f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
      break;
 80075ca:	e112      	b.n	80077f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7c1b      	ldrb	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10d      	bne.n	80075f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	f107 0208 	add.w	r2, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	2202      	movs	r2, #2
 80075ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075ee:	e100      	b.n	80077f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	f107 0208 	add.w	r2, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3301      	adds	r3, #1
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
      break;
 800760a:	e0f2      	b.n	80077f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	885b      	ldrh	r3, [r3, #2]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b05      	cmp	r3, #5
 8007614:	f200 80ac 	bhi.w	8007770 <USBD_GetDescriptor+0x258>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <USBD_GetDescriptor+0x108>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007639 	.word	0x08007639
 8007624:	0800766d 	.word	0x0800766d
 8007628:	080076a1 	.word	0x080076a1
 800762c:	080076d5 	.word	0x080076d5
 8007630:	08007709 	.word	0x08007709
 8007634:	0800773d 	.word	0x0800773d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765a:	e091      	b.n	8007780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fab2 	bl	8007bc8 <USBD_CtlError>
            err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
          break;
 800766a:	e089      	b.n	8007780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768e:	e077      	b.n	8007780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa98 	bl	8007bc8 <USBD_CtlError>
            err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
          break;
 800769e:	e06f      	b.n	8007780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	7c12      	ldrb	r2, [r2, #16]
 80076b8:	f107 0108 	add.w	r1, r7, #8
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
 80076c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c2:	e05d      	b.n	8007780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa7e 	bl	8007bc8 <USBD_CtlError>
            err++;
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	3301      	adds	r3, #1
 80076d0:	72fb      	strb	r3, [r7, #11]
          break;
 80076d2:	e055      	b.n	8007780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7c12      	ldrb	r2, [r2, #16]
 80076ec:	f107 0108 	add.w	r1, r7, #8
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076f6:	e043      	b.n	8007780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa64 	bl	8007bc8 <USBD_CtlError>
            err++;
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	3301      	adds	r3, #1
 8007704:	72fb      	strb	r3, [r7, #11]
          break;
 8007706:	e03b      	b.n	8007780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7c12      	ldrb	r2, [r2, #16]
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772a:	e029      	b.n	8007780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa4a 	bl	8007bc8 <USBD_CtlError>
            err++;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	3301      	adds	r3, #1
 8007738:	72fb      	strb	r3, [r7, #11]
          break;
 800773a:	e021      	b.n	8007780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7c12      	ldrb	r2, [r2, #16]
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775e:	e00f      	b.n	8007780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa30 	bl	8007bc8 <USBD_CtlError>
            err++;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	3301      	adds	r3, #1
 800776c:	72fb      	strb	r3, [r7, #11]
          break;
 800776e:	e007      	b.n	8007780 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa28 	bl	8007bc8 <USBD_CtlError>
          err++;
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	3301      	adds	r3, #1
 800777c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800777e:	bf00      	nop
      }
      break;
 8007780:	e037      	b.n	80077f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	7c1b      	ldrb	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007792:	f107 0208 	add.w	r2, r7, #8
 8007796:	4610      	mov	r0, r2
 8007798:	4798      	blx	r3
 800779a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800779c:	e029      	b.n	80077f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa11 	bl	8007bc8 <USBD_CtlError>
        err++;
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	3301      	adds	r3, #1
 80077aa:	72fb      	strb	r3, [r7, #11]
      break;
 80077ac:	e021      	b.n	80077f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c1b      	ldrb	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10d      	bne.n	80077d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	f107 0208 	add.w	r2, r7, #8
 80077c2:	4610      	mov	r0, r2
 80077c4:	4798      	blx	r3
 80077c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	2207      	movs	r2, #7
 80077ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077d0:	e00f      	b.n	80077f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9f7 	bl	8007bc8 <USBD_CtlError>
        err++;
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	3301      	adds	r3, #1
 80077de:	72fb      	strb	r3, [r7, #11]
      break;
 80077e0:	e007      	b.n	80077f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9ef 	bl	8007bc8 <USBD_CtlError>
      err++;
 80077ea:	7afb      	ldrb	r3, [r7, #11]
 80077ec:	3301      	adds	r3, #1
 80077ee:	72fb      	strb	r3, [r7, #11]
      break;
 80077f0:	bf00      	nop
  }

  if (err != 0U)
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11e      	bne.n	8007836 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d016      	beq.n	800782e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007800:	893b      	ldrh	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00e      	beq.n	8007824 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	88da      	ldrh	r2, [r3, #6]
 800780a:	893b      	ldrh	r3, [r7, #8]
 800780c:	4293      	cmp	r3, r2
 800780e:	bf28      	it	cs
 8007810:	4613      	movcs	r3, r2
 8007812:	b29b      	uxth	r3, r3
 8007814:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007816:	893b      	ldrh	r3, [r7, #8]
 8007818:	461a      	mov	r2, r3
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa44 	bl	8007caa <USBD_CtlSendData>
 8007822:	e009      	b.n	8007838 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f9ce 	bl	8007bc8 <USBD_CtlError>
 800782c:	e004      	b.n	8007838 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa95 	bl	8007d5e <USBD_CtlSendStatus>
 8007834:	e000      	b.n	8007838 <USBD_GetDescriptor+0x320>
    return;
 8007836:	bf00      	nop
  }
}
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop

08007840 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	889b      	ldrh	r3, [r3, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d131      	bne.n	80078b6 <USBD_SetAddress+0x76>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88db      	ldrh	r3, [r3, #6]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d12d      	bne.n	80078b6 <USBD_SetAddress+0x76>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	885b      	ldrh	r3, [r3, #2]
 800785e:	2b7f      	cmp	r3, #127	; 0x7f
 8007860:	d829      	bhi.n	80078b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d104      	bne.n	8007884 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f9a3 	bl	8007bc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007882:	e01d      	b.n	80078c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	7bfa      	ldrb	r2, [r7, #15]
 8007888:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 ff4b 	bl	800872c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa61 	bl	8007d5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078aa:	e009      	b.n	80078c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b4:	e004      	b.n	80078c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f985 	bl	8007bc8 <USBD_CtlError>
  }
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	885b      	ldrh	r3, [r3, #2]
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4b4c      	ldr	r3, [pc, #304]	; (8007a10 <USBD_SetConfig+0x148>)
 80078de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078e0:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <USBD_SetConfig+0x148>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d905      	bls.n	80078f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f96c 	bl	8007bc8 <USBD_CtlError>
    return USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e088      	b.n	8007a06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d002      	beq.n	8007906 <USBD_SetConfig+0x3e>
 8007900:	2b03      	cmp	r3, #3
 8007902:	d025      	beq.n	8007950 <USBD_SetConfig+0x88>
 8007904:	e071      	b.n	80079ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007906:	4b42      	ldr	r3, [pc, #264]	; (8007a10 <USBD_SetConfig+0x148>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01c      	beq.n	8007948 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800790e:	4b40      	ldr	r3, [pc, #256]	; (8007a10 <USBD_SetConfig+0x148>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007918:	4b3d      	ldr	r3, [pc, #244]	; (8007a10 <USBD_SetConfig+0x148>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff f992 	bl	8006c48 <USBD_SetClassConfig>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f949 	bl	8007bc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007936:	e065      	b.n	8007a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fa10 	bl	8007d5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2203      	movs	r2, #3
 8007942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007946:	e05d      	b.n	8007a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fa08 	bl	8007d5e <USBD_CtlSendStatus>
      break;
 800794e:	e059      	b.n	8007a04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007950:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <USBD_SetConfig+0x148>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d112      	bne.n	800797e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007960:	4b2b      	ldr	r3, [pc, #172]	; (8007a10 <USBD_SetConfig+0x148>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	461a      	mov	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800796a:	4b29      	ldr	r3, [pc, #164]	; (8007a10 <USBD_SetConfig+0x148>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff f985 	bl	8006c80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f9f1 	bl	8007d5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800797c:	e042      	b.n	8007a04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800797e:	4b24      	ldr	r3, [pc, #144]	; (8007a10 <USBD_SetConfig+0x148>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d02a      	beq.n	80079e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff f973 	bl	8006c80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800799a:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <USBD_SetConfig+0x148>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <USBD_SetConfig+0x148>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff f94c 	bl	8006c48 <USBD_SetClassConfig>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00f      	beq.n	80079da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f903 	bl	8007bc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff f958 	bl	8006c80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079d8:	e014      	b.n	8007a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f9bf 	bl	8007d5e <USBD_CtlSendStatus>
      break;
 80079e0:	e010      	b.n	8007a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9bb 	bl	8007d5e <USBD_CtlSendStatus>
      break;
 80079e8:	e00c      	b.n	8007a04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f8eb 	bl	8007bc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <USBD_SetConfig+0x148>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff f941 	bl	8006c80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	73fb      	strb	r3, [r7, #15]
      break;
 8007a02:	bf00      	nop
  }

  return ret;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000380 	.word	0x20000380

08007a14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d004      	beq.n	8007a30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8cd 	bl	8007bc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a2e:	e023      	b.n	8007a78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	dc02      	bgt.n	8007a42 <USBD_GetConfig+0x2e>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc03      	bgt.n	8007a48 <USBD_GetConfig+0x34>
 8007a40:	e015      	b.n	8007a6e <USBD_GetConfig+0x5a>
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d00b      	beq.n	8007a5e <USBD_GetConfig+0x4a>
 8007a46:	e012      	b.n	8007a6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3308      	adds	r3, #8
 8007a52:	2201      	movs	r2, #1
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f927 	bl	8007caa <USBD_CtlSendData>
        break;
 8007a5c:	e00c      	b.n	8007a78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3304      	adds	r3, #4
 8007a62:	2201      	movs	r2, #1
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f91f 	bl	8007caa <USBD_CtlSendData>
        break;
 8007a6c:	e004      	b.n	8007a78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8a9 	bl	8007bc8 <USBD_CtlError>
        break;
 8007a76:	bf00      	nop
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d81e      	bhi.n	8007ad6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	88db      	ldrh	r3, [r3, #6]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d004      	beq.n	8007aaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f890 	bl	8007bc8 <USBD_CtlError>
        break;
 8007aa8:	e01a      	b.n	8007ae0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f043 0202 	orr.w	r2, r3, #2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	2202      	movs	r2, #2
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8eb 	bl	8007caa <USBD_CtlSendData>
      break;
 8007ad4:	e004      	b.n	8007ae0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f875 	bl	8007bc8 <USBD_CtlError>
      break;
 8007ade:	bf00      	nop
  }
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d106      	bne.n	8007b08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f92b 	bl	8007d5e <USBD_CtlSendStatus>
  }
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d80b      	bhi.n	8007b40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	885b      	ldrh	r3, [r3, #2]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10c      	bne.n	8007b4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f910 	bl	8007d5e <USBD_CtlSendStatus>
      }
      break;
 8007b3e:	e004      	b.n	8007b4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f840 	bl	8007bc8 <USBD_CtlError>
      break;
 8007b48:	e000      	b.n	8007b4c <USBD_ClrFeature+0x3c>
      break;
 8007b4a:	bf00      	nop
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff fa92 	bl	80070a8 <SWAPBYTE>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff fa85 	bl	80070a8 <SWAPBYTE>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fa78 	bl	80070a8 <SWAPBYTE>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	80da      	strh	r2, [r3, #6]
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fd0f 	bl	80085f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bda:	2100      	movs	r1, #0
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd0b 	bl	80085f8 <USBD_LL_StallEP>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d036      	beq.n	8007c6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c04:	6938      	ldr	r0, [r7, #16]
 8007c06:	f000 f836 	bl	8007c76 <USBD_GetLen>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	3301      	adds	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	4413      	add	r3, r2
 8007c30:	2203      	movs	r2, #3
 8007c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	3301      	adds	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c3a:	e013      	b.n	8007c64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	613b      	str	r3, [r7, #16]
    idx++;
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	3301      	adds	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	4413      	add	r3, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	3301      	adds	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e7      	bne.n	8007c3c <USBD_GetString+0x52>
 8007c6c:	e000      	b.n	8007c70 <USBD_GetString+0x86>
    return;
 8007c6e:	bf00      	nop
  }
}
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c86:	e005      	b.n	8007c94 <USBD_GetLen+0x1e>
  {
    len++;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f5      	bne.n	8007c88 <USBD_GetLen+0x12>
  }

  return len;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fd61 	bl	8008798 <USBD_LL_Transmit>

  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 fd50 	bl	8008798 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2203      	movs	r2, #3
 8007d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fd6b 	bl	8008808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fd5a 	bl	8008808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fd0f 	bl	8008798 <USBD_LL_Transmit>

  return USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2205      	movs	r2, #5
 8007d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d94:	2300      	movs	r3, #0
 8007d96:	2200      	movs	r2, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fd34 	bl	8008808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USB_SendData>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USB_SendData(const char *data)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7f8 fa0c 	bl	80001d0 <strlen>
 8007db8:	4603      	mov	r3, r0
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f8c2 	bl	8007f48 <CDC_Transmit_FS>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4912      	ldr	r1, [pc, #72]	; (8007e1c <MX_USB_DEVICE_Init+0x50>)
 8007dd4:	4812      	ldr	r0, [pc, #72]	; (8007e20 <MX_USB_DEVICE_Init+0x54>)
 8007dd6:	f7fe fec9 	bl	8006b6c <USBD_Init>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007de0:	f7f9 f88a 	bl	8000ef8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007de4:	490f      	ldr	r1, [pc, #60]	; (8007e24 <MX_USB_DEVICE_Init+0x58>)
 8007de6:	480e      	ldr	r0, [pc, #56]	; (8007e20 <MX_USB_DEVICE_Init+0x54>)
 8007de8:	f7fe fef0 	bl	8006bcc <USBD_RegisterClass>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007df2:	f7f9 f881 	bl	8000ef8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007df6:	490c      	ldr	r1, [pc, #48]	; (8007e28 <MX_USB_DEVICE_Init+0x5c>)
 8007df8:	4809      	ldr	r0, [pc, #36]	; (8007e20 <MX_USB_DEVICE_Init+0x54>)
 8007dfa:	f7fe fe11 	bl	8006a20 <USBD_CDC_RegisterInterface>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e04:	f7f9 f878 	bl	8000ef8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e08:	4805      	ldr	r0, [pc, #20]	; (8007e20 <MX_USB_DEVICE_Init+0x54>)
 8007e0a:	f7fe ff06 	bl	8006c1a <USBD_Start>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e14:	f7f9 f870 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e18:	bf00      	nop
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000130 	.word	0x20000130
 8007e20:	20000628 	.word	0x20000628
 8007e24:	20000018 	.word	0x20000018
 8007e28:	2000011c 	.word	0x2000011c

08007e2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e30:	2200      	movs	r2, #0
 8007e32:	4905      	ldr	r1, [pc, #20]	; (8007e48 <CDC_Init_FS+0x1c>)
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <CDC_Init_FS+0x20>)
 8007e36:	f7fe fe08 	bl	8006a4a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e3a:	4905      	ldr	r1, [pc, #20]	; (8007e50 <CDC_Init_FS+0x24>)
 8007e3c:	4803      	ldr	r0, [pc, #12]	; (8007e4c <CDC_Init_FS+0x20>)
 8007e3e:	f7fe fe22 	bl	8006a86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20000ce0 	.word	0x20000ce0
 8007e4c:	20000628 	.word	0x20000628
 8007e50:	200008f8 	.word	0x200008f8

08007e54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b23      	cmp	r3, #35	; 0x23
 8007e78:	d84a      	bhi.n	8007f10 <CDC_Control_FS+0xac>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <CDC_Control_FS+0x1c>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007f11 	.word	0x08007f11
 8007e84:	08007f11 	.word	0x08007f11
 8007e88:	08007f11 	.word	0x08007f11
 8007e8c:	08007f11 	.word	0x08007f11
 8007e90:	08007f11 	.word	0x08007f11
 8007e94:	08007f11 	.word	0x08007f11
 8007e98:	08007f11 	.word	0x08007f11
 8007e9c:	08007f11 	.word	0x08007f11
 8007ea0:	08007f11 	.word	0x08007f11
 8007ea4:	08007f11 	.word	0x08007f11
 8007ea8:	08007f11 	.word	0x08007f11
 8007eac:	08007f11 	.word	0x08007f11
 8007eb0:	08007f11 	.word	0x08007f11
 8007eb4:	08007f11 	.word	0x08007f11
 8007eb8:	08007f11 	.word	0x08007f11
 8007ebc:	08007f11 	.word	0x08007f11
 8007ec0:	08007f11 	.word	0x08007f11
 8007ec4:	08007f11 	.word	0x08007f11
 8007ec8:	08007f11 	.word	0x08007f11
 8007ecc:	08007f11 	.word	0x08007f11
 8007ed0:	08007f11 	.word	0x08007f11
 8007ed4:	08007f11 	.word	0x08007f11
 8007ed8:	08007f11 	.word	0x08007f11
 8007edc:	08007f11 	.word	0x08007f11
 8007ee0:	08007f11 	.word	0x08007f11
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	08007f11 	.word	0x08007f11
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f11 	.word	0x08007f11
 8007ef4:	08007f11 	.word	0x08007f11
 8007ef8:	08007f11 	.word	0x08007f11
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f11 	.word	0x08007f11
 8007f04:	08007f11 	.word	0x08007f11
 8007f08:	08007f11 	.word	0x08007f11
 8007f0c:	08007f11 	.word	0x08007f11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f10:	bf00      	nop
  }

  return (USBD_OK);
 8007f12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <CDC_Receive_FS>:
//};

//#define TABLE_SIZE (sizeof(num) / sizeof(num[0]))

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
//		} else {
//			char error_msg[] = "Input tidak valid";
//			CDC_Transmit_FS((uint8_t*) error_msg, strlen(error_msg));
//		}
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4805      	ldr	r0, [pc, #20]	; (8007f44 <CDC_Receive_FS+0x24>)
 8007f2e:	f7fe fdaa 	bl	8006a86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f32:	4804      	ldr	r0, [pc, #16]	; (8007f44 <CDC_Receive_FS+0x24>)
 8007f34:	f7fe fdf0 	bl	8006b18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000628 	.word	0x20000628

08007f48 <CDC_Transmit_FS>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f58:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <CDC_Transmit_FS+0x48>)
 8007f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e00b      	b.n	8007f86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	461a      	mov	r2, r3
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4806      	ldr	r0, [pc, #24]	; (8007f90 <CDC_Transmit_FS+0x48>)
 8007f76:	f7fe fd68 	bl	8006a4a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <CDC_Transmit_FS+0x48>)
 8007f7c:	f7fe fd9c 	bl	8006ab8 <USBD_CDC_TransmitPacket>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000628 	.word	0x20000628

08007f94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2212      	movs	r2, #18
 8007fc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000150 	.word	0x20000150

08007fdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2204      	movs	r2, #4
 8007fec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fee:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	20000170 	.word	0x20000170

08008000 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	6039      	str	r1, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4907      	ldr	r1, [pc, #28]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
 8008016:	4808      	ldr	r0, [pc, #32]	; (8008038 <USBD_FS_ProductStrDescriptor+0x38>)
 8008018:	f7ff fde7 	bl	8007bea <USBD_GetString>
 800801c:	e004      	b.n	8008028 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4904      	ldr	r1, [pc, #16]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
 8008022:	4805      	ldr	r0, [pc, #20]	; (8008038 <USBD_FS_ProductStrDescriptor+0x38>)
 8008024:	f7ff fde1 	bl	8007bea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	200010c8 	.word	0x200010c8
 8008038:	0800b758 	.word	0x0800b758

0800803c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	4904      	ldr	r1, [pc, #16]	; (800805c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800804c:	4804      	ldr	r0, [pc, #16]	; (8008060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800804e:	f7ff fdcc 	bl	8007bea <USBD_GetString>
  return USBD_StrDesc;
 8008052:	4b02      	ldr	r3, [pc, #8]	; (800805c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200010c8 	.word	0x200010c8
 8008060:	0800b770 	.word	0x0800b770

08008064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	221a      	movs	r2, #26
 8008074:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008076:	f000 f855 	bl	8008124 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800807a:	4b02      	ldr	r3, [pc, #8]	; (8008084 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000174 	.word	0x20000174

08008088 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d105      	bne.n	80080a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4907      	ldr	r1, [pc, #28]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800809e:	4808      	ldr	r0, [pc, #32]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080a0:	f7ff fda3 	bl	8007bea <USBD_GetString>
 80080a4:	e004      	b.n	80080b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4904      	ldr	r1, [pc, #16]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080ac:	f7ff fd9d 	bl	8007bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200010c8 	.word	0x200010c8
 80080c0:	0800b784 	.word	0x0800b784

080080c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4907      	ldr	r1, [pc, #28]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080da:	4808      	ldr	r0, [pc, #32]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080dc:	f7ff fd85 	bl	8007bea <USBD_GetString>
 80080e0:	e004      	b.n	80080ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4904      	ldr	r1, [pc, #16]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080e6:	4805      	ldr	r0, [pc, #20]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080e8:	f7ff fd7f 	bl	8007bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80080ec:	4b02      	ldr	r3, [pc, #8]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200010c8 	.word	0x200010c8
 80080fc:	0800b790 	.word	0x0800b790

08008100 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	220c      	movs	r2, #12
 8008110:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008112:	4b03      	ldr	r3, [pc, #12]	; (8008120 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000164 	.word	0x20000164

08008124 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800812a:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <Get_SerialNum+0x44>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008130:	4b0e      	ldr	r3, [pc, #56]	; (800816c <Get_SerialNum+0x48>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008136:	4b0e      	ldr	r3, [pc, #56]	; (8008170 <Get_SerialNum+0x4c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800814a:	2208      	movs	r2, #8
 800814c:	4909      	ldr	r1, [pc, #36]	; (8008174 <Get_SerialNum+0x50>)
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f814 	bl	800817c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008154:	2204      	movs	r2, #4
 8008156:	4908      	ldr	r1, [pc, #32]	; (8008178 <Get_SerialNum+0x54>)
 8008158:	68b8      	ldr	r0, [r7, #8]
 800815a:	f000 f80f 	bl	800817c <IntToUnicode>
  }
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	1fff7590 	.word	0x1fff7590
 800816c:	1fff7594 	.word	0x1fff7594
 8008170:	1fff7598 	.word	0x1fff7598
 8008174:	20000176 	.word	0x20000176
 8008178:	20000186 	.word	0x20000186

0800817c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800818e:	2300      	movs	r3, #0
 8008190:	75fb      	strb	r3, [r7, #23]
 8008192:	e027      	b.n	80081e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	0f1b      	lsrs	r3, r3, #28
 8008198:	2b09      	cmp	r3, #9
 800819a:	d80b      	bhi.n	80081b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	0f1b      	lsrs	r3, r3, #28
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	7dfb      	ldrb	r3, [r7, #23]
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	4619      	mov	r1, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	440b      	add	r3, r1
 80081ac:	3230      	adds	r2, #48	; 0x30
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e00a      	b.n	80081ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	0f1b      	lsrs	r3, r3, #28
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	4619      	mov	r1, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	440b      	add	r3, r1
 80081c4:	3237      	adds	r2, #55	; 0x37
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	3301      	adds	r3, #1
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	4413      	add	r3, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	3301      	adds	r3, #1
 80081e2:	75fb      	strb	r3, [r7, #23]
 80081e4:	7dfa      	ldrb	r2, [r7, #23]
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3d3      	bcc.n	8008194 <IntToUnicode+0x18>
  }
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b09c      	sub	sp, #112	; 0x70
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	2260      	movs	r2, #96	; 0x60
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fbc5 	bl	800899c <memset>
  if(pcdHandle->Instance==USB)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1d      	ldr	r2, [pc, #116]	; (800828c <HAL_PCD_MspInit+0x90>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d132      	bne.n	8008282 <HAL_PCD_MspInit+0x86>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800821c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008220:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008222:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008226:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800822c:	2301      	movs	r3, #1
 800822e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008230:	2318      	movs	r3, #24
 8008232:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008234:	2307      	movs	r3, #7
 8008236:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008238:	2302      	movs	r3, #2
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800823c:	2302      	movs	r3, #2
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008244:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008246:	f107 0310 	add.w	r3, r7, #16
 800824a:	4618      	mov	r0, r3
 800824c:	f7fb fd5c 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 8008256:	f7f8 fe4f 	bl	8000ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <HAL_PCD_MspInit+0x94>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825e:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <HAL_PCD_MspInit+0x94>)
 8008260:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008264:	6593      	str	r3, [r2, #88]	; 0x58
 8008266:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <HAL_PCD_MspInit+0x94>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008272:	2200      	movs	r2, #0
 8008274:	2100      	movs	r1, #0
 8008276:	2043      	movs	r0, #67	; 0x43
 8008278:	f7f9 f911 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800827c:	2043      	movs	r0, #67	; 0x43
 800827e:	f7f9 f92a 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008282:	bf00      	nop
 8008284:	3770      	adds	r7, #112	; 0x70
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40006800 	.word	0x40006800
 8008290:	40021000 	.word	0x40021000

08008294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fe fd00 	bl	8006cb0 <USBD_LL_SetupStage>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	440b      	add	r3, r1
 80082d8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f7fe fd3a 	bl	8006d5a <USBD_LL_DataOutStage>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8008300:	78fa      	ldrb	r2, [r7, #3]
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	440b      	add	r3, r1
 800830e:	3340      	adds	r3, #64	; 0x40
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	4619      	mov	r1, r3
 8008316:	f7fe fd83 	bl	8006e20 <USBD_LL_DataInStage>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fe97 	bl	8007064 <USBD_LL_SOF>
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b02      	cmp	r3, #2
 8008350:	d001      	beq.n	8008356 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008352:	f7f8 fdd1 	bl	8000ef8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800835c:	7bfa      	ldrb	r2, [r7, #15]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7fe fe41 	bl	8006fe8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800836c:	4618      	mov	r0, r3
 800836e:	f7fe fded 	bl	8006f4c <USBD_LL_Reset>
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fe3c 	bl	8007008 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d005      	beq.n	80083a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <HAL_PCD_SuspendCallback+0x30>)
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	4a03      	ldr	r2, [pc, #12]	; (80083ac <HAL_PCD_SuspendCallback+0x30>)
 800839e:	f043 0306 	orr.w	r3, r3, #6
 80083a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	e000ed00 	.word	0xe000ed00

080083b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d007      	beq.n	80083d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <HAL_PCD_ResumeCallback+0x34>)
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	4a07      	ldr	r2, [pc, #28]	; (80083e4 <HAL_PCD_ResumeCallback+0x34>)
 80083c6:	f023 0306 	bic.w	r3, r3, #6
 80083ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80083cc:	f000 fab6 	bl	800893c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fe2c 	bl	8007034 <USBD_LL_Resume>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	e000ed00 	.word	0xe000ed00

080083e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80083f0:	f7fa fe7c 	bl	80030ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80083f4:	4a2b      	ldr	r2, [pc, #172]	; (80084a4 <USBD_LL_Init+0xbc>)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008400:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008404:	4b27      	ldr	r3, [pc, #156]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008406:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <USBD_LL_Init+0xc0>)
 8008408:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800840a:	4b26      	ldr	r3, [pc, #152]	; (80084a4 <USBD_LL_Init+0xbc>)
 800840c:	2208      	movs	r2, #8
 800840e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008410:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008412:	2202      	movs	r2, #2
 8008414:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008416:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008418:	2202      	movs	r2, #2
 800841a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800841c:	4b21      	ldr	r3, [pc, #132]	; (80084a4 <USBD_LL_Init+0xbc>)
 800841e:	2200      	movs	r2, #0
 8008420:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008422:	4b20      	ldr	r3, [pc, #128]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008424:	2200      	movs	r2, #0
 8008426:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008428:	4b1e      	ldr	r3, [pc, #120]	; (80084a4 <USBD_LL_Init+0xbc>)
 800842a:	2200      	movs	r2, #0
 800842c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800842e:	4b1d      	ldr	r3, [pc, #116]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008430:	2200      	movs	r2, #0
 8008432:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008434:	481b      	ldr	r0, [pc, #108]	; (80084a4 <USBD_LL_Init+0xbc>)
 8008436:	f7f9 f868 	bl	800150a <HAL_PCD_Init>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008440:	f7f8 fd5a 	bl	8000ef8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800844a:	2318      	movs	r3, #24
 800844c:	2200      	movs	r2, #0
 800844e:	2100      	movs	r1, #0
 8008450:	f7fa fd78 	bl	8002f44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800845a:	2358      	movs	r3, #88	; 0x58
 800845c:	2200      	movs	r2, #0
 800845e:	2180      	movs	r1, #128	; 0x80
 8008460:	f7fa fd70 	bl	8002f44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800846a:	23c0      	movs	r3, #192	; 0xc0
 800846c:	2200      	movs	r2, #0
 800846e:	2181      	movs	r1, #129	; 0x81
 8008470:	f7fa fd68 	bl	8002f44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800847a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800847e:	2200      	movs	r2, #0
 8008480:	2101      	movs	r1, #1
 8008482:	f7fa fd5f 	bl	8002f44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800848c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008490:	2200      	movs	r2, #0
 8008492:	2182      	movs	r1, #130	; 0x82
 8008494:	f7fa fd56 	bl	8002f44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	200012c8 	.word	0x200012c8
 80084a8:	40006800 	.word	0x40006800

080084ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7f9 f938 	bl	8001738 <HAL_PCD_Start>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d816      	bhi.n	8008500 <USBD_LL_Start+0x54>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <USBD_LL_Start+0x2c>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084e9 	.word	0x080084e9
 80084dc:	080084ef 	.word	0x080084ef
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	080084fb 	.word	0x080084fb
    case HAL_OK :
      usb_status = USBD_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
    break;
 80084ec:	e00b      	b.n	8008506 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	73fb      	strb	r3, [r7, #15]
    break;
 80084f2:	e008      	b.n	8008506 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
    break;
 80084f8:	e005      	b.n	8008506 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084fa:	2303      	movs	r3, #3
 80084fc:	73fb      	strb	r3, [r7, #15]
    break;
 80084fe:	e002      	b.n	8008506 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008500:	2303      	movs	r3, #3
 8008502:	73fb      	strb	r3, [r7, #15]
    break;
 8008504:	bf00      	nop
  }
  return usb_status;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	461a      	mov	r2, r3
 800851e:	4603      	mov	r3, r0
 8008520:	70fb      	strb	r3, [r7, #3]
 8008522:	460b      	mov	r3, r1
 8008524:	70bb      	strb	r3, [r7, #2]
 8008526:	4613      	mov	r3, r2
 8008528:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008538:	78bb      	ldrb	r3, [r7, #2]
 800853a:	883a      	ldrh	r2, [r7, #0]
 800853c:	78f9      	ldrb	r1, [r7, #3]
 800853e:	f7f9 fa69 	bl	8001a14 <HAL_PCD_EP_Open>
 8008542:	4603      	mov	r3, r0
 8008544:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b03      	cmp	r3, #3
 800854a:	d817      	bhi.n	800857c <USBD_LL_OpenEP+0x6c>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <USBD_LL_OpenEP+0x44>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008565 	.word	0x08008565
 8008558:	0800856b 	.word	0x0800856b
 800855c:	08008571 	.word	0x08008571
 8008560:	08008577 	.word	0x08008577
    case HAL_OK :
      usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e00b      	b.n	8008582 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800856a:	2303      	movs	r3, #3
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e008      	b.n	8008582 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	e005      	b.n	8008582 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008576:	2303      	movs	r3, #3
 8008578:	73fb      	strb	r3, [r7, #15]
    break;
 800857a:	e002      	b.n	8008582 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	73fb      	strb	r3, [r7, #15]
    break;
 8008580:	bf00      	nop
  }
  return usb_status;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f9 fa9a 	bl	8001ae4 <HAL_PCD_EP_Close>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d816      	bhi.n	80085e8 <USBD_LL_CloseEP+0x5c>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBD_LL_CloseEP+0x34>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085d1 	.word	0x080085d1
 80085c4:	080085d7 	.word	0x080085d7
 80085c8:	080085dd 	.word	0x080085dd
 80085cc:	080085e3 	.word	0x080085e3
    case HAL_OK :
      usb_status = USBD_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
    break;
 80085d4:	e00b      	b.n	80085ee <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085d6:	2303      	movs	r3, #3
 80085d8:	73fb      	strb	r3, [r7, #15]
    break;
 80085da:	e008      	b.n	80085ee <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
    break;
 80085e0:	e005      	b.n	80085ee <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	73fb      	strb	r3, [r7, #15]
    break;
 80085e6:	e002      	b.n	80085ee <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	73fb      	strb	r3, [r7, #15]
    break;
 80085ec:	bf00      	nop
  }
  return usb_status;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 fb48 	bl	8001cac <HAL_PCD_EP_SetStall>
 800861c:	4603      	mov	r3, r0
 800861e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b03      	cmp	r3, #3
 8008624:	d816      	bhi.n	8008654 <USBD_LL_StallEP+0x5c>
 8008626:	a201      	add	r2, pc, #4	; (adr r2, 800862c <USBD_LL_StallEP+0x34>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	0800863d 	.word	0x0800863d
 8008630:	08008643 	.word	0x08008643
 8008634:	08008649 	.word	0x08008649
 8008638:	0800864f 	.word	0x0800864f
    case HAL_OK :
      usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
    break;
 8008640:	e00b      	b.n	800865a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	73fb      	strb	r3, [r7, #15]
    break;
 8008646:	e008      	b.n	800865a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	e005      	b.n	800865a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800864e:	2303      	movs	r3, #3
 8008650:	73fb      	strb	r3, [r7, #15]
    break;
 8008652:	e002      	b.n	800865a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008654:	2303      	movs	r3, #3
 8008656:	73fb      	strb	r3, [r7, #15]
    break;
 8008658:	bf00      	nop
  }
  return usb_status;
 800865a:	7bfb      	ldrb	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 fb74 	bl	8001d70 <HAL_PCD_EP_ClrStall>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b03      	cmp	r3, #3
 8008690:	d816      	bhi.n	80086c0 <USBD_LL_ClearStallEP+0x5c>
 8008692:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <USBD_LL_ClearStallEP+0x34>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086a9 	.word	0x080086a9
 800869c:	080086af 	.word	0x080086af
 80086a0:	080086b5 	.word	0x080086b5
 80086a4:	080086bb 	.word	0x080086bb
    case HAL_OK :
      usb_status = USBD_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e00b      	b.n	80086c6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
    break;
 80086b2:	e008      	b.n	80086c6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	e005      	b.n	80086c6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ba:	2303      	movs	r3, #3
 80086bc:	73fb      	strb	r3, [r7, #15]
    break;
 80086be:	e002      	b.n	80086c6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	73fb      	strb	r3, [r7, #15]
    break;
 80086c4:	bf00      	nop
  }
  return usb_status;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0c      	bge.n	8008706 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	440b      	add	r3, r1
 8008700:	3306      	adds	r3, #6
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	e00b      	b.n	800871e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800870c:	68f9      	ldr	r1, [r7, #12]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	440b      	add	r3, r1
 8008718:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800871c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800871e:	4618      	mov	r0, r3
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
	...

0800872c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f7f9 f93d 	bl	80019ca <HAL_PCD_SetAddress>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d816      	bhi.n	8008788 <USBD_LL_SetUSBAddress+0x5c>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <USBD_LL_SetUSBAddress+0x34>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008771 	.word	0x08008771
 8008764:	08008777 	.word	0x08008777
 8008768:	0800877d 	.word	0x0800877d
 800876c:	08008783 	.word	0x08008783
    case HAL_OK :
      usb_status = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
    break;
 8008774:	e00b      	b.n	800878e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008776:	2303      	movs	r3, #3
 8008778:	73fb      	strb	r3, [r7, #15]
    break;
 800877a:	e008      	b.n	800878e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
    break;
 8008780:	e005      	b.n	800878e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008782:	2303      	movs	r3, #3
 8008784:	73fb      	strb	r3, [r7, #15]
    break;
 8008786:	e002      	b.n	800878e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008788:	2303      	movs	r3, #3
 800878a:	73fb      	strb	r3, [r7, #15]
    break;
 800878c:	bf00      	nop
  }
  return usb_status;
 800878e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	460b      	mov	r3, r1
 80087a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087b6:	7af9      	ldrb	r1, [r7, #11]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	f7f9 fa32 	bl	8001c24 <HAL_PCD_EP_Transmit>
 80087c0:	4603      	mov	r3, r0
 80087c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d816      	bhi.n	80087f8 <USBD_LL_Transmit+0x60>
 80087ca:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <USBD_LL_Transmit+0x38>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087e7 	.word	0x080087e7
 80087d8:	080087ed 	.word	0x080087ed
 80087dc:	080087f3 	.word	0x080087f3
    case HAL_OK :
      usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]
    break;
 80087e4:	e00b      	b.n	80087fe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087e6:	2303      	movs	r3, #3
 80087e8:	75fb      	strb	r3, [r7, #23]
    break;
 80087ea:	e008      	b.n	80087fe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
    break;
 80087f0:	e005      	b.n	80087fe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087f2:	2303      	movs	r3, #3
 80087f4:	75fb      	strb	r3, [r7, #23]
    break;
 80087f6:	e002      	b.n	80087fe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
    break;
 80087fc:	bf00      	nop
  }
  return usb_status;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	460b      	mov	r3, r1
 8008816:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008826:	7af9      	ldrb	r1, [r7, #11]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	f7f9 f9a4 	bl	8001b78 <HAL_PCD_EP_Receive>
 8008830:	4603      	mov	r3, r0
 8008832:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008834:	7dbb      	ldrb	r3, [r7, #22]
 8008836:	2b03      	cmp	r3, #3
 8008838:	d816      	bhi.n	8008868 <USBD_LL_PrepareReceive+0x60>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <USBD_LL_PrepareReceive+0x38>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008851 	.word	0x08008851
 8008844:	08008857 	.word	0x08008857
 8008848:	0800885d 	.word	0x0800885d
 800884c:	08008863 	.word	0x08008863
    case HAL_OK :
      usb_status = USBD_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	75fb      	strb	r3, [r7, #23]
    break;
 8008854:	e00b      	b.n	800886e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008856:	2303      	movs	r3, #3
 8008858:	75fb      	strb	r3, [r7, #23]
    break;
 800885a:	e008      	b.n	800886e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]
    break;
 8008860:	e005      	b.n	800886e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008862:	2303      	movs	r3, #3
 8008864:	75fb      	strb	r3, [r7, #23]
    break;
 8008866:	e002      	b.n	800886e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008868:	2303      	movs	r3, #3
 800886a:	75fb      	strb	r3, [r7, #23]
    break;
 800886c:	bf00      	nop
  }
  return usb_status;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f7f9 f9b0 	bl	8001bf4 <HAL_PCD_EP_GetRxCount>
 8008894:	4603      	mov	r3, r0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <HAL_PCDEx_LPM_Callback+0x18>
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d013      	beq.n	80088de <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80088b6:	e023      	b.n	8008900 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80088c0:	f000 f83c 	bl	800893c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088c4:	4b10      	ldr	r3, [pc, #64]	; (8008908 <HAL_PCDEx_LPM_Callback+0x68>)
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	4a0f      	ldr	r2, [pc, #60]	; (8008908 <HAL_PCDEx_LPM_Callback+0x68>)
 80088ca:	f023 0306 	bic.w	r3, r3, #6
 80088ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fbac 	bl	8007034 <USBD_LL_Resume>
    break;
 80088dc:	e010      	b.n	8008900 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fb8f 	bl	8007008 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <HAL_PCDEx_LPM_Callback+0x68>)
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <HAL_PCDEx_LPM_Callback+0x68>)
 80088f8:	f043 0306 	orr.w	r3, r3, #6
 80088fc:	6113      	str	r3, [r2, #16]
    break;
 80088fe:	bf00      	nop
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed00 	.word	0xe000ed00

0800890c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008914:	4b03      	ldr	r3, [pc, #12]	; (8008924 <USBD_static_malloc+0x18>)
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000384 	.word	0x20000384

08008928 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]

}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008940:	f7f8 fa88 	bl	8000e54 <SystemClock_Config>
}
 8008944:	bf00      	nop
 8008946:	bd80      	pop	{r7, pc}

08008948 <__errno>:
 8008948:	4b01      	ldr	r3, [pc, #4]	; (8008950 <__errno+0x8>)
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20000190 	.word	0x20000190

08008954 <__libc_init_array>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4d0d      	ldr	r5, [pc, #52]	; (800898c <__libc_init_array+0x38>)
 8008958:	4c0d      	ldr	r4, [pc, #52]	; (8008990 <__libc_init_array+0x3c>)
 800895a:	1b64      	subs	r4, r4, r5
 800895c:	10a4      	asrs	r4, r4, #2
 800895e:	2600      	movs	r6, #0
 8008960:	42a6      	cmp	r6, r4
 8008962:	d109      	bne.n	8008978 <__libc_init_array+0x24>
 8008964:	4d0b      	ldr	r5, [pc, #44]	; (8008994 <__libc_init_array+0x40>)
 8008966:	4c0c      	ldr	r4, [pc, #48]	; (8008998 <__libc_init_array+0x44>)
 8008968:	f002 fec8 	bl	800b6fc <_init>
 800896c:	1b64      	subs	r4, r4, r5
 800896e:	10a4      	asrs	r4, r4, #2
 8008970:	2600      	movs	r6, #0
 8008972:	42a6      	cmp	r6, r4
 8008974:	d105      	bne.n	8008982 <__libc_init_array+0x2e>
 8008976:	bd70      	pop	{r4, r5, r6, pc}
 8008978:	f855 3b04 	ldr.w	r3, [r5], #4
 800897c:	4798      	blx	r3
 800897e:	3601      	adds	r6, #1
 8008980:	e7ee      	b.n	8008960 <__libc_init_array+0xc>
 8008982:	f855 3b04 	ldr.w	r3, [r5], #4
 8008986:	4798      	blx	r3
 8008988:	3601      	adds	r6, #1
 800898a:	e7f2      	b.n	8008972 <__libc_init_array+0x1e>
 800898c:	0800bbc4 	.word	0x0800bbc4
 8008990:	0800bbc4 	.word	0x0800bbc4
 8008994:	0800bbc4 	.word	0x0800bbc4
 8008998:	0800bbc8 	.word	0x0800bbc8

0800899c <memset>:
 800899c:	4402      	add	r2, r0
 800899e:	4603      	mov	r3, r0
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d100      	bne.n	80089a6 <memset+0xa>
 80089a4:	4770      	bx	lr
 80089a6:	f803 1b01 	strb.w	r1, [r3], #1
 80089aa:	e7f9      	b.n	80089a0 <memset+0x4>

080089ac <__cvt>:
 80089ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	ec55 4b10 	vmov	r4, r5, d0
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	460e      	mov	r6, r1
 80089b8:	4619      	mov	r1, r3
 80089ba:	462b      	mov	r3, r5
 80089bc:	bfbb      	ittet	lt
 80089be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089c2:	461d      	movlt	r5, r3
 80089c4:	2300      	movge	r3, #0
 80089c6:	232d      	movlt	r3, #45	; 0x2d
 80089c8:	700b      	strb	r3, [r1, #0]
 80089ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089d0:	4691      	mov	r9, r2
 80089d2:	f023 0820 	bic.w	r8, r3, #32
 80089d6:	bfbc      	itt	lt
 80089d8:	4622      	movlt	r2, r4
 80089da:	4614      	movlt	r4, r2
 80089dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089e0:	d005      	beq.n	80089ee <__cvt+0x42>
 80089e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089e6:	d100      	bne.n	80089ea <__cvt+0x3e>
 80089e8:	3601      	adds	r6, #1
 80089ea:	2102      	movs	r1, #2
 80089ec:	e000      	b.n	80089f0 <__cvt+0x44>
 80089ee:	2103      	movs	r1, #3
 80089f0:	ab03      	add	r3, sp, #12
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	ab02      	add	r3, sp, #8
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	ec45 4b10 	vmov	d0, r4, r5
 80089fc:	4653      	mov	r3, sl
 80089fe:	4632      	mov	r2, r6
 8008a00:	f000 fcfe 	bl	8009400 <_dtoa_r>
 8008a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a08:	4607      	mov	r7, r0
 8008a0a:	d102      	bne.n	8008a12 <__cvt+0x66>
 8008a0c:	f019 0f01 	tst.w	r9, #1
 8008a10:	d022      	beq.n	8008a58 <__cvt+0xac>
 8008a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a16:	eb07 0906 	add.w	r9, r7, r6
 8008a1a:	d110      	bne.n	8008a3e <__cvt+0x92>
 8008a1c:	783b      	ldrb	r3, [r7, #0]
 8008a1e:	2b30      	cmp	r3, #48	; 0x30
 8008a20:	d10a      	bne.n	8008a38 <__cvt+0x8c>
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	4620      	mov	r0, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f8 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2e:	b918      	cbnz	r0, 8008a38 <__cvt+0x8c>
 8008a30:	f1c6 0601 	rsb	r6, r6, #1
 8008a34:	f8ca 6000 	str.w	r6, [sl]
 8008a38:	f8da 3000 	ldr.w	r3, [sl]
 8008a3c:	4499      	add	r9, r3
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f8 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4a:	b108      	cbz	r0, 8008a50 <__cvt+0xa4>
 8008a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a50:	2230      	movs	r2, #48	; 0x30
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	454b      	cmp	r3, r9
 8008a56:	d307      	bcc.n	8008a68 <__cvt+0xbc>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a5c:	1bdb      	subs	r3, r3, r7
 8008a5e:	4638      	mov	r0, r7
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	b004      	add	sp, #16
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	1c59      	adds	r1, r3, #1
 8008a6a:	9103      	str	r1, [sp, #12]
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e7f0      	b.n	8008a52 <__cvt+0xa6>

08008a70 <__exponent>:
 8008a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a72:	4603      	mov	r3, r0
 8008a74:	2900      	cmp	r1, #0
 8008a76:	bfb8      	it	lt
 8008a78:	4249      	neglt	r1, r1
 8008a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8008a7e:	bfb4      	ite	lt
 8008a80:	222d      	movlt	r2, #45	; 0x2d
 8008a82:	222b      	movge	r2, #43	; 0x2b
 8008a84:	2909      	cmp	r1, #9
 8008a86:	7042      	strb	r2, [r0, #1]
 8008a88:	dd2a      	ble.n	8008ae0 <__exponent+0x70>
 8008a8a:	f10d 0407 	add.w	r4, sp, #7
 8008a8e:	46a4      	mov	ip, r4
 8008a90:	270a      	movs	r7, #10
 8008a92:	46a6      	mov	lr, r4
 8008a94:	460a      	mov	r2, r1
 8008a96:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a9a:	fb07 1516 	mls	r5, r7, r6, r1
 8008a9e:	3530      	adds	r5, #48	; 0x30
 8008aa0:	2a63      	cmp	r2, #99	; 0x63
 8008aa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008aa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008aaa:	4631      	mov	r1, r6
 8008aac:	dcf1      	bgt.n	8008a92 <__exponent+0x22>
 8008aae:	3130      	adds	r1, #48	; 0x30
 8008ab0:	f1ae 0502 	sub.w	r5, lr, #2
 8008ab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ab8:	1c44      	adds	r4, r0, #1
 8008aba:	4629      	mov	r1, r5
 8008abc:	4561      	cmp	r1, ip
 8008abe:	d30a      	bcc.n	8008ad6 <__exponent+0x66>
 8008ac0:	f10d 0209 	add.w	r2, sp, #9
 8008ac4:	eba2 020e 	sub.w	r2, r2, lr
 8008ac8:	4565      	cmp	r5, ip
 8008aca:	bf88      	it	hi
 8008acc:	2200      	movhi	r2, #0
 8008ace:	4413      	add	r3, r2
 8008ad0:	1a18      	subs	r0, r3, r0
 8008ad2:	b003      	add	sp, #12
 8008ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ada:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ade:	e7ed      	b.n	8008abc <__exponent+0x4c>
 8008ae0:	2330      	movs	r3, #48	; 0x30
 8008ae2:	3130      	adds	r1, #48	; 0x30
 8008ae4:	7083      	strb	r3, [r0, #2]
 8008ae6:	70c1      	strb	r1, [r0, #3]
 8008ae8:	1d03      	adds	r3, r0, #4
 8008aea:	e7f1      	b.n	8008ad0 <__exponent+0x60>

08008aec <_printf_float>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	ed2d 8b02 	vpush	{d8}
 8008af4:	b08d      	sub	sp, #52	; 0x34
 8008af6:	460c      	mov	r4, r1
 8008af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008afc:	4616      	mov	r6, r2
 8008afe:	461f      	mov	r7, r3
 8008b00:	4605      	mov	r5, r0
 8008b02:	f001 fa69 	bl	8009fd8 <_localeconv_r>
 8008b06:	f8d0 a000 	ldr.w	sl, [r0]
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f7f7 fb60 	bl	80001d0 <strlen>
 8008b10:	2300      	movs	r3, #0
 8008b12:	930a      	str	r3, [sp, #40]	; 0x28
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	9305      	str	r3, [sp, #20]
 8008b18:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b20:	3307      	adds	r3, #7
 8008b22:	f023 0307 	bic.w	r3, r3, #7
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	f8c8 2000 	str.w	r2, [r8]
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b44:	ee08 0a10 	vmov	s16, r0
 8008b48:	4b9f      	ldr	r3, [pc, #636]	; (8008dc8 <_printf_float+0x2dc>)
 8008b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b52:	f7f7 ffeb 	bl	8000b2c <__aeabi_dcmpun>
 8008b56:	bb88      	cbnz	r0, 8008bbc <_printf_float+0xd0>
 8008b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b5c:	4b9a      	ldr	r3, [pc, #616]	; (8008dc8 <_printf_float+0x2dc>)
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b62:	f7f7 ffc5 	bl	8000af0 <__aeabi_dcmple>
 8008b66:	bb48      	cbnz	r0, 8008bbc <_printf_float+0xd0>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8008b74:	b110      	cbz	r0, 8008b7c <_printf_float+0x90>
 8008b76:	232d      	movs	r3, #45	; 0x2d
 8008b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b7c:	4b93      	ldr	r3, [pc, #588]	; (8008dcc <_printf_float+0x2e0>)
 8008b7e:	4894      	ldr	r0, [pc, #592]	; (8008dd0 <_printf_float+0x2e4>)
 8008b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b84:	bf94      	ite	ls
 8008b86:	4698      	movls	r8, r3
 8008b88:	4680      	movhi	r8, r0
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	9b05      	ldr	r3, [sp, #20]
 8008b90:	f023 0204 	bic.w	r2, r3, #4
 8008b94:	6022      	str	r2, [r4, #0]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	9700      	str	r7, [sp, #0]
 8008b9c:	4633      	mov	r3, r6
 8008b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 f9d8 	bl	8008f58 <_printf_common>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f040 8090 	bne.w	8008cce <_printf_float+0x1e2>
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	b00d      	add	sp, #52	; 0x34
 8008bb4:	ecbd 8b02 	vpop	{d8}
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	4642      	mov	r2, r8
 8008bbe:	464b      	mov	r3, r9
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8008bc8:	b140      	cbz	r0, 8008bdc <_printf_float+0xf0>
 8008bca:	464b      	mov	r3, r9
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfbc      	itt	lt
 8008bd0:	232d      	movlt	r3, #45	; 0x2d
 8008bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bd6:	487f      	ldr	r0, [pc, #508]	; (8008dd4 <_printf_float+0x2e8>)
 8008bd8:	4b7f      	ldr	r3, [pc, #508]	; (8008dd8 <_printf_float+0x2ec>)
 8008bda:	e7d1      	b.n	8008b80 <_printf_float+0x94>
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008be2:	9206      	str	r2, [sp, #24]
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	d13f      	bne.n	8008c68 <_printf_float+0x17c>
 8008be8:	2306      	movs	r3, #6
 8008bea:	6063      	str	r3, [r4, #4]
 8008bec:	9b05      	ldr	r3, [sp, #20]
 8008bee:	6861      	ldr	r1, [r4, #4]
 8008bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9303      	str	r3, [sp, #12]
 8008bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8008bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008bfe:	ab09      	add	r3, sp, #36	; 0x24
 8008c00:	ec49 8b10 	vmov	d0, r8, r9
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f7ff fecd 	bl	80089ac <__cvt>
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c16:	2b47      	cmp	r3, #71	; 0x47
 8008c18:	4680      	mov	r8, r0
 8008c1a:	d108      	bne.n	8008c2e <_printf_float+0x142>
 8008c1c:	1cc8      	adds	r0, r1, #3
 8008c1e:	db02      	blt.n	8008c26 <_printf_float+0x13a>
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	4299      	cmp	r1, r3
 8008c24:	dd41      	ble.n	8008caa <_printf_float+0x1be>
 8008c26:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8008c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c32:	d820      	bhi.n	8008c76 <_printf_float+0x18a>
 8008c34:	3901      	subs	r1, #1
 8008c36:	465a      	mov	r2, fp
 8008c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c3e:	f7ff ff17 	bl	8008a70 <__exponent>
 8008c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c44:	1813      	adds	r3, r2, r0
 8008c46:	2a01      	cmp	r2, #1
 8008c48:	4681      	mov	r9, r0
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	dc02      	bgt.n	8008c54 <_printf_float+0x168>
 8008c4e:	6822      	ldr	r2, [r4, #0]
 8008c50:	07d2      	lsls	r2, r2, #31
 8008c52:	d501      	bpl.n	8008c58 <_printf_float+0x16c>
 8008c54:	3301      	adds	r3, #1
 8008c56:	6123      	str	r3, [r4, #16]
 8008c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d09c      	beq.n	8008b9a <_printf_float+0xae>
 8008c60:	232d      	movs	r3, #45	; 0x2d
 8008c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c66:	e798      	b.n	8008b9a <_printf_float+0xae>
 8008c68:	9a06      	ldr	r2, [sp, #24]
 8008c6a:	2a47      	cmp	r2, #71	; 0x47
 8008c6c:	d1be      	bne.n	8008bec <_printf_float+0x100>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1bc      	bne.n	8008bec <_printf_float+0x100>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e7b9      	b.n	8008bea <_printf_float+0xfe>
 8008c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c7a:	d118      	bne.n	8008cae <_printf_float+0x1c2>
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	dd0b      	ble.n	8008c9a <_printf_float+0x1ae>
 8008c82:	6121      	str	r1, [r4, #16]
 8008c84:	b913      	cbnz	r3, 8008c8c <_printf_float+0x1a0>
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	07d0      	lsls	r0, r2, #31
 8008c8a:	d502      	bpl.n	8008c92 <_printf_float+0x1a6>
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	440b      	add	r3, r1
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c94:	f04f 0900 	mov.w	r9, #0
 8008c98:	e7de      	b.n	8008c58 <_printf_float+0x16c>
 8008c9a:	b913      	cbnz	r3, 8008ca2 <_printf_float+0x1b6>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	07d2      	lsls	r2, r2, #31
 8008ca0:	d501      	bpl.n	8008ca6 <_printf_float+0x1ba>
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	e7f4      	b.n	8008c90 <_printf_float+0x1a4>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7f2      	b.n	8008c90 <_printf_float+0x1a4>
 8008caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	db05      	blt.n	8008cc0 <_printf_float+0x1d4>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	6121      	str	r1, [r4, #16]
 8008cb8:	07d8      	lsls	r0, r3, #31
 8008cba:	d5ea      	bpl.n	8008c92 <_printf_float+0x1a6>
 8008cbc:	1c4b      	adds	r3, r1, #1
 8008cbe:	e7e7      	b.n	8008c90 <_printf_float+0x1a4>
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	bfd4      	ite	le
 8008cc4:	f1c1 0202 	rsble	r2, r1, #2
 8008cc8:	2201      	movgt	r2, #1
 8008cca:	4413      	add	r3, r2
 8008ccc:	e7e0      	b.n	8008c90 <_printf_float+0x1a4>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	055a      	lsls	r2, r3, #21
 8008cd2:	d407      	bmi.n	8008ce4 <_printf_float+0x1f8>
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d12c      	bne.n	8008d3c <_printf_float+0x250>
 8008ce2:	e764      	b.n	8008bae <_printf_float+0xc2>
 8008ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ce8:	f240 80e0 	bls.w	8008eac <_printf_float+0x3c0>
 8008cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f7f7 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d034      	beq.n	8008d66 <_printf_float+0x27a>
 8008cfc:	4a37      	ldr	r2, [pc, #220]	; (8008ddc <_printf_float+0x2f0>)
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4631      	mov	r1, r6
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f af51 	beq.w	8008bae <_printf_float+0xc2>
 8008d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d10:	429a      	cmp	r2, r3
 8008d12:	db02      	blt.n	8008d1a <_printf_float+0x22e>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	07d8      	lsls	r0, r3, #31
 8008d18:	d510      	bpl.n	8008d3c <_printf_float+0x250>
 8008d1a:	ee18 3a10 	vmov	r3, s16
 8008d1e:	4652      	mov	r2, sl
 8008d20:	4631      	mov	r1, r6
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f af41 	beq.w	8008bae <_printf_float+0xc2>
 8008d2c:	f04f 0800 	mov.w	r8, #0
 8008d30:	f104 091a 	add.w	r9, r4, #26
 8008d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d36:	3b01      	subs	r3, #1
 8008d38:	4543      	cmp	r3, r8
 8008d3a:	dc09      	bgt.n	8008d50 <_printf_float+0x264>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	079b      	lsls	r3, r3, #30
 8008d40:	f100 8105 	bmi.w	8008f4e <_printf_float+0x462>
 8008d44:	68e0      	ldr	r0, [r4, #12]
 8008d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d48:	4298      	cmp	r0, r3
 8008d4a:	bfb8      	it	lt
 8008d4c:	4618      	movlt	r0, r3
 8008d4e:	e730      	b.n	8008bb2 <_printf_float+0xc6>
 8008d50:	2301      	movs	r3, #1
 8008d52:	464a      	mov	r2, r9
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f af27 	beq.w	8008bae <_printf_float+0xc2>
 8008d60:	f108 0801 	add.w	r8, r8, #1
 8008d64:	e7e6      	b.n	8008d34 <_printf_float+0x248>
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc39      	bgt.n	8008de0 <_printf_float+0x2f4>
 8008d6c:	4a1b      	ldr	r2, [pc, #108]	; (8008ddc <_printf_float+0x2f0>)
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af19 	beq.w	8008bae <_printf_float+0xc2>
 8008d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d102      	bne.n	8008d8a <_printf_float+0x29e>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	07d9      	lsls	r1, r3, #31
 8008d88:	d5d8      	bpl.n	8008d3c <_printf_float+0x250>
 8008d8a:	ee18 3a10 	vmov	r3, s16
 8008d8e:	4652      	mov	r2, sl
 8008d90:	4631      	mov	r1, r6
 8008d92:	4628      	mov	r0, r5
 8008d94:	47b8      	blx	r7
 8008d96:	3001      	adds	r0, #1
 8008d98:	f43f af09 	beq.w	8008bae <_printf_float+0xc2>
 8008d9c:	f04f 0900 	mov.w	r9, #0
 8008da0:	f104 0a1a 	add.w	sl, r4, #26
 8008da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da6:	425b      	negs	r3, r3
 8008da8:	454b      	cmp	r3, r9
 8008daa:	dc01      	bgt.n	8008db0 <_printf_float+0x2c4>
 8008dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dae:	e792      	b.n	8008cd6 <_printf_float+0x1ea>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4652      	mov	r2, sl
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f aef7 	beq.w	8008bae <_printf_float+0xc2>
 8008dc0:	f109 0901 	add.w	r9, r9, #1
 8008dc4:	e7ee      	b.n	8008da4 <_printf_float+0x2b8>
 8008dc6:	bf00      	nop
 8008dc8:	7fefffff 	.word	0x7fefffff
 8008dcc:	0800b7e4 	.word	0x0800b7e4
 8008dd0:	0800b7e8 	.word	0x0800b7e8
 8008dd4:	0800b7f0 	.word	0x0800b7f0
 8008dd8:	0800b7ec 	.word	0x0800b7ec
 8008ddc:	0800b7f4 	.word	0x0800b7f4
 8008de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008de4:	429a      	cmp	r2, r3
 8008de6:	bfa8      	it	ge
 8008de8:	461a      	movge	r2, r3
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	4691      	mov	r9, r2
 8008dee:	dc37      	bgt.n	8008e60 <_printf_float+0x374>
 8008df0:	f04f 0b00 	mov.w	fp, #0
 8008df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008df8:	f104 021a 	add.w	r2, r4, #26
 8008dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	eba3 0309 	sub.w	r3, r3, r9
 8008e04:	455b      	cmp	r3, fp
 8008e06:	dc33      	bgt.n	8008e70 <_printf_float+0x384>
 8008e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	db3b      	blt.n	8008e88 <_printf_float+0x39c>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	07da      	lsls	r2, r3, #31
 8008e14:	d438      	bmi.n	8008e88 <_printf_float+0x39c>
 8008e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e18:	9b05      	ldr	r3, [sp, #20]
 8008e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	eba2 0901 	sub.w	r9, r2, r1
 8008e22:	4599      	cmp	r9, r3
 8008e24:	bfa8      	it	ge
 8008e26:	4699      	movge	r9, r3
 8008e28:	f1b9 0f00 	cmp.w	r9, #0
 8008e2c:	dc35      	bgt.n	8008e9a <_printf_float+0x3ae>
 8008e2e:	f04f 0800 	mov.w	r8, #0
 8008e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e36:	f104 0a1a 	add.w	sl, r4, #26
 8008e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	eba3 0309 	sub.w	r3, r3, r9
 8008e44:	4543      	cmp	r3, r8
 8008e46:	f77f af79 	ble.w	8008d3c <_printf_float+0x250>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4652      	mov	r2, sl
 8008e4e:	4631      	mov	r1, r6
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b8      	blx	r7
 8008e54:	3001      	adds	r0, #1
 8008e56:	f43f aeaa 	beq.w	8008bae <_printf_float+0xc2>
 8008e5a:	f108 0801 	add.w	r8, r8, #1
 8008e5e:	e7ec      	b.n	8008e3a <_printf_float+0x34e>
 8008e60:	4613      	mov	r3, r2
 8008e62:	4631      	mov	r1, r6
 8008e64:	4642      	mov	r2, r8
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d1c0      	bne.n	8008df0 <_printf_float+0x304>
 8008e6e:	e69e      	b.n	8008bae <_printf_float+0xc2>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	9205      	str	r2, [sp, #20]
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f ae97 	beq.w	8008bae <_printf_float+0xc2>
 8008e80:	9a05      	ldr	r2, [sp, #20]
 8008e82:	f10b 0b01 	add.w	fp, fp, #1
 8008e86:	e7b9      	b.n	8008dfc <_printf_float+0x310>
 8008e88:	ee18 3a10 	vmov	r3, s16
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b8      	blx	r7
 8008e94:	3001      	adds	r0, #1
 8008e96:	d1be      	bne.n	8008e16 <_printf_float+0x32a>
 8008e98:	e689      	b.n	8008bae <_printf_float+0xc2>
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	464b      	mov	r3, r9
 8008e9e:	4442      	add	r2, r8
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d1c1      	bne.n	8008e2e <_printf_float+0x342>
 8008eaa:	e680      	b.n	8008bae <_printf_float+0xc2>
 8008eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eae:	2a01      	cmp	r2, #1
 8008eb0:	dc01      	bgt.n	8008eb6 <_printf_float+0x3ca>
 8008eb2:	07db      	lsls	r3, r3, #31
 8008eb4:	d538      	bpl.n	8008f28 <_printf_float+0x43c>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f ae74 	beq.w	8008bae <_printf_float+0xc2>
 8008ec6:	ee18 3a10 	vmov	r3, s16
 8008eca:	4652      	mov	r2, sl
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4628      	mov	r0, r5
 8008ed0:	47b8      	blx	r7
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f43f ae6b 	beq.w	8008bae <_printf_float+0xc2>
 8008ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008edc:	2200      	movs	r2, #0
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f7f7 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee4:	b9d8      	cbnz	r0, 8008f1e <_printf_float+0x432>
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee8:	f108 0201 	add.w	r2, r8, #1
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d10e      	bne.n	8008f16 <_printf_float+0x42a>
 8008ef8:	e659      	b.n	8008bae <_printf_float+0xc2>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4652      	mov	r2, sl
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	47b8      	blx	r7
 8008f04:	3001      	adds	r0, #1
 8008f06:	f43f ae52 	beq.w	8008bae <_printf_float+0xc2>
 8008f0a:	f108 0801 	add.w	r8, r8, #1
 8008f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f10:	3b01      	subs	r3, #1
 8008f12:	4543      	cmp	r3, r8
 8008f14:	dcf1      	bgt.n	8008efa <_printf_float+0x40e>
 8008f16:	464b      	mov	r3, r9
 8008f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f1c:	e6dc      	b.n	8008cd8 <_printf_float+0x1ec>
 8008f1e:	f04f 0800 	mov.w	r8, #0
 8008f22:	f104 0a1a 	add.w	sl, r4, #26
 8008f26:	e7f2      	b.n	8008f0e <_printf_float+0x422>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4642      	mov	r2, r8
 8008f2c:	e7df      	b.n	8008eee <_printf_float+0x402>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	464a      	mov	r2, r9
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f43f ae38 	beq.w	8008bae <_printf_float+0xc2>
 8008f3e:	f108 0801 	add.w	r8, r8, #1
 8008f42:	68e3      	ldr	r3, [r4, #12]
 8008f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f46:	1a5b      	subs	r3, r3, r1
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	dcf0      	bgt.n	8008f2e <_printf_float+0x442>
 8008f4c:	e6fa      	b.n	8008d44 <_printf_float+0x258>
 8008f4e:	f04f 0800 	mov.w	r8, #0
 8008f52:	f104 0919 	add.w	r9, r4, #25
 8008f56:	e7f4      	b.n	8008f42 <_printf_float+0x456>

08008f58 <_printf_common>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	4699      	mov	r9, r3
 8008f60:	688a      	ldr	r2, [r1, #8]
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	bfb8      	it	lt
 8008f6c:	4613      	movlt	r3, r2
 8008f6e:	6033      	str	r3, [r6, #0]
 8008f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f74:	4607      	mov	r7, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	b10a      	cbz	r2, 8008f7e <_printf_common+0x26>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	0699      	lsls	r1, r3, #26
 8008f82:	bf42      	ittt	mi
 8008f84:	6833      	ldrmi	r3, [r6, #0]
 8008f86:	3302      	addmi	r3, #2
 8008f88:	6033      	strmi	r3, [r6, #0]
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	f015 0506 	ands.w	r5, r5, #6
 8008f90:	d106      	bne.n	8008fa0 <_printf_common+0x48>
 8008f92:	f104 0a19 	add.w	sl, r4, #25
 8008f96:	68e3      	ldr	r3, [r4, #12]
 8008f98:	6832      	ldr	r2, [r6, #0]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	42ab      	cmp	r3, r5
 8008f9e:	dc26      	bgt.n	8008fee <_printf_common+0x96>
 8008fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fa4:	1e13      	subs	r3, r2, #0
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	bf18      	it	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	0692      	lsls	r2, r2, #26
 8008fae:	d42b      	bmi.n	8009008 <_printf_common+0xb0>
 8008fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d01e      	beq.n	8008ffc <_printf_common+0xa4>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	68e5      	ldr	r5, [r4, #12]
 8008fc2:	6832      	ldr	r2, [r6, #0]
 8008fc4:	f003 0306 	and.w	r3, r3, #6
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	bf08      	it	eq
 8008fcc:	1aad      	subeq	r5, r5, r2
 8008fce:	68a3      	ldr	r3, [r4, #8]
 8008fd0:	6922      	ldr	r2, [r4, #16]
 8008fd2:	bf0c      	ite	eq
 8008fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fd8:	2500      	movne	r5, #0
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	bfc4      	itt	gt
 8008fde:	1a9b      	subgt	r3, r3, r2
 8008fe0:	18ed      	addgt	r5, r5, r3
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	341a      	adds	r4, #26
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	d11a      	bne.n	8009020 <_printf_common+0xc8>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e008      	b.n	8009000 <_printf_common+0xa8>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	47c0      	blx	r8
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d103      	bne.n	8009004 <_printf_common+0xac>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009004:	3501      	adds	r5, #1
 8009006:	e7c6      	b.n	8008f96 <_printf_common+0x3e>
 8009008:	18e1      	adds	r1, r4, r3
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	2030      	movs	r0, #48	; 0x30
 800900e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009012:	4422      	add	r2, r4
 8009014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800901c:	3302      	adds	r3, #2
 800901e:	e7c7      	b.n	8008fb0 <_printf_common+0x58>
 8009020:	2301      	movs	r3, #1
 8009022:	4622      	mov	r2, r4
 8009024:	4649      	mov	r1, r9
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	3001      	adds	r0, #1
 800902c:	d0e6      	beq.n	8008ffc <_printf_common+0xa4>
 800902e:	3601      	adds	r6, #1
 8009030:	e7d9      	b.n	8008fe6 <_printf_common+0x8e>
	...

08009034 <_printf_i>:
 8009034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	460c      	mov	r4, r1
 800903a:	4691      	mov	r9, r2
 800903c:	7e27      	ldrb	r7, [r4, #24]
 800903e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009040:	2f78      	cmp	r7, #120	; 0x78
 8009042:	4680      	mov	r8, r0
 8009044:	469a      	mov	sl, r3
 8009046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800904a:	d807      	bhi.n	800905c <_printf_i+0x28>
 800904c:	2f62      	cmp	r7, #98	; 0x62
 800904e:	d80a      	bhi.n	8009066 <_printf_i+0x32>
 8009050:	2f00      	cmp	r7, #0
 8009052:	f000 80d8 	beq.w	8009206 <_printf_i+0x1d2>
 8009056:	2f58      	cmp	r7, #88	; 0x58
 8009058:	f000 80a3 	beq.w	80091a2 <_printf_i+0x16e>
 800905c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009064:	e03a      	b.n	80090dc <_printf_i+0xa8>
 8009066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800906a:	2b15      	cmp	r3, #21
 800906c:	d8f6      	bhi.n	800905c <_printf_i+0x28>
 800906e:	a001      	add	r0, pc, #4	; (adr r0, 8009074 <_printf_i+0x40>)
 8009070:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009074:	080090cd 	.word	0x080090cd
 8009078:	080090e1 	.word	0x080090e1
 800907c:	0800905d 	.word	0x0800905d
 8009080:	0800905d 	.word	0x0800905d
 8009084:	0800905d 	.word	0x0800905d
 8009088:	0800905d 	.word	0x0800905d
 800908c:	080090e1 	.word	0x080090e1
 8009090:	0800905d 	.word	0x0800905d
 8009094:	0800905d 	.word	0x0800905d
 8009098:	0800905d 	.word	0x0800905d
 800909c:	0800905d 	.word	0x0800905d
 80090a0:	080091ed 	.word	0x080091ed
 80090a4:	08009111 	.word	0x08009111
 80090a8:	080091cf 	.word	0x080091cf
 80090ac:	0800905d 	.word	0x0800905d
 80090b0:	0800905d 	.word	0x0800905d
 80090b4:	0800920f 	.word	0x0800920f
 80090b8:	0800905d 	.word	0x0800905d
 80090bc:	08009111 	.word	0x08009111
 80090c0:	0800905d 	.word	0x0800905d
 80090c4:	0800905d 	.word	0x0800905d
 80090c8:	080091d7 	.word	0x080091d7
 80090cc:	680b      	ldr	r3, [r1, #0]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	600a      	str	r2, [r1, #0]
 80090d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090dc:	2301      	movs	r3, #1
 80090de:	e0a3      	b.n	8009228 <_printf_i+0x1f4>
 80090e0:	6825      	ldr	r5, [r4, #0]
 80090e2:	6808      	ldr	r0, [r1, #0]
 80090e4:	062e      	lsls	r6, r5, #24
 80090e6:	f100 0304 	add.w	r3, r0, #4
 80090ea:	d50a      	bpl.n	8009102 <_printf_i+0xce>
 80090ec:	6805      	ldr	r5, [r0, #0]
 80090ee:	600b      	str	r3, [r1, #0]
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	da03      	bge.n	80090fc <_printf_i+0xc8>
 80090f4:	232d      	movs	r3, #45	; 0x2d
 80090f6:	426d      	negs	r5, r5
 80090f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fc:	485e      	ldr	r0, [pc, #376]	; (8009278 <_printf_i+0x244>)
 80090fe:	230a      	movs	r3, #10
 8009100:	e019      	b.n	8009136 <_printf_i+0x102>
 8009102:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009106:	6805      	ldr	r5, [r0, #0]
 8009108:	600b      	str	r3, [r1, #0]
 800910a:	bf18      	it	ne
 800910c:	b22d      	sxthne	r5, r5
 800910e:	e7ef      	b.n	80090f0 <_printf_i+0xbc>
 8009110:	680b      	ldr	r3, [r1, #0]
 8009112:	6825      	ldr	r5, [r4, #0]
 8009114:	1d18      	adds	r0, r3, #4
 8009116:	6008      	str	r0, [r1, #0]
 8009118:	0628      	lsls	r0, r5, #24
 800911a:	d501      	bpl.n	8009120 <_printf_i+0xec>
 800911c:	681d      	ldr	r5, [r3, #0]
 800911e:	e002      	b.n	8009126 <_printf_i+0xf2>
 8009120:	0669      	lsls	r1, r5, #25
 8009122:	d5fb      	bpl.n	800911c <_printf_i+0xe8>
 8009124:	881d      	ldrh	r5, [r3, #0]
 8009126:	4854      	ldr	r0, [pc, #336]	; (8009278 <_printf_i+0x244>)
 8009128:	2f6f      	cmp	r7, #111	; 0x6f
 800912a:	bf0c      	ite	eq
 800912c:	2308      	moveq	r3, #8
 800912e:	230a      	movne	r3, #10
 8009130:	2100      	movs	r1, #0
 8009132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009136:	6866      	ldr	r6, [r4, #4]
 8009138:	60a6      	str	r6, [r4, #8]
 800913a:	2e00      	cmp	r6, #0
 800913c:	bfa2      	ittt	ge
 800913e:	6821      	ldrge	r1, [r4, #0]
 8009140:	f021 0104 	bicge.w	r1, r1, #4
 8009144:	6021      	strge	r1, [r4, #0]
 8009146:	b90d      	cbnz	r5, 800914c <_printf_i+0x118>
 8009148:	2e00      	cmp	r6, #0
 800914a:	d04d      	beq.n	80091e8 <_printf_i+0x1b4>
 800914c:	4616      	mov	r6, r2
 800914e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009152:	fb03 5711 	mls	r7, r3, r1, r5
 8009156:	5dc7      	ldrb	r7, [r0, r7]
 8009158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800915c:	462f      	mov	r7, r5
 800915e:	42bb      	cmp	r3, r7
 8009160:	460d      	mov	r5, r1
 8009162:	d9f4      	bls.n	800914e <_printf_i+0x11a>
 8009164:	2b08      	cmp	r3, #8
 8009166:	d10b      	bne.n	8009180 <_printf_i+0x14c>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	07df      	lsls	r7, r3, #31
 800916c:	d508      	bpl.n	8009180 <_printf_i+0x14c>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	4299      	cmp	r1, r3
 8009174:	bfde      	ittt	le
 8009176:	2330      	movle	r3, #48	; 0x30
 8009178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800917c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009180:	1b92      	subs	r2, r2, r6
 8009182:	6122      	str	r2, [r4, #16]
 8009184:	f8cd a000 	str.w	sl, [sp]
 8009188:	464b      	mov	r3, r9
 800918a:	aa03      	add	r2, sp, #12
 800918c:	4621      	mov	r1, r4
 800918e:	4640      	mov	r0, r8
 8009190:	f7ff fee2 	bl	8008f58 <_printf_common>
 8009194:	3001      	adds	r0, #1
 8009196:	d14c      	bne.n	8009232 <_printf_i+0x1fe>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	b004      	add	sp, #16
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	4835      	ldr	r0, [pc, #212]	; (8009278 <_printf_i+0x244>)
 80091a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	680e      	ldr	r6, [r1, #0]
 80091ac:	061f      	lsls	r7, r3, #24
 80091ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80091b2:	600e      	str	r6, [r1, #0]
 80091b4:	d514      	bpl.n	80091e0 <_printf_i+0x1ac>
 80091b6:	07d9      	lsls	r1, r3, #31
 80091b8:	bf44      	itt	mi
 80091ba:	f043 0320 	orrmi.w	r3, r3, #32
 80091be:	6023      	strmi	r3, [r4, #0]
 80091c0:	b91d      	cbnz	r5, 80091ca <_printf_i+0x196>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f023 0320 	bic.w	r3, r3, #32
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	2310      	movs	r3, #16
 80091cc:	e7b0      	b.n	8009130 <_printf_i+0xfc>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	f043 0320 	orr.w	r3, r3, #32
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2378      	movs	r3, #120	; 0x78
 80091d8:	4828      	ldr	r0, [pc, #160]	; (800927c <_printf_i+0x248>)
 80091da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091de:	e7e3      	b.n	80091a8 <_printf_i+0x174>
 80091e0:	065e      	lsls	r6, r3, #25
 80091e2:	bf48      	it	mi
 80091e4:	b2ad      	uxthmi	r5, r5
 80091e6:	e7e6      	b.n	80091b6 <_printf_i+0x182>
 80091e8:	4616      	mov	r6, r2
 80091ea:	e7bb      	b.n	8009164 <_printf_i+0x130>
 80091ec:	680b      	ldr	r3, [r1, #0]
 80091ee:	6826      	ldr	r6, [r4, #0]
 80091f0:	6960      	ldr	r0, [r4, #20]
 80091f2:	1d1d      	adds	r5, r3, #4
 80091f4:	600d      	str	r5, [r1, #0]
 80091f6:	0635      	lsls	r5, r6, #24
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	d501      	bpl.n	8009200 <_printf_i+0x1cc>
 80091fc:	6018      	str	r0, [r3, #0]
 80091fe:	e002      	b.n	8009206 <_printf_i+0x1d2>
 8009200:	0671      	lsls	r1, r6, #25
 8009202:	d5fb      	bpl.n	80091fc <_printf_i+0x1c8>
 8009204:	8018      	strh	r0, [r3, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	4616      	mov	r6, r2
 800920c:	e7ba      	b.n	8009184 <_printf_i+0x150>
 800920e:	680b      	ldr	r3, [r1, #0]
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	600a      	str	r2, [r1, #0]
 8009214:	681e      	ldr	r6, [r3, #0]
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	2100      	movs	r1, #0
 800921a:	4630      	mov	r0, r6
 800921c:	f7f6 ffe0 	bl	80001e0 <memchr>
 8009220:	b108      	cbz	r0, 8009226 <_printf_i+0x1f2>
 8009222:	1b80      	subs	r0, r0, r6
 8009224:	6060      	str	r0, [r4, #4]
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	2300      	movs	r3, #0
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009230:	e7a8      	b.n	8009184 <_printf_i+0x150>
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	4632      	mov	r2, r6
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d0ab      	beq.n	8009198 <_printf_i+0x164>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	079b      	lsls	r3, r3, #30
 8009244:	d413      	bmi.n	800926e <_printf_i+0x23a>
 8009246:	68e0      	ldr	r0, [r4, #12]
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	4298      	cmp	r0, r3
 800924c:	bfb8      	it	lt
 800924e:	4618      	movlt	r0, r3
 8009250:	e7a4      	b.n	800919c <_printf_i+0x168>
 8009252:	2301      	movs	r3, #1
 8009254:	4632      	mov	r2, r6
 8009256:	4649      	mov	r1, r9
 8009258:	4640      	mov	r0, r8
 800925a:	47d0      	blx	sl
 800925c:	3001      	adds	r0, #1
 800925e:	d09b      	beq.n	8009198 <_printf_i+0x164>
 8009260:	3501      	adds	r5, #1
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	9903      	ldr	r1, [sp, #12]
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	42ab      	cmp	r3, r5
 800926a:	dcf2      	bgt.n	8009252 <_printf_i+0x21e>
 800926c:	e7eb      	b.n	8009246 <_printf_i+0x212>
 800926e:	2500      	movs	r5, #0
 8009270:	f104 0619 	add.w	r6, r4, #25
 8009274:	e7f5      	b.n	8009262 <_printf_i+0x22e>
 8009276:	bf00      	nop
 8009278:	0800b7f6 	.word	0x0800b7f6
 800927c:	0800b807 	.word	0x0800b807

08009280 <sniprintf>:
 8009280:	b40c      	push	{r2, r3}
 8009282:	b530      	push	{r4, r5, lr}
 8009284:	4b17      	ldr	r3, [pc, #92]	; (80092e4 <sniprintf+0x64>)
 8009286:	1e0c      	subs	r4, r1, #0
 8009288:	681d      	ldr	r5, [r3, #0]
 800928a:	b09d      	sub	sp, #116	; 0x74
 800928c:	da08      	bge.n	80092a0 <sniprintf+0x20>
 800928e:	238b      	movs	r3, #139	; 0x8b
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	b01d      	add	sp, #116	; 0x74
 8009298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800929c:	b002      	add	sp, #8
 800929e:	4770      	bx	lr
 80092a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092a8:	bf14      	ite	ne
 80092aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092ae:	4623      	moveq	r3, r4
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092b8:	9002      	str	r0, [sp, #8]
 80092ba:	9006      	str	r0, [sp, #24]
 80092bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092c2:	ab21      	add	r3, sp, #132	; 0x84
 80092c4:	a902      	add	r1, sp, #8
 80092c6:	4628      	mov	r0, r5
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f001 fb33 	bl	800a934 <_svfiprintf_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	bfbc      	itt	lt
 80092d2:	238b      	movlt	r3, #139	; 0x8b
 80092d4:	602b      	strlt	r3, [r5, #0]
 80092d6:	2c00      	cmp	r4, #0
 80092d8:	d0dd      	beq.n	8009296 <sniprintf+0x16>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e7d9      	b.n	8009296 <sniprintf+0x16>
 80092e2:	bf00      	nop
 80092e4:	20000190 	.word	0x20000190

080092e8 <quorem>:
 80092e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	6903      	ldr	r3, [r0, #16]
 80092ee:	690c      	ldr	r4, [r1, #16]
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	4607      	mov	r7, r0
 80092f4:	f2c0 8081 	blt.w	80093fa <quorem+0x112>
 80092f8:	3c01      	subs	r4, #1
 80092fa:	f101 0814 	add.w	r8, r1, #20
 80092fe:	f100 0514 	add.w	r5, r0, #20
 8009302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800930c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009310:	3301      	adds	r3, #1
 8009312:	429a      	cmp	r2, r3
 8009314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800931c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009320:	d331      	bcc.n	8009386 <quorem+0x9e>
 8009322:	f04f 0e00 	mov.w	lr, #0
 8009326:	4640      	mov	r0, r8
 8009328:	46ac      	mov	ip, r5
 800932a:	46f2      	mov	sl, lr
 800932c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009330:	b293      	uxth	r3, r2
 8009332:	fb06 e303 	mla	r3, r6, r3, lr
 8009336:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800933a:	b29b      	uxth	r3, r3
 800933c:	ebaa 0303 	sub.w	r3, sl, r3
 8009340:	0c12      	lsrs	r2, r2, #16
 8009342:	f8dc a000 	ldr.w	sl, [ip]
 8009346:	fb06 e202 	mla	r2, r6, r2, lr
 800934a:	fa13 f38a 	uxtah	r3, r3, sl
 800934e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009352:	fa1f fa82 	uxth.w	sl, r2
 8009356:	f8dc 2000 	ldr.w	r2, [ip]
 800935a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800935e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009362:	b29b      	uxth	r3, r3
 8009364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009368:	4581      	cmp	r9, r0
 800936a:	f84c 3b04 	str.w	r3, [ip], #4
 800936e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009372:	d2db      	bcs.n	800932c <quorem+0x44>
 8009374:	f855 300b 	ldr.w	r3, [r5, fp]
 8009378:	b92b      	cbnz	r3, 8009386 <quorem+0x9e>
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	3b04      	subs	r3, #4
 800937e:	429d      	cmp	r5, r3
 8009380:	461a      	mov	r2, r3
 8009382:	d32e      	bcc.n	80093e2 <quorem+0xfa>
 8009384:	613c      	str	r4, [r7, #16]
 8009386:	4638      	mov	r0, r7
 8009388:	f001 f8be 	bl	800a508 <__mcmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	db24      	blt.n	80093da <quorem+0xf2>
 8009390:	3601      	adds	r6, #1
 8009392:	4628      	mov	r0, r5
 8009394:	f04f 0c00 	mov.w	ip, #0
 8009398:	f858 2b04 	ldr.w	r2, [r8], #4
 800939c:	f8d0 e000 	ldr.w	lr, [r0]
 80093a0:	b293      	uxth	r3, r2
 80093a2:	ebac 0303 	sub.w	r3, ip, r3
 80093a6:	0c12      	lsrs	r2, r2, #16
 80093a8:	fa13 f38e 	uxtah	r3, r3, lr
 80093ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ba:	45c1      	cmp	r9, r8
 80093bc:	f840 3b04 	str.w	r3, [r0], #4
 80093c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093c4:	d2e8      	bcs.n	8009398 <quorem+0xb0>
 80093c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ce:	b922      	cbnz	r2, 80093da <quorem+0xf2>
 80093d0:	3b04      	subs	r3, #4
 80093d2:	429d      	cmp	r5, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	d30a      	bcc.n	80093ee <quorem+0x106>
 80093d8:	613c      	str	r4, [r7, #16]
 80093da:	4630      	mov	r0, r6
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	3b04      	subs	r3, #4
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	d1cc      	bne.n	8009384 <quorem+0x9c>
 80093ea:	3c01      	subs	r4, #1
 80093ec:	e7c7      	b.n	800937e <quorem+0x96>
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	d1f0      	bne.n	80093d8 <quorem+0xf0>
 80093f6:	3c01      	subs	r4, #1
 80093f8:	e7eb      	b.n	80093d2 <quorem+0xea>
 80093fa:	2000      	movs	r0, #0
 80093fc:	e7ee      	b.n	80093dc <quorem+0xf4>
	...

08009400 <_dtoa_r>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	ed2d 8b02 	vpush	{d8}
 8009408:	ec57 6b10 	vmov	r6, r7, d0
 800940c:	b095      	sub	sp, #84	; 0x54
 800940e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009414:	9105      	str	r1, [sp, #20]
 8009416:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800941a:	4604      	mov	r4, r0
 800941c:	9209      	str	r2, [sp, #36]	; 0x24
 800941e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009420:	b975      	cbnz	r5, 8009440 <_dtoa_r+0x40>
 8009422:	2010      	movs	r0, #16
 8009424:	f000 fddc 	bl	8009fe0 <malloc>
 8009428:	4602      	mov	r2, r0
 800942a:	6260      	str	r0, [r4, #36]	; 0x24
 800942c:	b920      	cbnz	r0, 8009438 <_dtoa_r+0x38>
 800942e:	4bb2      	ldr	r3, [pc, #712]	; (80096f8 <_dtoa_r+0x2f8>)
 8009430:	21ea      	movs	r1, #234	; 0xea
 8009432:	48b2      	ldr	r0, [pc, #712]	; (80096fc <_dtoa_r+0x2fc>)
 8009434:	f001 fb8e 	bl	800ab54 <__assert_func>
 8009438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800943c:	6005      	str	r5, [r0, #0]
 800943e:	60c5      	str	r5, [r0, #12]
 8009440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	b151      	cbz	r1, 800945c <_dtoa_r+0x5c>
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	604a      	str	r2, [r1, #4]
 800944a:	2301      	movs	r3, #1
 800944c:	4093      	lsls	r3, r2
 800944e:	608b      	str	r3, [r1, #8]
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fe1b 	bl	800a08c <_Bfree>
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	1e3b      	subs	r3, r7, #0
 800945e:	bfb9      	ittee	lt
 8009460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009464:	9303      	strlt	r3, [sp, #12]
 8009466:	2300      	movge	r3, #0
 8009468:	f8c8 3000 	strge.w	r3, [r8]
 800946c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009470:	4ba3      	ldr	r3, [pc, #652]	; (8009700 <_dtoa_r+0x300>)
 8009472:	bfbc      	itt	lt
 8009474:	2201      	movlt	r2, #1
 8009476:	f8c8 2000 	strlt.w	r2, [r8]
 800947a:	ea33 0309 	bics.w	r3, r3, r9
 800947e:	d11b      	bne.n	80094b8 <_dtoa_r+0xb8>
 8009480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009482:	f242 730f 	movw	r3, #9999	; 0x270f
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800948c:	4333      	orrs	r3, r6
 800948e:	f000 857a 	beq.w	8009f86 <_dtoa_r+0xb86>
 8009492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009494:	b963      	cbnz	r3, 80094b0 <_dtoa_r+0xb0>
 8009496:	4b9b      	ldr	r3, [pc, #620]	; (8009704 <_dtoa_r+0x304>)
 8009498:	e024      	b.n	80094e4 <_dtoa_r+0xe4>
 800949a:	4b9b      	ldr	r3, [pc, #620]	; (8009708 <_dtoa_r+0x308>)
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	9800      	ldr	r0, [sp, #0]
 80094a6:	b015      	add	sp, #84	; 0x54
 80094a8:	ecbd 8b02 	vpop	{d8}
 80094ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b0:	4b94      	ldr	r3, [pc, #592]	; (8009704 <_dtoa_r+0x304>)
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	3303      	adds	r3, #3
 80094b6:	e7f3      	b.n	80094a0 <_dtoa_r+0xa0>
 80094b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	ec51 0b17 	vmov	r0, r1, d7
 80094c2:	2300      	movs	r3, #0
 80094c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80094c8:	f7f7 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80094cc:	4680      	mov	r8, r0
 80094ce:	b158      	cbz	r0, 80094e8 <_dtoa_r+0xe8>
 80094d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094d2:	2301      	movs	r3, #1
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8551 	beq.w	8009f80 <_dtoa_r+0xb80>
 80094de:	488b      	ldr	r0, [pc, #556]	; (800970c <_dtoa_r+0x30c>)
 80094e0:	6018      	str	r0, [r3, #0]
 80094e2:	1e43      	subs	r3, r0, #1
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	e7dd      	b.n	80094a4 <_dtoa_r+0xa4>
 80094e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80094ec:	aa12      	add	r2, sp, #72	; 0x48
 80094ee:	a913      	add	r1, sp, #76	; 0x4c
 80094f0:	4620      	mov	r0, r4
 80094f2:	f001 f8ad 	bl	800a650 <__d2b>
 80094f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094fa:	4683      	mov	fp, r0
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	d07c      	beq.n	80095fa <_dtoa_r+0x1fa>
 8009500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009502:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800950a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800950e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009512:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800951a:	4b7d      	ldr	r3, [pc, #500]	; (8009710 <_dtoa_r+0x310>)
 800951c:	2200      	movs	r2, #0
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f6 feb1 	bl	8000288 <__aeabi_dsub>
 8009526:	a36e      	add	r3, pc, #440	; (adr r3, 80096e0 <_dtoa_r+0x2e0>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	a36d      	add	r3, pc, #436	; (adr r3, 80096e8 <_dtoa_r+0x2e8>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f7f6 fea9 	bl	800028c <__adddf3>
 800953a:	4606      	mov	r6, r0
 800953c:	4628      	mov	r0, r5
 800953e:	460f      	mov	r7, r1
 8009540:	f7f6 fff0 	bl	8000524 <__aeabi_i2d>
 8009544:	a36a      	add	r3, pc, #424	; (adr r3, 80096f0 <_dtoa_r+0x2f0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f7 f855 	bl	80005f8 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f6 fe99 	bl	800028c <__adddf3>
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	f7f7 fafb 	bl	8000b58 <__aeabi_d2iz>
 8009562:	2200      	movs	r2, #0
 8009564:	4682      	mov	sl, r0
 8009566:	2300      	movs	r3, #0
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 fab6 	bl	8000adc <__aeabi_dcmplt>
 8009570:	b148      	cbz	r0, 8009586 <_dtoa_r+0x186>
 8009572:	4650      	mov	r0, sl
 8009574:	f7f6 ffd6 	bl	8000524 <__aeabi_i2d>
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	f7f7 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009580:	b908      	cbnz	r0, 8009586 <_dtoa_r+0x186>
 8009582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009586:	f1ba 0f16 	cmp.w	sl, #22
 800958a:	d854      	bhi.n	8009636 <_dtoa_r+0x236>
 800958c:	4b61      	ldr	r3, [pc, #388]	; (8009714 <_dtoa_r+0x314>)
 800958e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800959a:	f7f7 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d04b      	beq.n	800963a <_dtoa_r+0x23a>
 80095a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095a6:	2300      	movs	r3, #0
 80095a8:	930e      	str	r3, [sp, #56]	; 0x38
 80095aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ac:	1b5d      	subs	r5, r3, r5
 80095ae:	1e6b      	subs	r3, r5, #1
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	bf43      	ittte	mi
 80095b4:	2300      	movmi	r3, #0
 80095b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80095ba:	9304      	strmi	r3, [sp, #16]
 80095bc:	f04f 0800 	movpl.w	r8, #0
 80095c0:	f1ba 0f00 	cmp.w	sl, #0
 80095c4:	db3b      	blt.n	800963e <_dtoa_r+0x23e>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80095cc:	4453      	add	r3, sl
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9306      	str	r3, [sp, #24]
 80095d4:	9b05      	ldr	r3, [sp, #20]
 80095d6:	2b09      	cmp	r3, #9
 80095d8:	d869      	bhi.n	80096ae <_dtoa_r+0x2ae>
 80095da:	2b05      	cmp	r3, #5
 80095dc:	bfc4      	itt	gt
 80095de:	3b04      	subgt	r3, #4
 80095e0:	9305      	strgt	r3, [sp, #20]
 80095e2:	9b05      	ldr	r3, [sp, #20]
 80095e4:	f1a3 0302 	sub.w	r3, r3, #2
 80095e8:	bfcc      	ite	gt
 80095ea:	2500      	movgt	r5, #0
 80095ec:	2501      	movle	r5, #1
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d869      	bhi.n	80096c6 <_dtoa_r+0x2c6>
 80095f2:	e8df f003 	tbb	[pc, r3]
 80095f6:	4e2c      	.short	0x4e2c
 80095f8:	5a4c      	.short	0x5a4c
 80095fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80095fe:	441d      	add	r5, r3
 8009600:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009604:	2b20      	cmp	r3, #32
 8009606:	bfc1      	itttt	gt
 8009608:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800960c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009610:	fa09 f303 	lslgt.w	r3, r9, r3
 8009614:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009618:	bfda      	itte	le
 800961a:	f1c3 0320 	rsble	r3, r3, #32
 800961e:	fa06 f003 	lslle.w	r0, r6, r3
 8009622:	4318      	orrgt	r0, r3
 8009624:	f7f6 ff6e 	bl	8000504 <__aeabi_ui2d>
 8009628:	2301      	movs	r3, #1
 800962a:	4606      	mov	r6, r0
 800962c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009630:	3d01      	subs	r5, #1
 8009632:	9310      	str	r3, [sp, #64]	; 0x40
 8009634:	e771      	b.n	800951a <_dtoa_r+0x11a>
 8009636:	2301      	movs	r3, #1
 8009638:	e7b6      	b.n	80095a8 <_dtoa_r+0x1a8>
 800963a:	900e      	str	r0, [sp, #56]	; 0x38
 800963c:	e7b5      	b.n	80095aa <_dtoa_r+0x1aa>
 800963e:	f1ca 0300 	rsb	r3, sl, #0
 8009642:	9306      	str	r3, [sp, #24]
 8009644:	2300      	movs	r3, #0
 8009646:	eba8 080a 	sub.w	r8, r8, sl
 800964a:	930d      	str	r3, [sp, #52]	; 0x34
 800964c:	e7c2      	b.n	80095d4 <_dtoa_r+0x1d4>
 800964e:	2300      	movs	r3, #0
 8009650:	9308      	str	r3, [sp, #32]
 8009652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	dc39      	bgt.n	80096cc <_dtoa_r+0x2cc>
 8009658:	f04f 0901 	mov.w	r9, #1
 800965c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009660:	464b      	mov	r3, r9
 8009662:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009666:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009668:	2200      	movs	r2, #0
 800966a:	6042      	str	r2, [r0, #4]
 800966c:	2204      	movs	r2, #4
 800966e:	f102 0614 	add.w	r6, r2, #20
 8009672:	429e      	cmp	r6, r3
 8009674:	6841      	ldr	r1, [r0, #4]
 8009676:	d92f      	bls.n	80096d8 <_dtoa_r+0x2d8>
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fcc7 	bl	800a00c <_Balloc>
 800967e:	9000      	str	r0, [sp, #0]
 8009680:	2800      	cmp	r0, #0
 8009682:	d14b      	bne.n	800971c <_dtoa_r+0x31c>
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <_dtoa_r+0x318>)
 8009686:	4602      	mov	r2, r0
 8009688:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800968c:	e6d1      	b.n	8009432 <_dtoa_r+0x32>
 800968e:	2301      	movs	r3, #1
 8009690:	e7de      	b.n	8009650 <_dtoa_r+0x250>
 8009692:	2300      	movs	r3, #0
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	eb0a 0903 	add.w	r9, sl, r3
 800969c:	f109 0301 	add.w	r3, r9, #1
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	bfb8      	it	lt
 80096a6:	2301      	movlt	r3, #1
 80096a8:	e7dd      	b.n	8009666 <_dtoa_r+0x266>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e7f2      	b.n	8009694 <_dtoa_r+0x294>
 80096ae:	2501      	movs	r5, #1
 80096b0:	2300      	movs	r3, #0
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	9508      	str	r5, [sp, #32]
 80096b6:	f04f 39ff 	mov.w	r9, #4294967295
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80096c0:	2312      	movs	r3, #18
 80096c2:	9209      	str	r2, [sp, #36]	; 0x24
 80096c4:	e7cf      	b.n	8009666 <_dtoa_r+0x266>
 80096c6:	2301      	movs	r3, #1
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	e7f4      	b.n	80096b6 <_dtoa_r+0x2b6>
 80096cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80096d4:	464b      	mov	r3, r9
 80096d6:	e7c6      	b.n	8009666 <_dtoa_r+0x266>
 80096d8:	3101      	adds	r1, #1
 80096da:	6041      	str	r1, [r0, #4]
 80096dc:	0052      	lsls	r2, r2, #1
 80096de:	e7c6      	b.n	800966e <_dtoa_r+0x26e>
 80096e0:	636f4361 	.word	0x636f4361
 80096e4:	3fd287a7 	.word	0x3fd287a7
 80096e8:	8b60c8b3 	.word	0x8b60c8b3
 80096ec:	3fc68a28 	.word	0x3fc68a28
 80096f0:	509f79fb 	.word	0x509f79fb
 80096f4:	3fd34413 	.word	0x3fd34413
 80096f8:	0800b825 	.word	0x0800b825
 80096fc:	0800b83c 	.word	0x0800b83c
 8009700:	7ff00000 	.word	0x7ff00000
 8009704:	0800b821 	.word	0x0800b821
 8009708:	0800b818 	.word	0x0800b818
 800970c:	0800b7f5 	.word	0x0800b7f5
 8009710:	3ff80000 	.word	0x3ff80000
 8009714:	0800b938 	.word	0x0800b938
 8009718:	0800b89b 	.word	0x0800b89b
 800971c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800971e:	9a00      	ldr	r2, [sp, #0]
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	9b01      	ldr	r3, [sp, #4]
 8009724:	2b0e      	cmp	r3, #14
 8009726:	f200 80ad 	bhi.w	8009884 <_dtoa_r+0x484>
 800972a:	2d00      	cmp	r5, #0
 800972c:	f000 80aa 	beq.w	8009884 <_dtoa_r+0x484>
 8009730:	f1ba 0f00 	cmp.w	sl, #0
 8009734:	dd36      	ble.n	80097a4 <_dtoa_r+0x3a4>
 8009736:	4ac3      	ldr	r2, [pc, #780]	; (8009a44 <_dtoa_r+0x644>)
 8009738:	f00a 030f 	and.w	r3, sl, #15
 800973c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009740:	ed93 7b00 	vldr	d7, [r3]
 8009744:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009748:	ea4f 172a 	mov.w	r7, sl, asr #4
 800974c:	eeb0 8a47 	vmov.f32	s16, s14
 8009750:	eef0 8a67 	vmov.f32	s17, s15
 8009754:	d016      	beq.n	8009784 <_dtoa_r+0x384>
 8009756:	4bbc      	ldr	r3, [pc, #752]	; (8009a48 <_dtoa_r+0x648>)
 8009758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800975c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009760:	f7f7 f874 	bl	800084c <__aeabi_ddiv>
 8009764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009768:	f007 070f 	and.w	r7, r7, #15
 800976c:	2503      	movs	r5, #3
 800976e:	4eb6      	ldr	r6, [pc, #728]	; (8009a48 <_dtoa_r+0x648>)
 8009770:	b957      	cbnz	r7, 8009788 <_dtoa_r+0x388>
 8009772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009776:	ec53 2b18 	vmov	r2, r3, d8
 800977a:	f7f7 f867 	bl	800084c <__aeabi_ddiv>
 800977e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009782:	e029      	b.n	80097d8 <_dtoa_r+0x3d8>
 8009784:	2502      	movs	r5, #2
 8009786:	e7f2      	b.n	800976e <_dtoa_r+0x36e>
 8009788:	07f9      	lsls	r1, r7, #31
 800978a:	d508      	bpl.n	800979e <_dtoa_r+0x39e>
 800978c:	ec51 0b18 	vmov	r0, r1, d8
 8009790:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009794:	f7f6 ff30 	bl	80005f8 <__aeabi_dmul>
 8009798:	ec41 0b18 	vmov	d8, r0, r1
 800979c:	3501      	adds	r5, #1
 800979e:	107f      	asrs	r7, r7, #1
 80097a0:	3608      	adds	r6, #8
 80097a2:	e7e5      	b.n	8009770 <_dtoa_r+0x370>
 80097a4:	f000 80a6 	beq.w	80098f4 <_dtoa_r+0x4f4>
 80097a8:	f1ca 0600 	rsb	r6, sl, #0
 80097ac:	4ba5      	ldr	r3, [pc, #660]	; (8009a44 <_dtoa_r+0x644>)
 80097ae:	4fa6      	ldr	r7, [pc, #664]	; (8009a48 <_dtoa_r+0x648>)
 80097b0:	f006 020f 	and.w	r2, r6, #15
 80097b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097c0:	f7f6 ff1a 	bl	80005f8 <__aeabi_dmul>
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	1136      	asrs	r6, r6, #4
 80097ca:	2300      	movs	r3, #0
 80097cc:	2502      	movs	r5, #2
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	f040 8085 	bne.w	80098de <_dtoa_r+0x4de>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1d2      	bne.n	800977e <_dtoa_r+0x37e>
 80097d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 808c 	beq.w	80098f8 <_dtoa_r+0x4f8>
 80097e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097e4:	4b99      	ldr	r3, [pc, #612]	; (8009a4c <_dtoa_r+0x64c>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f7 f976 	bl	8000adc <__aeabi_dcmplt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f000 8081 	beq.w	80098f8 <_dtoa_r+0x4f8>
 80097f6:	9b01      	ldr	r3, [sp, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d07d      	beq.n	80098f8 <_dtoa_r+0x4f8>
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	dd3c      	ble.n	800987c <_dtoa_r+0x47c>
 8009802:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	2200      	movs	r2, #0
 800980a:	4b91      	ldr	r3, [pc, #580]	; (8009a50 <_dtoa_r+0x650>)
 800980c:	4630      	mov	r0, r6
 800980e:	4639      	mov	r1, r7
 8009810:	f7f6 fef2 	bl	80005f8 <__aeabi_dmul>
 8009814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009818:	3501      	adds	r5, #1
 800981a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800981e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009822:	4628      	mov	r0, r5
 8009824:	f7f6 fe7e 	bl	8000524 <__aeabi_i2d>
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	f7f6 fee4 	bl	80005f8 <__aeabi_dmul>
 8009830:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <_dtoa_r+0x654>)
 8009832:	2200      	movs	r2, #0
 8009834:	f7f6 fd2a 	bl	800028c <__adddf3>
 8009838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800983c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009844:	2b00      	cmp	r3, #0
 8009846:	d15c      	bne.n	8009902 <_dtoa_r+0x502>
 8009848:	4b83      	ldr	r3, [pc, #524]	; (8009a58 <_dtoa_r+0x658>)
 800984a:	2200      	movs	r2, #0
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f6 fd1a 	bl	8000288 <__aeabi_dsub>
 8009854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	f7f7 f95c 	bl	8000b18 <__aeabi_dcmpgt>
 8009860:	2800      	cmp	r0, #0
 8009862:	f040 8296 	bne.w	8009d92 <_dtoa_r+0x992>
 8009866:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800986a:	4630      	mov	r0, r6
 800986c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f933 	bl	8000adc <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	f040 8288 	bne.w	8009d8c <_dtoa_r+0x98c>
 800987c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009886:	2b00      	cmp	r3, #0
 8009888:	f2c0 8158 	blt.w	8009b3c <_dtoa_r+0x73c>
 800988c:	f1ba 0f0e 	cmp.w	sl, #14
 8009890:	f300 8154 	bgt.w	8009b3c <_dtoa_r+0x73c>
 8009894:	4b6b      	ldr	r3, [pc, #428]	; (8009a44 <_dtoa_r+0x644>)
 8009896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800989a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800989e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f280 80e3 	bge.w	8009a6c <_dtoa_r+0x66c>
 80098a6:	9b01      	ldr	r3, [sp, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f300 80df 	bgt.w	8009a6c <_dtoa_r+0x66c>
 80098ae:	f040 826d 	bne.w	8009d8c <_dtoa_r+0x98c>
 80098b2:	4b69      	ldr	r3, [pc, #420]	; (8009a58 <_dtoa_r+0x658>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	4640      	mov	r0, r8
 80098b8:	4649      	mov	r1, r9
 80098ba:	f7f6 fe9d 	bl	80005f8 <__aeabi_dmul>
 80098be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c2:	f7f7 f91f 	bl	8000b04 <__aeabi_dcmpge>
 80098c6:	9e01      	ldr	r6, [sp, #4]
 80098c8:	4637      	mov	r7, r6
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f040 8243 	bne.w	8009d56 <_dtoa_r+0x956>
 80098d0:	9d00      	ldr	r5, [sp, #0]
 80098d2:	2331      	movs	r3, #49	; 0x31
 80098d4:	f805 3b01 	strb.w	r3, [r5], #1
 80098d8:	f10a 0a01 	add.w	sl, sl, #1
 80098dc:	e23f      	b.n	8009d5e <_dtoa_r+0x95e>
 80098de:	07f2      	lsls	r2, r6, #31
 80098e0:	d505      	bpl.n	80098ee <_dtoa_r+0x4ee>
 80098e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e6:	f7f6 fe87 	bl	80005f8 <__aeabi_dmul>
 80098ea:	3501      	adds	r5, #1
 80098ec:	2301      	movs	r3, #1
 80098ee:	1076      	asrs	r6, r6, #1
 80098f0:	3708      	adds	r7, #8
 80098f2:	e76c      	b.n	80097ce <_dtoa_r+0x3ce>
 80098f4:	2502      	movs	r5, #2
 80098f6:	e76f      	b.n	80097d8 <_dtoa_r+0x3d8>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80098fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009900:	e78d      	b.n	800981e <_dtoa_r+0x41e>
 8009902:	9900      	ldr	r1, [sp, #0]
 8009904:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009908:	4b4e      	ldr	r3, [pc, #312]	; (8009a44 <_dtoa_r+0x644>)
 800990a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800990e:	4401      	add	r1, r0
 8009910:	9102      	str	r1, [sp, #8]
 8009912:	9908      	ldr	r1, [sp, #32]
 8009914:	eeb0 8a47 	vmov.f32	s16, s14
 8009918:	eef0 8a67 	vmov.f32	s17, s15
 800991c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009920:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009924:	2900      	cmp	r1, #0
 8009926:	d045      	beq.n	80099b4 <_dtoa_r+0x5b4>
 8009928:	494c      	ldr	r1, [pc, #304]	; (8009a5c <_dtoa_r+0x65c>)
 800992a:	2000      	movs	r0, #0
 800992c:	f7f6 ff8e 	bl	800084c <__aeabi_ddiv>
 8009930:	ec53 2b18 	vmov	r2, r3, d8
 8009934:	f7f6 fca8 	bl	8000288 <__aeabi_dsub>
 8009938:	9d00      	ldr	r5, [sp, #0]
 800993a:	ec41 0b18 	vmov	d8, r0, r1
 800993e:	4639      	mov	r1, r7
 8009940:	4630      	mov	r0, r6
 8009942:	f7f7 f909 	bl	8000b58 <__aeabi_d2iz>
 8009946:	900c      	str	r0, [sp, #48]	; 0x30
 8009948:	f7f6 fdec 	bl	8000524 <__aeabi_i2d>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f6 fc98 	bl	8000288 <__aeabi_dsub>
 8009958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800995a:	3330      	adds	r3, #48	; 0x30
 800995c:	f805 3b01 	strb.w	r3, [r5], #1
 8009960:	ec53 2b18 	vmov	r2, r3, d8
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	f7f7 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d165      	bne.n	8009a3c <_dtoa_r+0x63c>
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	4935      	ldr	r1, [pc, #212]	; (8009a4c <_dtoa_r+0x64c>)
 8009976:	2000      	movs	r0, #0
 8009978:	f7f6 fc86 	bl	8000288 <__aeabi_dsub>
 800997c:	ec53 2b18 	vmov	r2, r3, d8
 8009980:	f7f7 f8ac 	bl	8000adc <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 80b9 	bne.w	8009afc <_dtoa_r+0x6fc>
 800998a:	9b02      	ldr	r3, [sp, #8]
 800998c:	429d      	cmp	r5, r3
 800998e:	f43f af75 	beq.w	800987c <_dtoa_r+0x47c>
 8009992:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <_dtoa_r+0x650>)
 8009994:	ec51 0b18 	vmov	r0, r1, d8
 8009998:	2200      	movs	r2, #0
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <_dtoa_r+0x650>)
 80099a0:	ec41 0b18 	vmov	d8, r0, r1
 80099a4:	2200      	movs	r2, #0
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fe25 	bl	80005f8 <__aeabi_dmul>
 80099ae:	4606      	mov	r6, r0
 80099b0:	460f      	mov	r7, r1
 80099b2:	e7c4      	b.n	800993e <_dtoa_r+0x53e>
 80099b4:	ec51 0b17 	vmov	r0, r1, d7
 80099b8:	f7f6 fe1e 	bl	80005f8 <__aeabi_dmul>
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	9d00      	ldr	r5, [sp, #0]
 80099c0:	930c      	str	r3, [sp, #48]	; 0x30
 80099c2:	ec41 0b18 	vmov	d8, r0, r1
 80099c6:	4639      	mov	r1, r7
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7f7 f8c5 	bl	8000b58 <__aeabi_d2iz>
 80099ce:	9011      	str	r0, [sp, #68]	; 0x44
 80099d0:	f7f6 fda8 	bl	8000524 <__aeabi_i2d>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4630      	mov	r0, r6
 80099da:	4639      	mov	r1, r7
 80099dc:	f7f6 fc54 	bl	8000288 <__aeabi_dsub>
 80099e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e2:	3330      	adds	r3, #48	; 0x30
 80099e4:	f805 3b01 	strb.w	r3, [r5], #1
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	429d      	cmp	r5, r3
 80099ec:	4606      	mov	r6, r0
 80099ee:	460f      	mov	r7, r1
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	d134      	bne.n	8009a60 <_dtoa_r+0x660>
 80099f6:	4b19      	ldr	r3, [pc, #100]	; (8009a5c <_dtoa_r+0x65c>)
 80099f8:	ec51 0b18 	vmov	r0, r1, d8
 80099fc:	f7f6 fc46 	bl	800028c <__adddf3>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f7f7 f886 	bl	8000b18 <__aeabi_dcmpgt>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d175      	bne.n	8009afc <_dtoa_r+0x6fc>
 8009a10:	ec53 2b18 	vmov	r2, r3, d8
 8009a14:	4911      	ldr	r1, [pc, #68]	; (8009a5c <_dtoa_r+0x65c>)
 8009a16:	2000      	movs	r0, #0
 8009a18:	f7f6 fc36 	bl	8000288 <__aeabi_dsub>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4630      	mov	r0, r6
 8009a22:	4639      	mov	r1, r7
 8009a24:	f7f7 f85a 	bl	8000adc <__aeabi_dcmplt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f43f af27 	beq.w	800987c <_dtoa_r+0x47c>
 8009a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a30:	1e6b      	subs	r3, r5, #1
 8009a32:	930c      	str	r3, [sp, #48]	; 0x30
 8009a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a38:	2b30      	cmp	r3, #48	; 0x30
 8009a3a:	d0f8      	beq.n	8009a2e <_dtoa_r+0x62e>
 8009a3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a40:	e04a      	b.n	8009ad8 <_dtoa_r+0x6d8>
 8009a42:	bf00      	nop
 8009a44:	0800b938 	.word	0x0800b938
 8009a48:	0800b910 	.word	0x0800b910
 8009a4c:	3ff00000 	.word	0x3ff00000
 8009a50:	40240000 	.word	0x40240000
 8009a54:	401c0000 	.word	0x401c0000
 8009a58:	40140000 	.word	0x40140000
 8009a5c:	3fe00000 	.word	0x3fe00000
 8009a60:	4baf      	ldr	r3, [pc, #700]	; (8009d20 <_dtoa_r+0x920>)
 8009a62:	f7f6 fdc9 	bl	80005f8 <__aeabi_dmul>
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	e7ac      	b.n	80099c6 <_dtoa_r+0x5c6>
 8009a6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a70:	9d00      	ldr	r5, [sp, #0]
 8009a72:	4642      	mov	r2, r8
 8009a74:	464b      	mov	r3, r9
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 fee7 	bl	800084c <__aeabi_ddiv>
 8009a7e:	f7f7 f86b 	bl	8000b58 <__aeabi_d2iz>
 8009a82:	9002      	str	r0, [sp, #8]
 8009a84:	f7f6 fd4e 	bl	8000524 <__aeabi_i2d>
 8009a88:	4642      	mov	r2, r8
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	f7f6 fdb4 	bl	80005f8 <__aeabi_dmul>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f6 fbf6 	bl	8000288 <__aeabi_dsub>
 8009a9c:	9e02      	ldr	r6, [sp, #8]
 8009a9e:	9f01      	ldr	r7, [sp, #4]
 8009aa0:	3630      	adds	r6, #48	; 0x30
 8009aa2:	f805 6b01 	strb.w	r6, [r5], #1
 8009aa6:	9e00      	ldr	r6, [sp, #0]
 8009aa8:	1bae      	subs	r6, r5, r6
 8009aaa:	42b7      	cmp	r7, r6
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	d137      	bne.n	8009b22 <_dtoa_r+0x722>
 8009ab2:	f7f6 fbeb 	bl	800028c <__adddf3>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	464b      	mov	r3, r9
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	f7f7 f82b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ac2:	b9c8      	cbnz	r0, 8009af8 <_dtoa_r+0x6f8>
 8009ac4:	4642      	mov	r2, r8
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ad0:	b110      	cbz	r0, 8009ad8 <_dtoa_r+0x6d8>
 8009ad2:	9b02      	ldr	r3, [sp, #8]
 8009ad4:	07d9      	lsls	r1, r3, #31
 8009ad6:	d40f      	bmi.n	8009af8 <_dtoa_r+0x6f8>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4659      	mov	r1, fp
 8009adc:	f000 fad6 	bl	800a08c <_Bfree>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	702b      	strb	r3, [r5, #0]
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ae6:	f10a 0001 	add.w	r0, sl, #1
 8009aea:	6018      	str	r0, [r3, #0]
 8009aec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f43f acd8 	beq.w	80094a4 <_dtoa_r+0xa4>
 8009af4:	601d      	str	r5, [r3, #0]
 8009af6:	e4d5      	b.n	80094a4 <_dtoa_r+0xa4>
 8009af8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009afc:	462b      	mov	r3, r5
 8009afe:	461d      	mov	r5, r3
 8009b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b04:	2a39      	cmp	r2, #57	; 0x39
 8009b06:	d108      	bne.n	8009b1a <_dtoa_r+0x71a>
 8009b08:	9a00      	ldr	r2, [sp, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d1f7      	bne.n	8009afe <_dtoa_r+0x6fe>
 8009b0e:	9a07      	ldr	r2, [sp, #28]
 8009b10:	9900      	ldr	r1, [sp, #0]
 8009b12:	3201      	adds	r2, #1
 8009b14:	9207      	str	r2, [sp, #28]
 8009b16:	2230      	movs	r2, #48	; 0x30
 8009b18:	700a      	strb	r2, [r1, #0]
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	3201      	adds	r2, #1
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	e78c      	b.n	8009a3c <_dtoa_r+0x63c>
 8009b22:	4b7f      	ldr	r3, [pc, #508]	; (8009d20 <_dtoa_r+0x920>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f7f6 ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d09b      	beq.n	8009a72 <_dtoa_r+0x672>
 8009b3a:	e7cd      	b.n	8009ad8 <_dtoa_r+0x6d8>
 8009b3c:	9a08      	ldr	r2, [sp, #32]
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	f000 80c4 	beq.w	8009ccc <_dtoa_r+0x8cc>
 8009b44:	9a05      	ldr	r2, [sp, #20]
 8009b46:	2a01      	cmp	r2, #1
 8009b48:	f300 80a8 	bgt.w	8009c9c <_dtoa_r+0x89c>
 8009b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	f000 80a0 	beq.w	8009c94 <_dtoa_r+0x894>
 8009b54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b58:	9e06      	ldr	r6, [sp, #24]
 8009b5a:	4645      	mov	r5, r8
 8009b5c:	9a04      	ldr	r2, [sp, #16]
 8009b5e:	2101      	movs	r1, #1
 8009b60:	441a      	add	r2, r3
 8009b62:	4620      	mov	r0, r4
 8009b64:	4498      	add	r8, r3
 8009b66:	9204      	str	r2, [sp, #16]
 8009b68:	f000 fb4c 	bl	800a204 <__i2b>
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	dd0b      	ble.n	8009b8a <_dtoa_r+0x78a>
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd08      	ble.n	8009b8a <_dtoa_r+0x78a>
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	9a04      	ldr	r2, [sp, #16]
 8009b7c:	bfa8      	it	ge
 8009b7e:	462b      	movge	r3, r5
 8009b80:	eba8 0803 	sub.w	r8, r8, r3
 8009b84:	1aed      	subs	r5, r5, r3
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	b1fb      	cbz	r3, 8009bce <_dtoa_r+0x7ce>
 8009b8e:	9b08      	ldr	r3, [sp, #32]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 809f 	beq.w	8009cd4 <_dtoa_r+0x8d4>
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	dd11      	ble.n	8009bbe <_dtoa_r+0x7be>
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 fbec 	bl	800a37c <__pow5mult>
 8009ba4:	465a      	mov	r2, fp
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fb40 	bl	800a230 <__multiply>
 8009bb0:	4659      	mov	r1, fp
 8009bb2:	9007      	str	r0, [sp, #28]
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 fa69 	bl	800a08c <_Bfree>
 8009bba:	9b07      	ldr	r3, [sp, #28]
 8009bbc:	469b      	mov	fp, r3
 8009bbe:	9b06      	ldr	r3, [sp, #24]
 8009bc0:	1b9a      	subs	r2, r3, r6
 8009bc2:	d004      	beq.n	8009bce <_dtoa_r+0x7ce>
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fbd8 	bl	800a37c <__pow5mult>
 8009bcc:	4683      	mov	fp, r0
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 fb17 	bl	800a204 <__i2b>
 8009bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	4606      	mov	r6, r0
 8009bdc:	dd7c      	ble.n	8009cd8 <_dtoa_r+0x8d8>
 8009bde:	461a      	mov	r2, r3
 8009be0:	4601      	mov	r1, r0
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 fbca 	bl	800a37c <__pow5mult>
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	4606      	mov	r6, r0
 8009bee:	dd76      	ble.n	8009cde <_dtoa_r+0x8de>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9306      	str	r3, [sp, #24]
 8009bf4:	6933      	ldr	r3, [r6, #16]
 8009bf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bfa:	6918      	ldr	r0, [r3, #16]
 8009bfc:	f000 fab2 	bl	800a164 <__hi0bits>
 8009c00:	f1c0 0020 	rsb	r0, r0, #32
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	4418      	add	r0, r3
 8009c08:	f010 001f 	ands.w	r0, r0, #31
 8009c0c:	f000 8086 	beq.w	8009d1c <_dtoa_r+0x91c>
 8009c10:	f1c0 0320 	rsb	r3, r0, #32
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	dd7f      	ble.n	8009d18 <_dtoa_r+0x918>
 8009c18:	f1c0 001c 	rsb	r0, r0, #28
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	4403      	add	r3, r0
 8009c20:	4480      	add	r8, r0
 8009c22:	4405      	add	r5, r0
 8009c24:	9304      	str	r3, [sp, #16]
 8009c26:	f1b8 0f00 	cmp.w	r8, #0
 8009c2a:	dd05      	ble.n	8009c38 <_dtoa_r+0x838>
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	4642      	mov	r2, r8
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 fbfd 	bl	800a430 <__lshift>
 8009c36:	4683      	mov	fp, r0
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dd05      	ble.n	8009c4a <_dtoa_r+0x84a>
 8009c3e:	4631      	mov	r1, r6
 8009c40:	461a      	mov	r2, r3
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fbf4 	bl	800a430 <__lshift>
 8009c48:	4606      	mov	r6, r0
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d069      	beq.n	8009d24 <_dtoa_r+0x924>
 8009c50:	4631      	mov	r1, r6
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 fc58 	bl	800a508 <__mcmp>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	da63      	bge.n	8009d24 <_dtoa_r+0x924>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4659      	mov	r1, fp
 8009c60:	220a      	movs	r2, #10
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fa34 	bl	800a0d0 <__multadd>
 8009c68:	9b08      	ldr	r3, [sp, #32]
 8009c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c6e:	4683      	mov	fp, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 818f 	beq.w	8009f94 <_dtoa_r+0xb94>
 8009c76:	4639      	mov	r1, r7
 8009c78:	2300      	movs	r3, #0
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fa27 	bl	800a0d0 <__multadd>
 8009c82:	f1b9 0f00 	cmp.w	r9, #0
 8009c86:	4607      	mov	r7, r0
 8009c88:	f300 808e 	bgt.w	8009da8 <_dtoa_r+0x9a8>
 8009c8c:	9b05      	ldr	r3, [sp, #20]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	dc50      	bgt.n	8009d34 <_dtoa_r+0x934>
 8009c92:	e089      	b.n	8009da8 <_dtoa_r+0x9a8>
 8009c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c9a:	e75d      	b.n	8009b58 <_dtoa_r+0x758>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	1e5e      	subs	r6, r3, #1
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	42b3      	cmp	r3, r6
 8009ca4:	bfbf      	itttt	lt
 8009ca6:	9b06      	ldrlt	r3, [sp, #24]
 8009ca8:	9606      	strlt	r6, [sp, #24]
 8009caa:	1af2      	sublt	r2, r6, r3
 8009cac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009cae:	bfb6      	itet	lt
 8009cb0:	189b      	addlt	r3, r3, r2
 8009cb2:	1b9e      	subge	r6, r3, r6
 8009cb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	bfb8      	it	lt
 8009cba:	2600      	movlt	r6, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb5      	itete	lt
 8009cc0:	eba8 0503 	sublt.w	r5, r8, r3
 8009cc4:	9b01      	ldrge	r3, [sp, #4]
 8009cc6:	2300      	movlt	r3, #0
 8009cc8:	4645      	movge	r5, r8
 8009cca:	e747      	b.n	8009b5c <_dtoa_r+0x75c>
 8009ccc:	9e06      	ldr	r6, [sp, #24]
 8009cce:	9f08      	ldr	r7, [sp, #32]
 8009cd0:	4645      	mov	r5, r8
 8009cd2:	e74c      	b.n	8009b6e <_dtoa_r+0x76e>
 8009cd4:	9a06      	ldr	r2, [sp, #24]
 8009cd6:	e775      	b.n	8009bc4 <_dtoa_r+0x7c4>
 8009cd8:	9b05      	ldr	r3, [sp, #20]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	dc18      	bgt.n	8009d10 <_dtoa_r+0x910>
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	b9b3      	cbnz	r3, 8009d10 <_dtoa_r+0x910>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ce8:	b9a3      	cbnz	r3, 8009d14 <_dtoa_r+0x914>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cf0:	0d1b      	lsrs	r3, r3, #20
 8009cf2:	051b      	lsls	r3, r3, #20
 8009cf4:	b12b      	cbz	r3, 8009d02 <_dtoa_r+0x902>
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	f108 0801 	add.w	r8, r8, #1
 8009d00:	2301      	movs	r3, #1
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f47f af74 	bne.w	8009bf4 <_dtoa_r+0x7f4>
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	e779      	b.n	8009c04 <_dtoa_r+0x804>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e7f6      	b.n	8009d02 <_dtoa_r+0x902>
 8009d14:	9b02      	ldr	r3, [sp, #8]
 8009d16:	e7f4      	b.n	8009d02 <_dtoa_r+0x902>
 8009d18:	d085      	beq.n	8009c26 <_dtoa_r+0x826>
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	301c      	adds	r0, #28
 8009d1e:	e77d      	b.n	8009c1c <_dtoa_r+0x81c>
 8009d20:	40240000 	.word	0x40240000
 8009d24:	9b01      	ldr	r3, [sp, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dc38      	bgt.n	8009d9c <_dtoa_r+0x99c>
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	dd35      	ble.n	8009d9c <_dtoa_r+0x99c>
 8009d30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	d10d      	bne.n	8009d56 <_dtoa_r+0x956>
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	464b      	mov	r3, r9
 8009d3e:	2205      	movs	r2, #5
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 f9c5 	bl	800a0d0 <__multadd>
 8009d46:	4601      	mov	r1, r0
 8009d48:	4606      	mov	r6, r0
 8009d4a:	4658      	mov	r0, fp
 8009d4c:	f000 fbdc 	bl	800a508 <__mcmp>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f73f adbd 	bgt.w	80098d0 <_dtoa_r+0x4d0>
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	9d00      	ldr	r5, [sp, #0]
 8009d5a:	ea6f 0a03 	mvn.w	sl, r3
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	4631      	mov	r1, r6
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 f991 	bl	800a08c <_Bfree>
 8009d6a:	2f00      	cmp	r7, #0
 8009d6c:	f43f aeb4 	beq.w	8009ad8 <_dtoa_r+0x6d8>
 8009d70:	f1b8 0f00 	cmp.w	r8, #0
 8009d74:	d005      	beq.n	8009d82 <_dtoa_r+0x982>
 8009d76:	45b8      	cmp	r8, r7
 8009d78:	d003      	beq.n	8009d82 <_dtoa_r+0x982>
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 f985 	bl	800a08c <_Bfree>
 8009d82:	4639      	mov	r1, r7
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 f981 	bl	800a08c <_Bfree>
 8009d8a:	e6a5      	b.n	8009ad8 <_dtoa_r+0x6d8>
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	4637      	mov	r7, r6
 8009d90:	e7e1      	b.n	8009d56 <_dtoa_r+0x956>
 8009d92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d98:	4637      	mov	r7, r6
 8009d9a:	e599      	b.n	80098d0 <_dtoa_r+0x4d0>
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80fd 	beq.w	8009fa2 <_dtoa_r+0xba2>
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	dd05      	ble.n	8009db8 <_dtoa_r+0x9b8>
 8009dac:	4639      	mov	r1, r7
 8009dae:	462a      	mov	r2, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fb3d 	bl	800a430 <__lshift>
 8009db6:	4607      	mov	r7, r0
 8009db8:	9b06      	ldr	r3, [sp, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d05c      	beq.n	8009e78 <_dtoa_r+0xa78>
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f923 	bl	800a00c <_Balloc>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b928      	cbnz	r0, 8009dd6 <_dtoa_r+0x9d6>
 8009dca:	4b80      	ldr	r3, [pc, #512]	; (8009fcc <_dtoa_r+0xbcc>)
 8009dcc:	4602      	mov	r2, r0
 8009dce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dd2:	f7ff bb2e 	b.w	8009432 <_dtoa_r+0x32>
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	3202      	adds	r2, #2
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	f107 010c 	add.w	r1, r7, #12
 8009de0:	300c      	adds	r0, #12
 8009de2:	f000 f905 	bl	8009ff0 <memcpy>
 8009de6:	2201      	movs	r2, #1
 8009de8:	4629      	mov	r1, r5
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fb20 	bl	800a430 <__lshift>
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	9b00      	ldr	r3, [sp, #0]
 8009df8:	444b      	add	r3, r9
 8009dfa:	9307      	str	r3, [sp, #28]
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	46b8      	mov	r8, r7
 8009e04:	9306      	str	r3, [sp, #24]
 8009e06:	4607      	mov	r7, r0
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4658      	mov	r0, fp
 8009e10:	9302      	str	r3, [sp, #8]
 8009e12:	f7ff fa69 	bl	80092e8 <quorem>
 8009e16:	4603      	mov	r3, r0
 8009e18:	3330      	adds	r3, #48	; 0x30
 8009e1a:	9004      	str	r0, [sp, #16]
 8009e1c:	4641      	mov	r1, r8
 8009e1e:	4658      	mov	r0, fp
 8009e20:	9308      	str	r3, [sp, #32]
 8009e22:	f000 fb71 	bl	800a508 <__mcmp>
 8009e26:	463a      	mov	r2, r7
 8009e28:	4681      	mov	r9, r0
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fb87 	bl	800a540 <__mdiff>
 8009e32:	68c2      	ldr	r2, [r0, #12]
 8009e34:	9b08      	ldr	r3, [sp, #32]
 8009e36:	4605      	mov	r5, r0
 8009e38:	bb02      	cbnz	r2, 8009e7c <_dtoa_r+0xa7c>
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4658      	mov	r0, fp
 8009e3e:	f000 fb63 	bl	800a508 <__mcmp>
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	4602      	mov	r2, r0
 8009e46:	4629      	mov	r1, r5
 8009e48:	4620      	mov	r0, r4
 8009e4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009e4e:	f000 f91d 	bl	800a08c <_Bfree>
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e56:	9d01      	ldr	r5, [sp, #4]
 8009e58:	ea43 0102 	orr.w	r1, r3, r2
 8009e5c:	9b06      	ldr	r3, [sp, #24]
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	d10d      	bne.n	8009e80 <_dtoa_r+0xa80>
 8009e64:	2b39      	cmp	r3, #57	; 0x39
 8009e66:	d029      	beq.n	8009ebc <_dtoa_r+0xabc>
 8009e68:	f1b9 0f00 	cmp.w	r9, #0
 8009e6c:	dd01      	ble.n	8009e72 <_dtoa_r+0xa72>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	3331      	adds	r3, #49	; 0x31
 8009e72:	9a02      	ldr	r2, [sp, #8]
 8009e74:	7013      	strb	r3, [r2, #0]
 8009e76:	e774      	b.n	8009d62 <_dtoa_r+0x962>
 8009e78:	4638      	mov	r0, r7
 8009e7a:	e7b9      	b.n	8009df0 <_dtoa_r+0x9f0>
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	e7e2      	b.n	8009e46 <_dtoa_r+0xa46>
 8009e80:	f1b9 0f00 	cmp.w	r9, #0
 8009e84:	db06      	blt.n	8009e94 <_dtoa_r+0xa94>
 8009e86:	9905      	ldr	r1, [sp, #20]
 8009e88:	ea41 0909 	orr.w	r9, r1, r9
 8009e8c:	9906      	ldr	r1, [sp, #24]
 8009e8e:	ea59 0101 	orrs.w	r1, r9, r1
 8009e92:	d120      	bne.n	8009ed6 <_dtoa_r+0xad6>
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	ddec      	ble.n	8009e72 <_dtoa_r+0xa72>
 8009e98:	4659      	mov	r1, fp
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	f000 fac6 	bl	800a430 <__lshift>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4683      	mov	fp, r0
 8009ea8:	f000 fb2e 	bl	800a508 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	dc02      	bgt.n	8009eb8 <_dtoa_r+0xab8>
 8009eb2:	d1de      	bne.n	8009e72 <_dtoa_r+0xa72>
 8009eb4:	07da      	lsls	r2, r3, #31
 8009eb6:	d5dc      	bpl.n	8009e72 <_dtoa_r+0xa72>
 8009eb8:	2b39      	cmp	r3, #57	; 0x39
 8009eba:	d1d8      	bne.n	8009e6e <_dtoa_r+0xa6e>
 8009ebc:	9a02      	ldr	r2, [sp, #8]
 8009ebe:	2339      	movs	r3, #57	; 0x39
 8009ec0:	7013      	strb	r3, [r2, #0]
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	461d      	mov	r5, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ecc:	2a39      	cmp	r2, #57	; 0x39
 8009ece:	d050      	beq.n	8009f72 <_dtoa_r+0xb72>
 8009ed0:	3201      	adds	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e745      	b.n	8009d62 <_dtoa_r+0x962>
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	dd03      	ble.n	8009ee2 <_dtoa_r+0xae2>
 8009eda:	2b39      	cmp	r3, #57	; 0x39
 8009edc:	d0ee      	beq.n	8009ebc <_dtoa_r+0xabc>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	e7c7      	b.n	8009e72 <_dtoa_r+0xa72>
 8009ee2:	9a01      	ldr	r2, [sp, #4]
 8009ee4:	9907      	ldr	r1, [sp, #28]
 8009ee6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eea:	428a      	cmp	r2, r1
 8009eec:	d02a      	beq.n	8009f44 <_dtoa_r+0xb44>
 8009eee:	4659      	mov	r1, fp
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f8eb 	bl	800a0d0 <__multadd>
 8009efa:	45b8      	cmp	r8, r7
 8009efc:	4683      	mov	fp, r0
 8009efe:	f04f 0300 	mov.w	r3, #0
 8009f02:	f04f 020a 	mov.w	r2, #10
 8009f06:	4641      	mov	r1, r8
 8009f08:	4620      	mov	r0, r4
 8009f0a:	d107      	bne.n	8009f1c <_dtoa_r+0xb1c>
 8009f0c:	f000 f8e0 	bl	800a0d0 <__multadd>
 8009f10:	4680      	mov	r8, r0
 8009f12:	4607      	mov	r7, r0
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	3301      	adds	r3, #1
 8009f18:	9301      	str	r3, [sp, #4]
 8009f1a:	e775      	b.n	8009e08 <_dtoa_r+0xa08>
 8009f1c:	f000 f8d8 	bl	800a0d0 <__multadd>
 8009f20:	4639      	mov	r1, r7
 8009f22:	4680      	mov	r8, r0
 8009f24:	2300      	movs	r3, #0
 8009f26:	220a      	movs	r2, #10
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 f8d1 	bl	800a0d0 <__multadd>
 8009f2e:	4607      	mov	r7, r0
 8009f30:	e7f0      	b.n	8009f14 <_dtoa_r+0xb14>
 8009f32:	f1b9 0f00 	cmp.w	r9, #0
 8009f36:	9a00      	ldr	r2, [sp, #0]
 8009f38:	bfcc      	ite	gt
 8009f3a:	464d      	movgt	r5, r9
 8009f3c:	2501      	movle	r5, #1
 8009f3e:	4415      	add	r5, r2
 8009f40:	f04f 0800 	mov.w	r8, #0
 8009f44:	4659      	mov	r1, fp
 8009f46:	2201      	movs	r2, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	f000 fa70 	bl	800a430 <__lshift>
 8009f50:	4631      	mov	r1, r6
 8009f52:	4683      	mov	fp, r0
 8009f54:	f000 fad8 	bl	800a508 <__mcmp>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	dcb2      	bgt.n	8009ec2 <_dtoa_r+0xac2>
 8009f5c:	d102      	bne.n	8009f64 <_dtoa_r+0xb64>
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	07db      	lsls	r3, r3, #31
 8009f62:	d4ae      	bmi.n	8009ec2 <_dtoa_r+0xac2>
 8009f64:	462b      	mov	r3, r5
 8009f66:	461d      	mov	r5, r3
 8009f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f6c:	2a30      	cmp	r2, #48	; 0x30
 8009f6e:	d0fa      	beq.n	8009f66 <_dtoa_r+0xb66>
 8009f70:	e6f7      	b.n	8009d62 <_dtoa_r+0x962>
 8009f72:	9a00      	ldr	r2, [sp, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d1a5      	bne.n	8009ec4 <_dtoa_r+0xac4>
 8009f78:	f10a 0a01 	add.w	sl, sl, #1
 8009f7c:	2331      	movs	r3, #49	; 0x31
 8009f7e:	e779      	b.n	8009e74 <_dtoa_r+0xa74>
 8009f80:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <_dtoa_r+0xbd0>)
 8009f82:	f7ff baaf 	b.w	80094e4 <_dtoa_r+0xe4>
 8009f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f47f aa86 	bne.w	800949a <_dtoa_r+0x9a>
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <_dtoa_r+0xbd4>)
 8009f90:	f7ff baa8 	b.w	80094e4 <_dtoa_r+0xe4>
 8009f94:	f1b9 0f00 	cmp.w	r9, #0
 8009f98:	dc03      	bgt.n	8009fa2 <_dtoa_r+0xba2>
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	f73f aec9 	bgt.w	8009d34 <_dtoa_r+0x934>
 8009fa2:	9d00      	ldr	r5, [sp, #0]
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	f7ff f99e 	bl	80092e8 <quorem>
 8009fac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009fb0:	f805 3b01 	strb.w	r3, [r5], #1
 8009fb4:	9a00      	ldr	r2, [sp, #0]
 8009fb6:	1aaa      	subs	r2, r5, r2
 8009fb8:	4591      	cmp	r9, r2
 8009fba:	ddba      	ble.n	8009f32 <_dtoa_r+0xb32>
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	220a      	movs	r2, #10
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f884 	bl	800a0d0 <__multadd>
 8009fc8:	4683      	mov	fp, r0
 8009fca:	e7eb      	b.n	8009fa4 <_dtoa_r+0xba4>
 8009fcc:	0800b89b 	.word	0x0800b89b
 8009fd0:	0800b7f4 	.word	0x0800b7f4
 8009fd4:	0800b818 	.word	0x0800b818

08009fd8 <_localeconv_r>:
 8009fd8:	4800      	ldr	r0, [pc, #0]	; (8009fdc <_localeconv_r+0x4>)
 8009fda:	4770      	bx	lr
 8009fdc:	200002e4 	.word	0x200002e4

08009fe0 <malloc>:
 8009fe0:	4b02      	ldr	r3, [pc, #8]	; (8009fec <malloc+0xc>)
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f000 bbef 	b.w	800a7c8 <_malloc_r>
 8009fea:	bf00      	nop
 8009fec:	20000190 	.word	0x20000190

08009ff0 <memcpy>:
 8009ff0:	440a      	add	r2, r1
 8009ff2:	4291      	cmp	r1, r2
 8009ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff8:	d100      	bne.n	8009ffc <memcpy+0xc>
 8009ffa:	4770      	bx	lr
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a006:	4291      	cmp	r1, r2
 800a008:	d1f9      	bne.n	8009ffe <memcpy+0xe>
 800a00a:	bd10      	pop	{r4, pc}

0800a00c <_Balloc>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a010:	4604      	mov	r4, r0
 800a012:	460d      	mov	r5, r1
 800a014:	b976      	cbnz	r6, 800a034 <_Balloc+0x28>
 800a016:	2010      	movs	r0, #16
 800a018:	f7ff ffe2 	bl	8009fe0 <malloc>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6260      	str	r0, [r4, #36]	; 0x24
 800a020:	b920      	cbnz	r0, 800a02c <_Balloc+0x20>
 800a022:	4b18      	ldr	r3, [pc, #96]	; (800a084 <_Balloc+0x78>)
 800a024:	4818      	ldr	r0, [pc, #96]	; (800a088 <_Balloc+0x7c>)
 800a026:	2166      	movs	r1, #102	; 0x66
 800a028:	f000 fd94 	bl	800ab54 <__assert_func>
 800a02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a030:	6006      	str	r6, [r0, #0]
 800a032:	60c6      	str	r6, [r0, #12]
 800a034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a036:	68f3      	ldr	r3, [r6, #12]
 800a038:	b183      	cbz	r3, 800a05c <_Balloc+0x50>
 800a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a042:	b9b8      	cbnz	r0, 800a074 <_Balloc+0x68>
 800a044:	2101      	movs	r1, #1
 800a046:	fa01 f605 	lsl.w	r6, r1, r5
 800a04a:	1d72      	adds	r2, r6, #5
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fb5a 	bl	800a708 <_calloc_r>
 800a054:	b160      	cbz	r0, 800a070 <_Balloc+0x64>
 800a056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a05a:	e00e      	b.n	800a07a <_Balloc+0x6e>
 800a05c:	2221      	movs	r2, #33	; 0x21
 800a05e:	2104      	movs	r1, #4
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fb51 	bl	800a708 <_calloc_r>
 800a066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a068:	60f0      	str	r0, [r6, #12]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e4      	bne.n	800a03a <_Balloc+0x2e>
 800a070:	2000      	movs	r0, #0
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	6802      	ldr	r2, [r0, #0]
 800a076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a07a:	2300      	movs	r3, #0
 800a07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a080:	e7f7      	b.n	800a072 <_Balloc+0x66>
 800a082:	bf00      	nop
 800a084:	0800b825 	.word	0x0800b825
 800a088:	0800b8ac 	.word	0x0800b8ac

0800a08c <_Bfree>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a090:	4605      	mov	r5, r0
 800a092:	460c      	mov	r4, r1
 800a094:	b976      	cbnz	r6, 800a0b4 <_Bfree+0x28>
 800a096:	2010      	movs	r0, #16
 800a098:	f7ff ffa2 	bl	8009fe0 <malloc>
 800a09c:	4602      	mov	r2, r0
 800a09e:	6268      	str	r0, [r5, #36]	; 0x24
 800a0a0:	b920      	cbnz	r0, 800a0ac <_Bfree+0x20>
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <_Bfree+0x3c>)
 800a0a4:	4809      	ldr	r0, [pc, #36]	; (800a0cc <_Bfree+0x40>)
 800a0a6:	218a      	movs	r1, #138	; 0x8a
 800a0a8:	f000 fd54 	bl	800ab54 <__assert_func>
 800a0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0b0:	6006      	str	r6, [r0, #0]
 800a0b2:	60c6      	str	r6, [r0, #12]
 800a0b4:	b13c      	cbz	r4, 800a0c6 <_Bfree+0x3a>
 800a0b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0b8:	6862      	ldr	r2, [r4, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0c0:	6021      	str	r1, [r4, #0]
 800a0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	0800b825 	.word	0x0800b825
 800a0cc:	0800b8ac 	.word	0x0800b8ac

0800a0d0 <__multadd>:
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	690e      	ldr	r6, [r1, #16]
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	4698      	mov	r8, r3
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f101 0014 	add.w	r0, r1, #20
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6805      	ldr	r5, [r0, #0]
 800a0e4:	b2a9      	uxth	r1, r5
 800a0e6:	fb02 8101 	mla	r1, r2, r1, r8
 800a0ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a0ee:	0c2d      	lsrs	r5, r5, #16
 800a0f0:	fb02 c505 	mla	r5, r2, r5, ip
 800a0f4:	b289      	uxth	r1, r1
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	f840 1b04 	str.w	r1, [r0], #4
 800a102:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a106:	dcec      	bgt.n	800a0e2 <__multadd+0x12>
 800a108:	f1b8 0f00 	cmp.w	r8, #0
 800a10c:	d022      	beq.n	800a154 <__multadd+0x84>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	42b3      	cmp	r3, r6
 800a112:	dc19      	bgt.n	800a148 <__multadd+0x78>
 800a114:	6861      	ldr	r1, [r4, #4]
 800a116:	4638      	mov	r0, r7
 800a118:	3101      	adds	r1, #1
 800a11a:	f7ff ff77 	bl	800a00c <_Balloc>
 800a11e:	4605      	mov	r5, r0
 800a120:	b928      	cbnz	r0, 800a12e <__multadd+0x5e>
 800a122:	4602      	mov	r2, r0
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <__multadd+0x8c>)
 800a126:	480e      	ldr	r0, [pc, #56]	; (800a160 <__multadd+0x90>)
 800a128:	21b5      	movs	r1, #181	; 0xb5
 800a12a:	f000 fd13 	bl	800ab54 <__assert_func>
 800a12e:	6922      	ldr	r2, [r4, #16]
 800a130:	3202      	adds	r2, #2
 800a132:	f104 010c 	add.w	r1, r4, #12
 800a136:	0092      	lsls	r2, r2, #2
 800a138:	300c      	adds	r0, #12
 800a13a:	f7ff ff59 	bl	8009ff0 <memcpy>
 800a13e:	4621      	mov	r1, r4
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ffa3 	bl	800a08c <_Bfree>
 800a146:	462c      	mov	r4, r5
 800a148:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a14c:	3601      	adds	r6, #1
 800a14e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a152:	6126      	str	r6, [r4, #16]
 800a154:	4620      	mov	r0, r4
 800a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15a:	bf00      	nop
 800a15c:	0800b89b 	.word	0x0800b89b
 800a160:	0800b8ac 	.word	0x0800b8ac

0800a164 <__hi0bits>:
 800a164:	0c03      	lsrs	r3, r0, #16
 800a166:	041b      	lsls	r3, r3, #16
 800a168:	b9d3      	cbnz	r3, 800a1a0 <__hi0bits+0x3c>
 800a16a:	0400      	lsls	r0, r0, #16
 800a16c:	2310      	movs	r3, #16
 800a16e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a172:	bf04      	itt	eq
 800a174:	0200      	lsleq	r0, r0, #8
 800a176:	3308      	addeq	r3, #8
 800a178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a17c:	bf04      	itt	eq
 800a17e:	0100      	lsleq	r0, r0, #4
 800a180:	3304      	addeq	r3, #4
 800a182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a186:	bf04      	itt	eq
 800a188:	0080      	lsleq	r0, r0, #2
 800a18a:	3302      	addeq	r3, #2
 800a18c:	2800      	cmp	r0, #0
 800a18e:	db05      	blt.n	800a19c <__hi0bits+0x38>
 800a190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a194:	f103 0301 	add.w	r3, r3, #1
 800a198:	bf08      	it	eq
 800a19a:	2320      	moveq	r3, #32
 800a19c:	4618      	mov	r0, r3
 800a19e:	4770      	bx	lr
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e7e4      	b.n	800a16e <__hi0bits+0xa>

0800a1a4 <__lo0bits>:
 800a1a4:	6803      	ldr	r3, [r0, #0]
 800a1a6:	f013 0207 	ands.w	r2, r3, #7
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	d00b      	beq.n	800a1c6 <__lo0bits+0x22>
 800a1ae:	07da      	lsls	r2, r3, #31
 800a1b0:	d424      	bmi.n	800a1fc <__lo0bits+0x58>
 800a1b2:	0798      	lsls	r0, r3, #30
 800a1b4:	bf49      	itett	mi
 800a1b6:	085b      	lsrmi	r3, r3, #1
 800a1b8:	089b      	lsrpl	r3, r3, #2
 800a1ba:	2001      	movmi	r0, #1
 800a1bc:	600b      	strmi	r3, [r1, #0]
 800a1be:	bf5c      	itt	pl
 800a1c0:	600b      	strpl	r3, [r1, #0]
 800a1c2:	2002      	movpl	r0, #2
 800a1c4:	4770      	bx	lr
 800a1c6:	b298      	uxth	r0, r3
 800a1c8:	b9b0      	cbnz	r0, 800a1f8 <__lo0bits+0x54>
 800a1ca:	0c1b      	lsrs	r3, r3, #16
 800a1cc:	2010      	movs	r0, #16
 800a1ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1d2:	bf04      	itt	eq
 800a1d4:	0a1b      	lsreq	r3, r3, #8
 800a1d6:	3008      	addeq	r0, #8
 800a1d8:	071a      	lsls	r2, r3, #28
 800a1da:	bf04      	itt	eq
 800a1dc:	091b      	lsreq	r3, r3, #4
 800a1de:	3004      	addeq	r0, #4
 800a1e0:	079a      	lsls	r2, r3, #30
 800a1e2:	bf04      	itt	eq
 800a1e4:	089b      	lsreq	r3, r3, #2
 800a1e6:	3002      	addeq	r0, #2
 800a1e8:	07da      	lsls	r2, r3, #31
 800a1ea:	d403      	bmi.n	800a1f4 <__lo0bits+0x50>
 800a1ec:	085b      	lsrs	r3, r3, #1
 800a1ee:	f100 0001 	add.w	r0, r0, #1
 800a1f2:	d005      	beq.n	800a200 <__lo0bits+0x5c>
 800a1f4:	600b      	str	r3, [r1, #0]
 800a1f6:	4770      	bx	lr
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	e7e8      	b.n	800a1ce <__lo0bits+0x2a>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	4770      	bx	lr
 800a200:	2020      	movs	r0, #32
 800a202:	4770      	bx	lr

0800a204 <__i2b>:
 800a204:	b510      	push	{r4, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	2101      	movs	r1, #1
 800a20a:	f7ff feff 	bl	800a00c <_Balloc>
 800a20e:	4602      	mov	r2, r0
 800a210:	b928      	cbnz	r0, 800a21e <__i2b+0x1a>
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <__i2b+0x24>)
 800a214:	4805      	ldr	r0, [pc, #20]	; (800a22c <__i2b+0x28>)
 800a216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a21a:	f000 fc9b 	bl	800ab54 <__assert_func>
 800a21e:	2301      	movs	r3, #1
 800a220:	6144      	str	r4, [r0, #20]
 800a222:	6103      	str	r3, [r0, #16]
 800a224:	bd10      	pop	{r4, pc}
 800a226:	bf00      	nop
 800a228:	0800b89b 	.word	0x0800b89b
 800a22c:	0800b8ac 	.word	0x0800b8ac

0800a230 <__multiply>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	4614      	mov	r4, r2
 800a236:	690a      	ldr	r2, [r1, #16]
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	bfb8      	it	lt
 800a23e:	460b      	movlt	r3, r1
 800a240:	460d      	mov	r5, r1
 800a242:	bfbc      	itt	lt
 800a244:	4625      	movlt	r5, r4
 800a246:	461c      	movlt	r4, r3
 800a248:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a24c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a250:	68ab      	ldr	r3, [r5, #8]
 800a252:	6869      	ldr	r1, [r5, #4]
 800a254:	eb0a 0709 	add.w	r7, sl, r9
 800a258:	42bb      	cmp	r3, r7
 800a25a:	b085      	sub	sp, #20
 800a25c:	bfb8      	it	lt
 800a25e:	3101      	addlt	r1, #1
 800a260:	f7ff fed4 	bl	800a00c <_Balloc>
 800a264:	b930      	cbnz	r0, 800a274 <__multiply+0x44>
 800a266:	4602      	mov	r2, r0
 800a268:	4b42      	ldr	r3, [pc, #264]	; (800a374 <__multiply+0x144>)
 800a26a:	4843      	ldr	r0, [pc, #268]	; (800a378 <__multiply+0x148>)
 800a26c:	f240 115d 	movw	r1, #349	; 0x15d
 800a270:	f000 fc70 	bl	800ab54 <__assert_func>
 800a274:	f100 0614 	add.w	r6, r0, #20
 800a278:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a27c:	4633      	mov	r3, r6
 800a27e:	2200      	movs	r2, #0
 800a280:	4543      	cmp	r3, r8
 800a282:	d31e      	bcc.n	800a2c2 <__multiply+0x92>
 800a284:	f105 0c14 	add.w	ip, r5, #20
 800a288:	f104 0314 	add.w	r3, r4, #20
 800a28c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a290:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a294:	9202      	str	r2, [sp, #8]
 800a296:	ebac 0205 	sub.w	r2, ip, r5
 800a29a:	3a15      	subs	r2, #21
 800a29c:	f022 0203 	bic.w	r2, r2, #3
 800a2a0:	3204      	adds	r2, #4
 800a2a2:	f105 0115 	add.w	r1, r5, #21
 800a2a6:	458c      	cmp	ip, r1
 800a2a8:	bf38      	it	cc
 800a2aa:	2204      	movcc	r2, #4
 800a2ac:	9201      	str	r2, [sp, #4]
 800a2ae:	9a02      	ldr	r2, [sp, #8]
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d808      	bhi.n	800a2c8 <__multiply+0x98>
 800a2b6:	2f00      	cmp	r7, #0
 800a2b8:	dc55      	bgt.n	800a366 <__multiply+0x136>
 800a2ba:	6107      	str	r7, [r0, #16]
 800a2bc:	b005      	add	sp, #20
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	f843 2b04 	str.w	r2, [r3], #4
 800a2c6:	e7db      	b.n	800a280 <__multiply+0x50>
 800a2c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2cc:	f1ba 0f00 	cmp.w	sl, #0
 800a2d0:	d020      	beq.n	800a314 <__multiply+0xe4>
 800a2d2:	f105 0e14 	add.w	lr, r5, #20
 800a2d6:	46b1      	mov	r9, r6
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a2de:	f8d9 b000 	ldr.w	fp, [r9]
 800a2e2:	b2a1      	uxth	r1, r4
 800a2e4:	fa1f fb8b 	uxth.w	fp, fp
 800a2e8:	fb0a b101 	mla	r1, sl, r1, fp
 800a2ec:	4411      	add	r1, r2
 800a2ee:	f8d9 2000 	ldr.w	r2, [r9]
 800a2f2:	0c24      	lsrs	r4, r4, #16
 800a2f4:	0c12      	lsrs	r2, r2, #16
 800a2f6:	fb0a 2404 	mla	r4, sl, r4, r2
 800a2fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a2fe:	b289      	uxth	r1, r1
 800a300:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a304:	45f4      	cmp	ip, lr
 800a306:	f849 1b04 	str.w	r1, [r9], #4
 800a30a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a30e:	d8e4      	bhi.n	800a2da <__multiply+0xaa>
 800a310:	9901      	ldr	r1, [sp, #4]
 800a312:	5072      	str	r2, [r6, r1]
 800a314:	9a03      	ldr	r2, [sp, #12]
 800a316:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a31a:	3304      	adds	r3, #4
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	d01f      	beq.n	800a362 <__multiply+0x132>
 800a322:	6834      	ldr	r4, [r6, #0]
 800a324:	f105 0114 	add.w	r1, r5, #20
 800a328:	46b6      	mov	lr, r6
 800a32a:	f04f 0a00 	mov.w	sl, #0
 800a32e:	880a      	ldrh	r2, [r1, #0]
 800a330:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a334:	fb09 b202 	mla	r2, r9, r2, fp
 800a338:	4492      	add	sl, r2
 800a33a:	b2a4      	uxth	r4, r4
 800a33c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a340:	f84e 4b04 	str.w	r4, [lr], #4
 800a344:	f851 4b04 	ldr.w	r4, [r1], #4
 800a348:	f8be 2000 	ldrh.w	r2, [lr]
 800a34c:	0c24      	lsrs	r4, r4, #16
 800a34e:	fb09 2404 	mla	r4, r9, r4, r2
 800a352:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a356:	458c      	cmp	ip, r1
 800a358:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a35c:	d8e7      	bhi.n	800a32e <__multiply+0xfe>
 800a35e:	9a01      	ldr	r2, [sp, #4]
 800a360:	50b4      	str	r4, [r6, r2]
 800a362:	3604      	adds	r6, #4
 800a364:	e7a3      	b.n	800a2ae <__multiply+0x7e>
 800a366:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1a5      	bne.n	800a2ba <__multiply+0x8a>
 800a36e:	3f01      	subs	r7, #1
 800a370:	e7a1      	b.n	800a2b6 <__multiply+0x86>
 800a372:	bf00      	nop
 800a374:	0800b89b 	.word	0x0800b89b
 800a378:	0800b8ac 	.word	0x0800b8ac

0800a37c <__pow5mult>:
 800a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a380:	4615      	mov	r5, r2
 800a382:	f012 0203 	ands.w	r2, r2, #3
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	d007      	beq.n	800a39c <__pow5mult+0x20>
 800a38c:	4c25      	ldr	r4, [pc, #148]	; (800a424 <__pow5mult+0xa8>)
 800a38e:	3a01      	subs	r2, #1
 800a390:	2300      	movs	r3, #0
 800a392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a396:	f7ff fe9b 	bl	800a0d0 <__multadd>
 800a39a:	4607      	mov	r7, r0
 800a39c:	10ad      	asrs	r5, r5, #2
 800a39e:	d03d      	beq.n	800a41c <__pow5mult+0xa0>
 800a3a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3a2:	b97c      	cbnz	r4, 800a3c4 <__pow5mult+0x48>
 800a3a4:	2010      	movs	r0, #16
 800a3a6:	f7ff fe1b 	bl	8009fe0 <malloc>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a3ae:	b928      	cbnz	r0, 800a3bc <__pow5mult+0x40>
 800a3b0:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <__pow5mult+0xac>)
 800a3b2:	481e      	ldr	r0, [pc, #120]	; (800a42c <__pow5mult+0xb0>)
 800a3b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3b8:	f000 fbcc 	bl	800ab54 <__assert_func>
 800a3bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3c0:	6004      	str	r4, [r0, #0]
 800a3c2:	60c4      	str	r4, [r0, #12]
 800a3c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3cc:	b94c      	cbnz	r4, 800a3e2 <__pow5mult+0x66>
 800a3ce:	f240 2171 	movw	r1, #625	; 0x271
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ff16 	bl	800a204 <__i2b>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3de:	4604      	mov	r4, r0
 800a3e0:	6003      	str	r3, [r0, #0]
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	07eb      	lsls	r3, r5, #31
 800a3e8:	d50a      	bpl.n	800a400 <__pow5mult+0x84>
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	4622      	mov	r2, r4
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ff1e 	bl	800a230 <__multiply>
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f7ff fe47 	bl	800a08c <_Bfree>
 800a3fe:	4647      	mov	r7, r8
 800a400:	106d      	asrs	r5, r5, #1
 800a402:	d00b      	beq.n	800a41c <__pow5mult+0xa0>
 800a404:	6820      	ldr	r0, [r4, #0]
 800a406:	b938      	cbnz	r0, 800a418 <__pow5mult+0x9c>
 800a408:	4622      	mov	r2, r4
 800a40a:	4621      	mov	r1, r4
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff ff0f 	bl	800a230 <__multiply>
 800a412:	6020      	str	r0, [r4, #0]
 800a414:	f8c0 9000 	str.w	r9, [r0]
 800a418:	4604      	mov	r4, r0
 800a41a:	e7e4      	b.n	800a3e6 <__pow5mult+0x6a>
 800a41c:	4638      	mov	r0, r7
 800a41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a422:	bf00      	nop
 800a424:	0800ba00 	.word	0x0800ba00
 800a428:	0800b825 	.word	0x0800b825
 800a42c:	0800b8ac 	.word	0x0800b8ac

0800a430 <__lshift>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	460c      	mov	r4, r1
 800a436:	6849      	ldr	r1, [r1, #4]
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	4607      	mov	r7, r0
 800a442:	4691      	mov	r9, r2
 800a444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a448:	f108 0601 	add.w	r6, r8, #1
 800a44c:	42b3      	cmp	r3, r6
 800a44e:	db0b      	blt.n	800a468 <__lshift+0x38>
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff fddb 	bl	800a00c <_Balloc>
 800a456:	4605      	mov	r5, r0
 800a458:	b948      	cbnz	r0, 800a46e <__lshift+0x3e>
 800a45a:	4602      	mov	r2, r0
 800a45c:	4b28      	ldr	r3, [pc, #160]	; (800a500 <__lshift+0xd0>)
 800a45e:	4829      	ldr	r0, [pc, #164]	; (800a504 <__lshift+0xd4>)
 800a460:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a464:	f000 fb76 	bl	800ab54 <__assert_func>
 800a468:	3101      	adds	r1, #1
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	e7ee      	b.n	800a44c <__lshift+0x1c>
 800a46e:	2300      	movs	r3, #0
 800a470:	f100 0114 	add.w	r1, r0, #20
 800a474:	f100 0210 	add.w	r2, r0, #16
 800a478:	4618      	mov	r0, r3
 800a47a:	4553      	cmp	r3, sl
 800a47c:	db33      	blt.n	800a4e6 <__lshift+0xb6>
 800a47e:	6920      	ldr	r0, [r4, #16]
 800a480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a484:	f104 0314 	add.w	r3, r4, #20
 800a488:	f019 091f 	ands.w	r9, r9, #31
 800a48c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a494:	d02b      	beq.n	800a4ee <__lshift+0xbe>
 800a496:	f1c9 0e20 	rsb	lr, r9, #32
 800a49a:	468a      	mov	sl, r1
 800a49c:	2200      	movs	r2, #0
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a4a4:	4302      	orrs	r2, r0
 800a4a6:	f84a 2b04 	str.w	r2, [sl], #4
 800a4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ae:	459c      	cmp	ip, r3
 800a4b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4b4:	d8f3      	bhi.n	800a49e <__lshift+0x6e>
 800a4b6:	ebac 0304 	sub.w	r3, ip, r4
 800a4ba:	3b15      	subs	r3, #21
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	f104 0015 	add.w	r0, r4, #21
 800a4c6:	4584      	cmp	ip, r0
 800a4c8:	bf38      	it	cc
 800a4ca:	2304      	movcc	r3, #4
 800a4cc:	50ca      	str	r2, [r1, r3]
 800a4ce:	b10a      	cbz	r2, 800a4d4 <__lshift+0xa4>
 800a4d0:	f108 0602 	add.w	r6, r8, #2
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	612e      	str	r6, [r5, #16]
 800a4da:	4621      	mov	r1, r4
 800a4dc:	f7ff fdd6 	bl	800a08c <_Bfree>
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	e7c5      	b.n	800a47a <__lshift+0x4a>
 800a4ee:	3904      	subs	r1, #4
 800a4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4f8:	459c      	cmp	ip, r3
 800a4fa:	d8f9      	bhi.n	800a4f0 <__lshift+0xc0>
 800a4fc:	e7ea      	b.n	800a4d4 <__lshift+0xa4>
 800a4fe:	bf00      	nop
 800a500:	0800b89b 	.word	0x0800b89b
 800a504:	0800b8ac 	.word	0x0800b8ac

0800a508 <__mcmp>:
 800a508:	b530      	push	{r4, r5, lr}
 800a50a:	6902      	ldr	r2, [r0, #16]
 800a50c:	690c      	ldr	r4, [r1, #16]
 800a50e:	1b12      	subs	r2, r2, r4
 800a510:	d10e      	bne.n	800a530 <__mcmp+0x28>
 800a512:	f100 0314 	add.w	r3, r0, #20
 800a516:	3114      	adds	r1, #20
 800a518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a528:	42a5      	cmp	r5, r4
 800a52a:	d003      	beq.n	800a534 <__mcmp+0x2c>
 800a52c:	d305      	bcc.n	800a53a <__mcmp+0x32>
 800a52e:	2201      	movs	r2, #1
 800a530:	4610      	mov	r0, r2
 800a532:	bd30      	pop	{r4, r5, pc}
 800a534:	4283      	cmp	r3, r0
 800a536:	d3f3      	bcc.n	800a520 <__mcmp+0x18>
 800a538:	e7fa      	b.n	800a530 <__mcmp+0x28>
 800a53a:	f04f 32ff 	mov.w	r2, #4294967295
 800a53e:	e7f7      	b.n	800a530 <__mcmp+0x28>

0800a540 <__mdiff>:
 800a540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	4606      	mov	r6, r0
 800a548:	4611      	mov	r1, r2
 800a54a:	4620      	mov	r0, r4
 800a54c:	4617      	mov	r7, r2
 800a54e:	f7ff ffdb 	bl	800a508 <__mcmp>
 800a552:	1e05      	subs	r5, r0, #0
 800a554:	d110      	bne.n	800a578 <__mdiff+0x38>
 800a556:	4629      	mov	r1, r5
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff fd57 	bl	800a00c <_Balloc>
 800a55e:	b930      	cbnz	r0, 800a56e <__mdiff+0x2e>
 800a560:	4b39      	ldr	r3, [pc, #228]	; (800a648 <__mdiff+0x108>)
 800a562:	4602      	mov	r2, r0
 800a564:	f240 2132 	movw	r1, #562	; 0x232
 800a568:	4838      	ldr	r0, [pc, #224]	; (800a64c <__mdiff+0x10c>)
 800a56a:	f000 faf3 	bl	800ab54 <__assert_func>
 800a56e:	2301      	movs	r3, #1
 800a570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a578:	bfa4      	itt	ge
 800a57a:	463b      	movge	r3, r7
 800a57c:	4627      	movge	r7, r4
 800a57e:	4630      	mov	r0, r6
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	bfa6      	itte	ge
 800a584:	461c      	movge	r4, r3
 800a586:	2500      	movge	r5, #0
 800a588:	2501      	movlt	r5, #1
 800a58a:	f7ff fd3f 	bl	800a00c <_Balloc>
 800a58e:	b920      	cbnz	r0, 800a59a <__mdiff+0x5a>
 800a590:	4b2d      	ldr	r3, [pc, #180]	; (800a648 <__mdiff+0x108>)
 800a592:	4602      	mov	r2, r0
 800a594:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a598:	e7e6      	b.n	800a568 <__mdiff+0x28>
 800a59a:	693e      	ldr	r6, [r7, #16]
 800a59c:	60c5      	str	r5, [r0, #12]
 800a59e:	6925      	ldr	r5, [r4, #16]
 800a5a0:	f107 0114 	add.w	r1, r7, #20
 800a5a4:	f104 0914 	add.w	r9, r4, #20
 800a5a8:	f100 0e14 	add.w	lr, r0, #20
 800a5ac:	f107 0210 	add.w	r2, r7, #16
 800a5b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a5b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a5b8:	46f2      	mov	sl, lr
 800a5ba:	2700      	movs	r7, #0
 800a5bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5c4:	fa1f f883 	uxth.w	r8, r3
 800a5c8:	fa17 f78b 	uxtah	r7, r7, fp
 800a5cc:	0c1b      	lsrs	r3, r3, #16
 800a5ce:	eba7 0808 	sub.w	r8, r7, r8
 800a5d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5da:	fa1f f888 	uxth.w	r8, r8
 800a5de:	141f      	asrs	r7, r3, #16
 800a5e0:	454d      	cmp	r5, r9
 800a5e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a5ea:	d8e7      	bhi.n	800a5bc <__mdiff+0x7c>
 800a5ec:	1b2b      	subs	r3, r5, r4
 800a5ee:	3b15      	subs	r3, #21
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	3415      	adds	r4, #21
 800a5f8:	42a5      	cmp	r5, r4
 800a5fa:	bf38      	it	cc
 800a5fc:	2304      	movcc	r3, #4
 800a5fe:	4419      	add	r1, r3
 800a600:	4473      	add	r3, lr
 800a602:	469e      	mov	lr, r3
 800a604:	460d      	mov	r5, r1
 800a606:	4565      	cmp	r5, ip
 800a608:	d30e      	bcc.n	800a628 <__mdiff+0xe8>
 800a60a:	f10c 0203 	add.w	r2, ip, #3
 800a60e:	1a52      	subs	r2, r2, r1
 800a610:	f022 0203 	bic.w	r2, r2, #3
 800a614:	3903      	subs	r1, #3
 800a616:	458c      	cmp	ip, r1
 800a618:	bf38      	it	cc
 800a61a:	2200      	movcc	r2, #0
 800a61c:	441a      	add	r2, r3
 800a61e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a622:	b17b      	cbz	r3, 800a644 <__mdiff+0x104>
 800a624:	6106      	str	r6, [r0, #16]
 800a626:	e7a5      	b.n	800a574 <__mdiff+0x34>
 800a628:	f855 8b04 	ldr.w	r8, [r5], #4
 800a62c:	fa17 f488 	uxtah	r4, r7, r8
 800a630:	1422      	asrs	r2, r4, #16
 800a632:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a636:	b2a4      	uxth	r4, r4
 800a638:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a63c:	f84e 4b04 	str.w	r4, [lr], #4
 800a640:	1417      	asrs	r7, r2, #16
 800a642:	e7e0      	b.n	800a606 <__mdiff+0xc6>
 800a644:	3e01      	subs	r6, #1
 800a646:	e7ea      	b.n	800a61e <__mdiff+0xde>
 800a648:	0800b89b 	.word	0x0800b89b
 800a64c:	0800b8ac 	.word	0x0800b8ac

0800a650 <__d2b>:
 800a650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a654:	4689      	mov	r9, r1
 800a656:	2101      	movs	r1, #1
 800a658:	ec57 6b10 	vmov	r6, r7, d0
 800a65c:	4690      	mov	r8, r2
 800a65e:	f7ff fcd5 	bl	800a00c <_Balloc>
 800a662:	4604      	mov	r4, r0
 800a664:	b930      	cbnz	r0, 800a674 <__d2b+0x24>
 800a666:	4602      	mov	r2, r0
 800a668:	4b25      	ldr	r3, [pc, #148]	; (800a700 <__d2b+0xb0>)
 800a66a:	4826      	ldr	r0, [pc, #152]	; (800a704 <__d2b+0xb4>)
 800a66c:	f240 310a 	movw	r1, #778	; 0x30a
 800a670:	f000 fa70 	bl	800ab54 <__assert_func>
 800a674:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a67c:	bb35      	cbnz	r5, 800a6cc <__d2b+0x7c>
 800a67e:	2e00      	cmp	r6, #0
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	d028      	beq.n	800a6d6 <__d2b+0x86>
 800a684:	4668      	mov	r0, sp
 800a686:	9600      	str	r6, [sp, #0]
 800a688:	f7ff fd8c 	bl	800a1a4 <__lo0bits>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	b300      	cbz	r0, 800a6d2 <__d2b+0x82>
 800a690:	9a01      	ldr	r2, [sp, #4]
 800a692:	f1c0 0320 	rsb	r3, r0, #32
 800a696:	fa02 f303 	lsl.w	r3, r2, r3
 800a69a:	430b      	orrs	r3, r1
 800a69c:	40c2      	lsrs	r2, r0
 800a69e:	6163      	str	r3, [r4, #20]
 800a6a0:	9201      	str	r2, [sp, #4]
 800a6a2:	9b01      	ldr	r3, [sp, #4]
 800a6a4:	61a3      	str	r3, [r4, #24]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bf14      	ite	ne
 800a6aa:	2202      	movne	r2, #2
 800a6ac:	2201      	moveq	r2, #1
 800a6ae:	6122      	str	r2, [r4, #16]
 800a6b0:	b1d5      	cbz	r5, 800a6e8 <__d2b+0x98>
 800a6b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6b6:	4405      	add	r5, r0
 800a6b8:	f8c9 5000 	str.w	r5, [r9]
 800a6bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6c0:	f8c8 0000 	str.w	r0, [r8]
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	b003      	add	sp, #12
 800a6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6d0:	e7d5      	b.n	800a67e <__d2b+0x2e>
 800a6d2:	6161      	str	r1, [r4, #20]
 800a6d4:	e7e5      	b.n	800a6a2 <__d2b+0x52>
 800a6d6:	a801      	add	r0, sp, #4
 800a6d8:	f7ff fd64 	bl	800a1a4 <__lo0bits>
 800a6dc:	9b01      	ldr	r3, [sp, #4]
 800a6de:	6163      	str	r3, [r4, #20]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	6122      	str	r2, [r4, #16]
 800a6e4:	3020      	adds	r0, #32
 800a6e6:	e7e3      	b.n	800a6b0 <__d2b+0x60>
 800a6e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6f0:	f8c9 0000 	str.w	r0, [r9]
 800a6f4:	6918      	ldr	r0, [r3, #16]
 800a6f6:	f7ff fd35 	bl	800a164 <__hi0bits>
 800a6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6fe:	e7df      	b.n	800a6c0 <__d2b+0x70>
 800a700:	0800b89b 	.word	0x0800b89b
 800a704:	0800b8ac 	.word	0x0800b8ac

0800a708 <_calloc_r>:
 800a708:	b513      	push	{r0, r1, r4, lr}
 800a70a:	434a      	muls	r2, r1
 800a70c:	4611      	mov	r1, r2
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	f000 f85a 	bl	800a7c8 <_malloc_r>
 800a714:	4604      	mov	r4, r0
 800a716:	b118      	cbz	r0, 800a720 <_calloc_r+0x18>
 800a718:	9a01      	ldr	r2, [sp, #4]
 800a71a:	2100      	movs	r1, #0
 800a71c:	f7fe f93e 	bl	800899c <memset>
 800a720:	4620      	mov	r0, r4
 800a722:	b002      	add	sp, #8
 800a724:	bd10      	pop	{r4, pc}
	...

0800a728 <_free_r>:
 800a728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d048      	beq.n	800a7c0 <_free_r+0x98>
 800a72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a732:	9001      	str	r0, [sp, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f1a1 0404 	sub.w	r4, r1, #4
 800a73a:	bfb8      	it	lt
 800a73c:	18e4      	addlt	r4, r4, r3
 800a73e:	f000 fa65 	bl	800ac0c <__malloc_lock>
 800a742:	4a20      	ldr	r2, [pc, #128]	; (800a7c4 <_free_r+0x9c>)
 800a744:	9801      	ldr	r0, [sp, #4]
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	4615      	mov	r5, r2
 800a74a:	b933      	cbnz	r3, 800a75a <_free_r+0x32>
 800a74c:	6063      	str	r3, [r4, #4]
 800a74e:	6014      	str	r4, [r2, #0]
 800a750:	b003      	add	sp, #12
 800a752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a756:	f000 ba5f 	b.w	800ac18 <__malloc_unlock>
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	d90b      	bls.n	800a776 <_free_r+0x4e>
 800a75e:	6821      	ldr	r1, [r4, #0]
 800a760:	1862      	adds	r2, r4, r1
 800a762:	4293      	cmp	r3, r2
 800a764:	bf04      	itt	eq
 800a766:	681a      	ldreq	r2, [r3, #0]
 800a768:	685b      	ldreq	r3, [r3, #4]
 800a76a:	6063      	str	r3, [r4, #4]
 800a76c:	bf04      	itt	eq
 800a76e:	1852      	addeq	r2, r2, r1
 800a770:	6022      	streq	r2, [r4, #0]
 800a772:	602c      	str	r4, [r5, #0]
 800a774:	e7ec      	b.n	800a750 <_free_r+0x28>
 800a776:	461a      	mov	r2, r3
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	b10b      	cbz	r3, 800a780 <_free_r+0x58>
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d9fa      	bls.n	800a776 <_free_r+0x4e>
 800a780:	6811      	ldr	r1, [r2, #0]
 800a782:	1855      	adds	r5, r2, r1
 800a784:	42a5      	cmp	r5, r4
 800a786:	d10b      	bne.n	800a7a0 <_free_r+0x78>
 800a788:	6824      	ldr	r4, [r4, #0]
 800a78a:	4421      	add	r1, r4
 800a78c:	1854      	adds	r4, r2, r1
 800a78e:	42a3      	cmp	r3, r4
 800a790:	6011      	str	r1, [r2, #0]
 800a792:	d1dd      	bne.n	800a750 <_free_r+0x28>
 800a794:	681c      	ldr	r4, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	6053      	str	r3, [r2, #4]
 800a79a:	4421      	add	r1, r4
 800a79c:	6011      	str	r1, [r2, #0]
 800a79e:	e7d7      	b.n	800a750 <_free_r+0x28>
 800a7a0:	d902      	bls.n	800a7a8 <_free_r+0x80>
 800a7a2:	230c      	movs	r3, #12
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	e7d3      	b.n	800a750 <_free_r+0x28>
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	1961      	adds	r1, r4, r5
 800a7ac:	428b      	cmp	r3, r1
 800a7ae:	bf04      	itt	eq
 800a7b0:	6819      	ldreq	r1, [r3, #0]
 800a7b2:	685b      	ldreq	r3, [r3, #4]
 800a7b4:	6063      	str	r3, [r4, #4]
 800a7b6:	bf04      	itt	eq
 800a7b8:	1949      	addeq	r1, r1, r5
 800a7ba:	6021      	streq	r1, [r4, #0]
 800a7bc:	6054      	str	r4, [r2, #4]
 800a7be:	e7c7      	b.n	800a750 <_free_r+0x28>
 800a7c0:	b003      	add	sp, #12
 800a7c2:	bd30      	pop	{r4, r5, pc}
 800a7c4:	200005a4 	.word	0x200005a4

0800a7c8 <_malloc_r>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	1ccd      	adds	r5, r1, #3
 800a7cc:	f025 0503 	bic.w	r5, r5, #3
 800a7d0:	3508      	adds	r5, #8
 800a7d2:	2d0c      	cmp	r5, #12
 800a7d4:	bf38      	it	cc
 800a7d6:	250c      	movcc	r5, #12
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	4606      	mov	r6, r0
 800a7dc:	db01      	blt.n	800a7e2 <_malloc_r+0x1a>
 800a7de:	42a9      	cmp	r1, r5
 800a7e0:	d903      	bls.n	800a7ea <_malloc_r+0x22>
 800a7e2:	230c      	movs	r3, #12
 800a7e4:	6033      	str	r3, [r6, #0]
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ea:	f000 fa0f 	bl	800ac0c <__malloc_lock>
 800a7ee:	4921      	ldr	r1, [pc, #132]	; (800a874 <_malloc_r+0xac>)
 800a7f0:	680a      	ldr	r2, [r1, #0]
 800a7f2:	4614      	mov	r4, r2
 800a7f4:	b99c      	cbnz	r4, 800a81e <_malloc_r+0x56>
 800a7f6:	4f20      	ldr	r7, [pc, #128]	; (800a878 <_malloc_r+0xb0>)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	b923      	cbnz	r3, 800a806 <_malloc_r+0x3e>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f998 	bl	800ab34 <_sbrk_r>
 800a804:	6038      	str	r0, [r7, #0]
 800a806:	4629      	mov	r1, r5
 800a808:	4630      	mov	r0, r6
 800a80a:	f000 f993 	bl	800ab34 <_sbrk_r>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	d123      	bne.n	800a85a <_malloc_r+0x92>
 800a812:	230c      	movs	r3, #12
 800a814:	6033      	str	r3, [r6, #0]
 800a816:	4630      	mov	r0, r6
 800a818:	f000 f9fe 	bl	800ac18 <__malloc_unlock>
 800a81c:	e7e3      	b.n	800a7e6 <_malloc_r+0x1e>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	1b5b      	subs	r3, r3, r5
 800a822:	d417      	bmi.n	800a854 <_malloc_r+0x8c>
 800a824:	2b0b      	cmp	r3, #11
 800a826:	d903      	bls.n	800a830 <_malloc_r+0x68>
 800a828:	6023      	str	r3, [r4, #0]
 800a82a:	441c      	add	r4, r3
 800a82c:	6025      	str	r5, [r4, #0]
 800a82e:	e004      	b.n	800a83a <_malloc_r+0x72>
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	42a2      	cmp	r2, r4
 800a834:	bf0c      	ite	eq
 800a836:	600b      	streq	r3, [r1, #0]
 800a838:	6053      	strne	r3, [r2, #4]
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 f9ec 	bl	800ac18 <__malloc_unlock>
 800a840:	f104 000b 	add.w	r0, r4, #11
 800a844:	1d23      	adds	r3, r4, #4
 800a846:	f020 0007 	bic.w	r0, r0, #7
 800a84a:	1ac2      	subs	r2, r0, r3
 800a84c:	d0cc      	beq.n	800a7e8 <_malloc_r+0x20>
 800a84e:	1a1b      	subs	r3, r3, r0
 800a850:	50a3      	str	r3, [r4, r2]
 800a852:	e7c9      	b.n	800a7e8 <_malloc_r+0x20>
 800a854:	4622      	mov	r2, r4
 800a856:	6864      	ldr	r4, [r4, #4]
 800a858:	e7cc      	b.n	800a7f4 <_malloc_r+0x2c>
 800a85a:	1cc4      	adds	r4, r0, #3
 800a85c:	f024 0403 	bic.w	r4, r4, #3
 800a860:	42a0      	cmp	r0, r4
 800a862:	d0e3      	beq.n	800a82c <_malloc_r+0x64>
 800a864:	1a21      	subs	r1, r4, r0
 800a866:	4630      	mov	r0, r6
 800a868:	f000 f964 	bl	800ab34 <_sbrk_r>
 800a86c:	3001      	adds	r0, #1
 800a86e:	d1dd      	bne.n	800a82c <_malloc_r+0x64>
 800a870:	e7cf      	b.n	800a812 <_malloc_r+0x4a>
 800a872:	bf00      	nop
 800a874:	200005a4 	.word	0x200005a4
 800a878:	200005a8 	.word	0x200005a8

0800a87c <__ssputs_r>:
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	688e      	ldr	r6, [r1, #8]
 800a882:	429e      	cmp	r6, r3
 800a884:	4682      	mov	sl, r0
 800a886:	460c      	mov	r4, r1
 800a888:	4690      	mov	r8, r2
 800a88a:	461f      	mov	r7, r3
 800a88c:	d838      	bhi.n	800a900 <__ssputs_r+0x84>
 800a88e:	898a      	ldrh	r2, [r1, #12]
 800a890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a894:	d032      	beq.n	800a8fc <__ssputs_r+0x80>
 800a896:	6825      	ldr	r5, [r4, #0]
 800a898:	6909      	ldr	r1, [r1, #16]
 800a89a:	eba5 0901 	sub.w	r9, r5, r1
 800a89e:	6965      	ldr	r5, [r4, #20]
 800a8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	444b      	add	r3, r9
 800a8ac:	106d      	asrs	r5, r5, #1
 800a8ae:	429d      	cmp	r5, r3
 800a8b0:	bf38      	it	cc
 800a8b2:	461d      	movcc	r5, r3
 800a8b4:	0553      	lsls	r3, r2, #21
 800a8b6:	d531      	bpl.n	800a91c <__ssputs_r+0xa0>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7ff ff85 	bl	800a7c8 <_malloc_r>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b950      	cbnz	r0, 800a8d8 <__ssputs_r+0x5c>
 800a8c2:	230c      	movs	r3, #12
 800a8c4:	f8ca 3000 	str.w	r3, [sl]
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ce:	81a3      	strh	r3, [r4, #12]
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d8:	6921      	ldr	r1, [r4, #16]
 800a8da:	464a      	mov	r2, r9
 800a8dc:	f7ff fb88 	bl	8009ff0 <memcpy>
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	6126      	str	r6, [r4, #16]
 800a8ee:	6165      	str	r5, [r4, #20]
 800a8f0:	444e      	add	r6, r9
 800a8f2:	eba5 0509 	sub.w	r5, r5, r9
 800a8f6:	6026      	str	r6, [r4, #0]
 800a8f8:	60a5      	str	r5, [r4, #8]
 800a8fa:	463e      	mov	r6, r7
 800a8fc:	42be      	cmp	r6, r7
 800a8fe:	d900      	bls.n	800a902 <__ssputs_r+0x86>
 800a900:	463e      	mov	r6, r7
 800a902:	4632      	mov	r2, r6
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	4641      	mov	r1, r8
 800a908:	f000 f966 	bl	800abd8 <memmove>
 800a90c:	68a3      	ldr	r3, [r4, #8]
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	1b9b      	subs	r3, r3, r6
 800a912:	4432      	add	r2, r6
 800a914:	60a3      	str	r3, [r4, #8]
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	2000      	movs	r0, #0
 800a91a:	e7db      	b.n	800a8d4 <__ssputs_r+0x58>
 800a91c:	462a      	mov	r2, r5
 800a91e:	f000 f981 	bl	800ac24 <_realloc_r>
 800a922:	4606      	mov	r6, r0
 800a924:	2800      	cmp	r0, #0
 800a926:	d1e1      	bne.n	800a8ec <__ssputs_r+0x70>
 800a928:	6921      	ldr	r1, [r4, #16]
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7ff fefc 	bl	800a728 <_free_r>
 800a930:	e7c7      	b.n	800a8c2 <__ssputs_r+0x46>
	...

0800a934 <_svfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	4698      	mov	r8, r3
 800a93a:	898b      	ldrh	r3, [r1, #12]
 800a93c:	061b      	lsls	r3, r3, #24
 800a93e:	b09d      	sub	sp, #116	; 0x74
 800a940:	4607      	mov	r7, r0
 800a942:	460d      	mov	r5, r1
 800a944:	4614      	mov	r4, r2
 800a946:	d50e      	bpl.n	800a966 <_svfiprintf_r+0x32>
 800a948:	690b      	ldr	r3, [r1, #16]
 800a94a:	b963      	cbnz	r3, 800a966 <_svfiprintf_r+0x32>
 800a94c:	2140      	movs	r1, #64	; 0x40
 800a94e:	f7ff ff3b 	bl	800a7c8 <_malloc_r>
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	6128      	str	r0, [r5, #16]
 800a956:	b920      	cbnz	r0, 800a962 <_svfiprintf_r+0x2e>
 800a958:	230c      	movs	r3, #12
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e0d1      	b.n	800ab06 <_svfiprintf_r+0x1d2>
 800a962:	2340      	movs	r3, #64	; 0x40
 800a964:	616b      	str	r3, [r5, #20]
 800a966:	2300      	movs	r3, #0
 800a968:	9309      	str	r3, [sp, #36]	; 0x24
 800a96a:	2320      	movs	r3, #32
 800a96c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a970:	f8cd 800c 	str.w	r8, [sp, #12]
 800a974:	2330      	movs	r3, #48	; 0x30
 800a976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab20 <_svfiprintf_r+0x1ec>
 800a97a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a97e:	f04f 0901 	mov.w	r9, #1
 800a982:	4623      	mov	r3, r4
 800a984:	469a      	mov	sl, r3
 800a986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98a:	b10a      	cbz	r2, 800a990 <_svfiprintf_r+0x5c>
 800a98c:	2a25      	cmp	r2, #37	; 0x25
 800a98e:	d1f9      	bne.n	800a984 <_svfiprintf_r+0x50>
 800a990:	ebba 0b04 	subs.w	fp, sl, r4
 800a994:	d00b      	beq.n	800a9ae <_svfiprintf_r+0x7a>
 800a996:	465b      	mov	r3, fp
 800a998:	4622      	mov	r2, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	4638      	mov	r0, r7
 800a99e:	f7ff ff6d 	bl	800a87c <__ssputs_r>
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f000 80aa 	beq.w	800aafc <_svfiprintf_r+0x1c8>
 800a9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9aa:	445a      	add	r2, fp
 800a9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 80a2 	beq.w	800aafc <_svfiprintf_r+0x1c8>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c2:	f10a 0a01 	add.w	sl, sl, #1
 800a9c6:	9304      	str	r3, [sp, #16]
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d0:	4654      	mov	r4, sl
 800a9d2:	2205      	movs	r2, #5
 800a9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9d8:	4851      	ldr	r0, [pc, #324]	; (800ab20 <_svfiprintf_r+0x1ec>)
 800a9da:	f7f5 fc01 	bl	80001e0 <memchr>
 800a9de:	9a04      	ldr	r2, [sp, #16]
 800a9e0:	b9d8      	cbnz	r0, 800aa1a <_svfiprintf_r+0xe6>
 800a9e2:	06d0      	lsls	r0, r2, #27
 800a9e4:	bf44      	itt	mi
 800a9e6:	2320      	movmi	r3, #32
 800a9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ec:	0711      	lsls	r1, r2, #28
 800a9ee:	bf44      	itt	mi
 800a9f0:	232b      	movmi	r3, #43	; 0x2b
 800a9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fc:	d015      	beq.n	800aa2a <_svfiprintf_r+0xf6>
 800a9fe:	9a07      	ldr	r2, [sp, #28]
 800aa00:	4654      	mov	r4, sl
 800aa02:	2000      	movs	r0, #0
 800aa04:	f04f 0c0a 	mov.w	ip, #10
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa0e:	3b30      	subs	r3, #48	; 0x30
 800aa10:	2b09      	cmp	r3, #9
 800aa12:	d94e      	bls.n	800aab2 <_svfiprintf_r+0x17e>
 800aa14:	b1b0      	cbz	r0, 800aa44 <_svfiprintf_r+0x110>
 800aa16:	9207      	str	r2, [sp, #28]
 800aa18:	e014      	b.n	800aa44 <_svfiprintf_r+0x110>
 800aa1a:	eba0 0308 	sub.w	r3, r0, r8
 800aa1e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa22:	4313      	orrs	r3, r2
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	46a2      	mov	sl, r4
 800aa28:	e7d2      	b.n	800a9d0 <_svfiprintf_r+0x9c>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	1d19      	adds	r1, r3, #4
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	9103      	str	r1, [sp, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bfbb      	ittet	lt
 800aa36:	425b      	neglt	r3, r3
 800aa38:	f042 0202 	orrlt.w	r2, r2, #2
 800aa3c:	9307      	strge	r3, [sp, #28]
 800aa3e:	9307      	strlt	r3, [sp, #28]
 800aa40:	bfb8      	it	lt
 800aa42:	9204      	strlt	r2, [sp, #16]
 800aa44:	7823      	ldrb	r3, [r4, #0]
 800aa46:	2b2e      	cmp	r3, #46	; 0x2e
 800aa48:	d10c      	bne.n	800aa64 <_svfiprintf_r+0x130>
 800aa4a:	7863      	ldrb	r3, [r4, #1]
 800aa4c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4e:	d135      	bne.n	800aabc <_svfiprintf_r+0x188>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	1d1a      	adds	r2, r3, #4
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	9203      	str	r2, [sp, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfb8      	it	lt
 800aa5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa60:	3402      	adds	r4, #2
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab30 <_svfiprintf_r+0x1fc>
 800aa68:	7821      	ldrb	r1, [r4, #0]
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	f7f5 fbb7 	bl	80001e0 <memchr>
 800aa72:	b140      	cbz	r0, 800aa86 <_svfiprintf_r+0x152>
 800aa74:	2340      	movs	r3, #64	; 0x40
 800aa76:	eba0 000a 	sub.w	r0, r0, sl
 800aa7a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	4303      	orrs	r3, r0
 800aa82:	3401      	adds	r4, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	4826      	ldr	r0, [pc, #152]	; (800ab24 <_svfiprintf_r+0x1f0>)
 800aa8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa90:	2206      	movs	r2, #6
 800aa92:	f7f5 fba5 	bl	80001e0 <memchr>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d038      	beq.n	800ab0c <_svfiprintf_r+0x1d8>
 800aa9a:	4b23      	ldr	r3, [pc, #140]	; (800ab28 <_svfiprintf_r+0x1f4>)
 800aa9c:	bb1b      	cbnz	r3, 800aae6 <_svfiprintf_r+0x1b2>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	3307      	adds	r3, #7
 800aaa2:	f023 0307 	bic.w	r3, r3, #7
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaac:	4433      	add	r3, r6
 800aaae:	9309      	str	r3, [sp, #36]	; 0x24
 800aab0:	e767      	b.n	800a982 <_svfiprintf_r+0x4e>
 800aab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab6:	460c      	mov	r4, r1
 800aab8:	2001      	movs	r0, #1
 800aaba:	e7a5      	b.n	800aa08 <_svfiprintf_r+0xd4>
 800aabc:	2300      	movs	r3, #0
 800aabe:	3401      	adds	r4, #1
 800aac0:	9305      	str	r3, [sp, #20]
 800aac2:	4619      	mov	r1, r3
 800aac4:	f04f 0c0a 	mov.w	ip, #10
 800aac8:	4620      	mov	r0, r4
 800aaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aace:	3a30      	subs	r2, #48	; 0x30
 800aad0:	2a09      	cmp	r2, #9
 800aad2:	d903      	bls.n	800aadc <_svfiprintf_r+0x1a8>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0c5      	beq.n	800aa64 <_svfiprintf_r+0x130>
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	e7c3      	b.n	800aa64 <_svfiprintf_r+0x130>
 800aadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae0:	4604      	mov	r4, r0
 800aae2:	2301      	movs	r3, #1
 800aae4:	e7f0      	b.n	800aac8 <_svfiprintf_r+0x194>
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <_svfiprintf_r+0x1f8>)
 800aaee:	a904      	add	r1, sp, #16
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f7fd fffb 	bl	8008aec <_printf_float>
 800aaf6:	1c42      	adds	r2, r0, #1
 800aaf8:	4606      	mov	r6, r0
 800aafa:	d1d6      	bne.n	800aaaa <_svfiprintf_r+0x176>
 800aafc:	89ab      	ldrh	r3, [r5, #12]
 800aafe:	065b      	lsls	r3, r3, #25
 800ab00:	f53f af2c 	bmi.w	800a95c <_svfiprintf_r+0x28>
 800ab04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab06:	b01d      	add	sp, #116	; 0x74
 800ab08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0c:	ab03      	add	r3, sp, #12
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	462a      	mov	r2, r5
 800ab12:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <_svfiprintf_r+0x1f8>)
 800ab14:	a904      	add	r1, sp, #16
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7fe fa8c 	bl	8009034 <_printf_i>
 800ab1c:	e7eb      	b.n	800aaf6 <_svfiprintf_r+0x1c2>
 800ab1e:	bf00      	nop
 800ab20:	0800ba0c 	.word	0x0800ba0c
 800ab24:	0800ba16 	.word	0x0800ba16
 800ab28:	08008aed 	.word	0x08008aed
 800ab2c:	0800a87d 	.word	0x0800a87d
 800ab30:	0800ba12 	.word	0x0800ba12

0800ab34 <_sbrk_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	; (800ab50 <_sbrk_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f6 fac8 	bl	80010d4 <_sbrk>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_sbrk_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_sbrk_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	200015c4 	.word	0x200015c4

0800ab54 <__assert_func>:
 800ab54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab56:	4614      	mov	r4, r2
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <__assert_func+0x2c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4605      	mov	r5, r0
 800ab60:	68d8      	ldr	r0, [r3, #12]
 800ab62:	b14c      	cbz	r4, 800ab78 <__assert_func+0x24>
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <__assert_func+0x30>)
 800ab66:	9100      	str	r1, [sp, #0]
 800ab68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab6c:	4906      	ldr	r1, [pc, #24]	; (800ab88 <__assert_func+0x34>)
 800ab6e:	462b      	mov	r3, r5
 800ab70:	f000 f80e 	bl	800ab90 <fiprintf>
 800ab74:	f000 faa4 	bl	800b0c0 <abort>
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <__assert_func+0x38>)
 800ab7a:	461c      	mov	r4, r3
 800ab7c:	e7f3      	b.n	800ab66 <__assert_func+0x12>
 800ab7e:	bf00      	nop
 800ab80:	20000190 	.word	0x20000190
 800ab84:	0800ba1d 	.word	0x0800ba1d
 800ab88:	0800ba2a 	.word	0x0800ba2a
 800ab8c:	0800ba58 	.word	0x0800ba58

0800ab90 <fiprintf>:
 800ab90:	b40e      	push	{r1, r2, r3}
 800ab92:	b503      	push	{r0, r1, lr}
 800ab94:	4601      	mov	r1, r0
 800ab96:	ab03      	add	r3, sp, #12
 800ab98:	4805      	ldr	r0, [pc, #20]	; (800abb0 <fiprintf+0x20>)
 800ab9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9e:	6800      	ldr	r0, [r0, #0]
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	f000 f88f 	bl	800acc4 <_vfiprintf_r>
 800aba6:	b002      	add	sp, #8
 800aba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abac:	b003      	add	sp, #12
 800abae:	4770      	bx	lr
 800abb0:	20000190 	.word	0x20000190

0800abb4 <__ascii_mbtowc>:
 800abb4:	b082      	sub	sp, #8
 800abb6:	b901      	cbnz	r1, 800abba <__ascii_mbtowc+0x6>
 800abb8:	a901      	add	r1, sp, #4
 800abba:	b142      	cbz	r2, 800abce <__ascii_mbtowc+0x1a>
 800abbc:	b14b      	cbz	r3, 800abd2 <__ascii_mbtowc+0x1e>
 800abbe:	7813      	ldrb	r3, [r2, #0]
 800abc0:	600b      	str	r3, [r1, #0]
 800abc2:	7812      	ldrb	r2, [r2, #0]
 800abc4:	1e10      	subs	r0, r2, #0
 800abc6:	bf18      	it	ne
 800abc8:	2001      	movne	r0, #1
 800abca:	b002      	add	sp, #8
 800abcc:	4770      	bx	lr
 800abce:	4610      	mov	r0, r2
 800abd0:	e7fb      	b.n	800abca <__ascii_mbtowc+0x16>
 800abd2:	f06f 0001 	mvn.w	r0, #1
 800abd6:	e7f8      	b.n	800abca <__ascii_mbtowc+0x16>

0800abd8 <memmove>:
 800abd8:	4288      	cmp	r0, r1
 800abda:	b510      	push	{r4, lr}
 800abdc:	eb01 0402 	add.w	r4, r1, r2
 800abe0:	d902      	bls.n	800abe8 <memmove+0x10>
 800abe2:	4284      	cmp	r4, r0
 800abe4:	4623      	mov	r3, r4
 800abe6:	d807      	bhi.n	800abf8 <memmove+0x20>
 800abe8:	1e43      	subs	r3, r0, #1
 800abea:	42a1      	cmp	r1, r4
 800abec:	d008      	beq.n	800ac00 <memmove+0x28>
 800abee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abf6:	e7f8      	b.n	800abea <memmove+0x12>
 800abf8:	4402      	add	r2, r0
 800abfa:	4601      	mov	r1, r0
 800abfc:	428a      	cmp	r2, r1
 800abfe:	d100      	bne.n	800ac02 <memmove+0x2a>
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac0a:	e7f7      	b.n	800abfc <memmove+0x24>

0800ac0c <__malloc_lock>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	; (800ac14 <__malloc_lock+0x8>)
 800ac0e:	f000 bc17 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	200015cc 	.word	0x200015cc

0800ac18 <__malloc_unlock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__malloc_unlock+0x8>)
 800ac1a:	f000 bc12 	b.w	800b442 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	200015cc 	.word	0x200015cc

0800ac24 <_realloc_r>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	4607      	mov	r7, r0
 800ac28:	4614      	mov	r4, r2
 800ac2a:	460e      	mov	r6, r1
 800ac2c:	b921      	cbnz	r1, 800ac38 <_realloc_r+0x14>
 800ac2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac32:	4611      	mov	r1, r2
 800ac34:	f7ff bdc8 	b.w	800a7c8 <_malloc_r>
 800ac38:	b922      	cbnz	r2, 800ac44 <_realloc_r+0x20>
 800ac3a:	f7ff fd75 	bl	800a728 <_free_r>
 800ac3e:	4625      	mov	r5, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	f000 fc62 	bl	800b50c <_malloc_usable_size_r>
 800ac48:	42a0      	cmp	r0, r4
 800ac4a:	d20f      	bcs.n	800ac6c <_realloc_r+0x48>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff fdba 	bl	800a7c8 <_malloc_r>
 800ac54:	4605      	mov	r5, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d0f2      	beq.n	800ac40 <_realloc_r+0x1c>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	f7ff f9c7 	bl	8009ff0 <memcpy>
 800ac62:	4631      	mov	r1, r6
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff fd5f 	bl	800a728 <_free_r>
 800ac6a:	e7e9      	b.n	800ac40 <_realloc_r+0x1c>
 800ac6c:	4635      	mov	r5, r6
 800ac6e:	e7e7      	b.n	800ac40 <_realloc_r+0x1c>

0800ac70 <__sfputc_r>:
 800ac70:	6893      	ldr	r3, [r2, #8]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	b410      	push	{r4}
 800ac78:	6093      	str	r3, [r2, #8]
 800ac7a:	da08      	bge.n	800ac8e <__sfputc_r+0x1e>
 800ac7c:	6994      	ldr	r4, [r2, #24]
 800ac7e:	42a3      	cmp	r3, r4
 800ac80:	db01      	blt.n	800ac86 <__sfputc_r+0x16>
 800ac82:	290a      	cmp	r1, #10
 800ac84:	d103      	bne.n	800ac8e <__sfputc_r+0x1e>
 800ac86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac8a:	f000 b94b 	b.w	800af24 <__swbuf_r>
 800ac8e:	6813      	ldr	r3, [r2, #0]
 800ac90:	1c58      	adds	r0, r3, #1
 800ac92:	6010      	str	r0, [r2, #0]
 800ac94:	7019      	strb	r1, [r3, #0]
 800ac96:	4608      	mov	r0, r1
 800ac98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <__sfputs_r>:
 800ac9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca0:	4606      	mov	r6, r0
 800aca2:	460f      	mov	r7, r1
 800aca4:	4614      	mov	r4, r2
 800aca6:	18d5      	adds	r5, r2, r3
 800aca8:	42ac      	cmp	r4, r5
 800acaa:	d101      	bne.n	800acb0 <__sfputs_r+0x12>
 800acac:	2000      	movs	r0, #0
 800acae:	e007      	b.n	800acc0 <__sfputs_r+0x22>
 800acb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb4:	463a      	mov	r2, r7
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff ffda 	bl	800ac70 <__sfputc_r>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d1f3      	bne.n	800aca8 <__sfputs_r+0xa>
 800acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acc4 <_vfiprintf_r>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	460d      	mov	r5, r1
 800acca:	b09d      	sub	sp, #116	; 0x74
 800accc:	4614      	mov	r4, r2
 800acce:	4698      	mov	r8, r3
 800acd0:	4606      	mov	r6, r0
 800acd2:	b118      	cbz	r0, 800acdc <_vfiprintf_r+0x18>
 800acd4:	6983      	ldr	r3, [r0, #24]
 800acd6:	b90b      	cbnz	r3, 800acdc <_vfiprintf_r+0x18>
 800acd8:	f000 fb14 	bl	800b304 <__sinit>
 800acdc:	4b89      	ldr	r3, [pc, #548]	; (800af04 <_vfiprintf_r+0x240>)
 800acde:	429d      	cmp	r5, r3
 800ace0:	d11b      	bne.n	800ad1a <_vfiprintf_r+0x56>
 800ace2:	6875      	ldr	r5, [r6, #4]
 800ace4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace6:	07d9      	lsls	r1, r3, #31
 800ace8:	d405      	bmi.n	800acf6 <_vfiprintf_r+0x32>
 800acea:	89ab      	ldrh	r3, [r5, #12]
 800acec:	059a      	lsls	r2, r3, #22
 800acee:	d402      	bmi.n	800acf6 <_vfiprintf_r+0x32>
 800acf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acf2:	f000 fba5 	bl	800b440 <__retarget_lock_acquire_recursive>
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	071b      	lsls	r3, r3, #28
 800acfa:	d501      	bpl.n	800ad00 <_vfiprintf_r+0x3c>
 800acfc:	692b      	ldr	r3, [r5, #16]
 800acfe:	b9eb      	cbnz	r3, 800ad3c <_vfiprintf_r+0x78>
 800ad00:	4629      	mov	r1, r5
 800ad02:	4630      	mov	r0, r6
 800ad04:	f000 f96e 	bl	800afe4 <__swsetup_r>
 800ad08:	b1c0      	cbz	r0, 800ad3c <_vfiprintf_r+0x78>
 800ad0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad0c:	07dc      	lsls	r4, r3, #31
 800ad0e:	d50e      	bpl.n	800ad2e <_vfiprintf_r+0x6a>
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	b01d      	add	sp, #116	; 0x74
 800ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1a:	4b7b      	ldr	r3, [pc, #492]	; (800af08 <_vfiprintf_r+0x244>)
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	d101      	bne.n	800ad24 <_vfiprintf_r+0x60>
 800ad20:	68b5      	ldr	r5, [r6, #8]
 800ad22:	e7df      	b.n	800ace4 <_vfiprintf_r+0x20>
 800ad24:	4b79      	ldr	r3, [pc, #484]	; (800af0c <_vfiprintf_r+0x248>)
 800ad26:	429d      	cmp	r5, r3
 800ad28:	bf08      	it	eq
 800ad2a:	68f5      	ldreq	r5, [r6, #12]
 800ad2c:	e7da      	b.n	800ace4 <_vfiprintf_r+0x20>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	0598      	lsls	r0, r3, #22
 800ad32:	d4ed      	bmi.n	800ad10 <_vfiprintf_r+0x4c>
 800ad34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad36:	f000 fb84 	bl	800b442 <__retarget_lock_release_recursive>
 800ad3a:	e7e9      	b.n	800ad10 <_vfiprintf_r+0x4c>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad40:	2320      	movs	r3, #32
 800ad42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad4a:	2330      	movs	r3, #48	; 0x30
 800ad4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af10 <_vfiprintf_r+0x24c>
 800ad50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad54:	f04f 0901 	mov.w	r9, #1
 800ad58:	4623      	mov	r3, r4
 800ad5a:	469a      	mov	sl, r3
 800ad5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad60:	b10a      	cbz	r2, 800ad66 <_vfiprintf_r+0xa2>
 800ad62:	2a25      	cmp	r2, #37	; 0x25
 800ad64:	d1f9      	bne.n	800ad5a <_vfiprintf_r+0x96>
 800ad66:	ebba 0b04 	subs.w	fp, sl, r4
 800ad6a:	d00b      	beq.n	800ad84 <_vfiprintf_r+0xc0>
 800ad6c:	465b      	mov	r3, fp
 800ad6e:	4622      	mov	r2, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7ff ff93 	bl	800ac9e <__sfputs_r>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f000 80aa 	beq.w	800aed2 <_vfiprintf_r+0x20e>
 800ad7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad80:	445a      	add	r2, fp
 800ad82:	9209      	str	r2, [sp, #36]	; 0x24
 800ad84:	f89a 3000 	ldrb.w	r3, [sl]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80a2 	beq.w	800aed2 <_vfiprintf_r+0x20e>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295
 800ad94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad98:	f10a 0a01 	add.w	sl, sl, #1
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	9307      	str	r3, [sp, #28]
 800ada0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ada4:	931a      	str	r3, [sp, #104]	; 0x68
 800ada6:	4654      	mov	r4, sl
 800ada8:	2205      	movs	r2, #5
 800adaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adae:	4858      	ldr	r0, [pc, #352]	; (800af10 <_vfiprintf_r+0x24c>)
 800adb0:	f7f5 fa16 	bl	80001e0 <memchr>
 800adb4:	9a04      	ldr	r2, [sp, #16]
 800adb6:	b9d8      	cbnz	r0, 800adf0 <_vfiprintf_r+0x12c>
 800adb8:	06d1      	lsls	r1, r2, #27
 800adba:	bf44      	itt	mi
 800adbc:	2320      	movmi	r3, #32
 800adbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc2:	0713      	lsls	r3, r2, #28
 800adc4:	bf44      	itt	mi
 800adc6:	232b      	movmi	r3, #43	; 0x2b
 800adc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adcc:	f89a 3000 	ldrb.w	r3, [sl]
 800add0:	2b2a      	cmp	r3, #42	; 0x2a
 800add2:	d015      	beq.n	800ae00 <_vfiprintf_r+0x13c>
 800add4:	9a07      	ldr	r2, [sp, #28]
 800add6:	4654      	mov	r4, sl
 800add8:	2000      	movs	r0, #0
 800adda:	f04f 0c0a 	mov.w	ip, #10
 800adde:	4621      	mov	r1, r4
 800ade0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ade4:	3b30      	subs	r3, #48	; 0x30
 800ade6:	2b09      	cmp	r3, #9
 800ade8:	d94e      	bls.n	800ae88 <_vfiprintf_r+0x1c4>
 800adea:	b1b0      	cbz	r0, 800ae1a <_vfiprintf_r+0x156>
 800adec:	9207      	str	r2, [sp, #28]
 800adee:	e014      	b.n	800ae1a <_vfiprintf_r+0x156>
 800adf0:	eba0 0308 	sub.w	r3, r0, r8
 800adf4:	fa09 f303 	lsl.w	r3, r9, r3
 800adf8:	4313      	orrs	r3, r2
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	46a2      	mov	sl, r4
 800adfe:	e7d2      	b.n	800ada6 <_vfiprintf_r+0xe2>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	1d19      	adds	r1, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9103      	str	r1, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfbb      	ittet	lt
 800ae0c:	425b      	neglt	r3, r3
 800ae0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae12:	9307      	strge	r3, [sp, #28]
 800ae14:	9307      	strlt	r3, [sp, #28]
 800ae16:	bfb8      	it	lt
 800ae18:	9204      	strlt	r2, [sp, #16]
 800ae1a:	7823      	ldrb	r3, [r4, #0]
 800ae1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae1e:	d10c      	bne.n	800ae3a <_vfiprintf_r+0x176>
 800ae20:	7863      	ldrb	r3, [r4, #1]
 800ae22:	2b2a      	cmp	r3, #42	; 0x2a
 800ae24:	d135      	bne.n	800ae92 <_vfiprintf_r+0x1ce>
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	1d1a      	adds	r2, r3, #4
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	9203      	str	r2, [sp, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bfb8      	it	lt
 800ae32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae36:	3402      	adds	r4, #2
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af20 <_vfiprintf_r+0x25c>
 800ae3e:	7821      	ldrb	r1, [r4, #0]
 800ae40:	2203      	movs	r2, #3
 800ae42:	4650      	mov	r0, sl
 800ae44:	f7f5 f9cc 	bl	80001e0 <memchr>
 800ae48:	b140      	cbz	r0, 800ae5c <_vfiprintf_r+0x198>
 800ae4a:	2340      	movs	r3, #64	; 0x40
 800ae4c:	eba0 000a 	sub.w	r0, r0, sl
 800ae50:	fa03 f000 	lsl.w	r0, r3, r0
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	4303      	orrs	r3, r0
 800ae58:	3401      	adds	r4, #1
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae60:	482c      	ldr	r0, [pc, #176]	; (800af14 <_vfiprintf_r+0x250>)
 800ae62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae66:	2206      	movs	r2, #6
 800ae68:	f7f5 f9ba 	bl	80001e0 <memchr>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d03f      	beq.n	800aef0 <_vfiprintf_r+0x22c>
 800ae70:	4b29      	ldr	r3, [pc, #164]	; (800af18 <_vfiprintf_r+0x254>)
 800ae72:	bb1b      	cbnz	r3, 800aebc <_vfiprintf_r+0x1f8>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	3307      	adds	r3, #7
 800ae78:	f023 0307 	bic.w	r3, r3, #7
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	443b      	add	r3, r7
 800ae84:	9309      	str	r3, [sp, #36]	; 0x24
 800ae86:	e767      	b.n	800ad58 <_vfiprintf_r+0x94>
 800ae88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	2001      	movs	r0, #1
 800ae90:	e7a5      	b.n	800adde <_vfiprintf_r+0x11a>
 800ae92:	2300      	movs	r3, #0
 800ae94:	3401      	adds	r4, #1
 800ae96:	9305      	str	r3, [sp, #20]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f04f 0c0a 	mov.w	ip, #10
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aea4:	3a30      	subs	r2, #48	; 0x30
 800aea6:	2a09      	cmp	r2, #9
 800aea8:	d903      	bls.n	800aeb2 <_vfiprintf_r+0x1ee>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0c5      	beq.n	800ae3a <_vfiprintf_r+0x176>
 800aeae:	9105      	str	r1, [sp, #20]
 800aeb0:	e7c3      	b.n	800ae3a <_vfiprintf_r+0x176>
 800aeb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e7f0      	b.n	800ae9e <_vfiprintf_r+0x1da>
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	462a      	mov	r2, r5
 800aec2:	4b16      	ldr	r3, [pc, #88]	; (800af1c <_vfiprintf_r+0x258>)
 800aec4:	a904      	add	r1, sp, #16
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7fd fe10 	bl	8008aec <_printf_float>
 800aecc:	4607      	mov	r7, r0
 800aece:	1c78      	adds	r0, r7, #1
 800aed0:	d1d6      	bne.n	800ae80 <_vfiprintf_r+0x1bc>
 800aed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aed4:	07d9      	lsls	r1, r3, #31
 800aed6:	d405      	bmi.n	800aee4 <_vfiprintf_r+0x220>
 800aed8:	89ab      	ldrh	r3, [r5, #12]
 800aeda:	059a      	lsls	r2, r3, #22
 800aedc:	d402      	bmi.n	800aee4 <_vfiprintf_r+0x220>
 800aede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aee0:	f000 faaf 	bl	800b442 <__retarget_lock_release_recursive>
 800aee4:	89ab      	ldrh	r3, [r5, #12]
 800aee6:	065b      	lsls	r3, r3, #25
 800aee8:	f53f af12 	bmi.w	800ad10 <_vfiprintf_r+0x4c>
 800aeec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeee:	e711      	b.n	800ad14 <_vfiprintf_r+0x50>
 800aef0:	ab03      	add	r3, sp, #12
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	462a      	mov	r2, r5
 800aef6:	4b09      	ldr	r3, [pc, #36]	; (800af1c <_vfiprintf_r+0x258>)
 800aef8:	a904      	add	r1, sp, #16
 800aefa:	4630      	mov	r0, r6
 800aefc:	f7fe f89a 	bl	8009034 <_printf_i>
 800af00:	e7e4      	b.n	800aecc <_vfiprintf_r+0x208>
 800af02:	bf00      	nop
 800af04:	0800bb84 	.word	0x0800bb84
 800af08:	0800bba4 	.word	0x0800bba4
 800af0c:	0800bb64 	.word	0x0800bb64
 800af10:	0800ba0c 	.word	0x0800ba0c
 800af14:	0800ba16 	.word	0x0800ba16
 800af18:	08008aed 	.word	0x08008aed
 800af1c:	0800ac9f 	.word	0x0800ac9f
 800af20:	0800ba12 	.word	0x0800ba12

0800af24 <__swbuf_r>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	460e      	mov	r6, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	4605      	mov	r5, r0
 800af2c:	b118      	cbz	r0, 800af36 <__swbuf_r+0x12>
 800af2e:	6983      	ldr	r3, [r0, #24]
 800af30:	b90b      	cbnz	r3, 800af36 <__swbuf_r+0x12>
 800af32:	f000 f9e7 	bl	800b304 <__sinit>
 800af36:	4b21      	ldr	r3, [pc, #132]	; (800afbc <__swbuf_r+0x98>)
 800af38:	429c      	cmp	r4, r3
 800af3a:	d12b      	bne.n	800af94 <__swbuf_r+0x70>
 800af3c:	686c      	ldr	r4, [r5, #4]
 800af3e:	69a3      	ldr	r3, [r4, #24]
 800af40:	60a3      	str	r3, [r4, #8]
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	071a      	lsls	r2, r3, #28
 800af46:	d52f      	bpl.n	800afa8 <__swbuf_r+0x84>
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	b36b      	cbz	r3, 800afa8 <__swbuf_r+0x84>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	1ac0      	subs	r0, r0, r3
 800af52:	6963      	ldr	r3, [r4, #20]
 800af54:	b2f6      	uxtb	r6, r6
 800af56:	4283      	cmp	r3, r0
 800af58:	4637      	mov	r7, r6
 800af5a:	dc04      	bgt.n	800af66 <__swbuf_r+0x42>
 800af5c:	4621      	mov	r1, r4
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 f93c 	bl	800b1dc <_fflush_r>
 800af64:	bb30      	cbnz	r0, 800afb4 <__swbuf_r+0x90>
 800af66:	68a3      	ldr	r3, [r4, #8]
 800af68:	3b01      	subs	r3, #1
 800af6a:	60a3      	str	r3, [r4, #8]
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	6022      	str	r2, [r4, #0]
 800af72:	701e      	strb	r6, [r3, #0]
 800af74:	6963      	ldr	r3, [r4, #20]
 800af76:	3001      	adds	r0, #1
 800af78:	4283      	cmp	r3, r0
 800af7a:	d004      	beq.n	800af86 <__swbuf_r+0x62>
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	07db      	lsls	r3, r3, #31
 800af80:	d506      	bpl.n	800af90 <__swbuf_r+0x6c>
 800af82:	2e0a      	cmp	r6, #10
 800af84:	d104      	bne.n	800af90 <__swbuf_r+0x6c>
 800af86:	4621      	mov	r1, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	f000 f927 	bl	800b1dc <_fflush_r>
 800af8e:	b988      	cbnz	r0, 800afb4 <__swbuf_r+0x90>
 800af90:	4638      	mov	r0, r7
 800af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af94:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <__swbuf_r+0x9c>)
 800af96:	429c      	cmp	r4, r3
 800af98:	d101      	bne.n	800af9e <__swbuf_r+0x7a>
 800af9a:	68ac      	ldr	r4, [r5, #8]
 800af9c:	e7cf      	b.n	800af3e <__swbuf_r+0x1a>
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <__swbuf_r+0xa0>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	bf08      	it	eq
 800afa4:	68ec      	ldreq	r4, [r5, #12]
 800afa6:	e7ca      	b.n	800af3e <__swbuf_r+0x1a>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f81a 	bl	800afe4 <__swsetup_r>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0cb      	beq.n	800af4c <__swbuf_r+0x28>
 800afb4:	f04f 37ff 	mov.w	r7, #4294967295
 800afb8:	e7ea      	b.n	800af90 <__swbuf_r+0x6c>
 800afba:	bf00      	nop
 800afbc:	0800bb84 	.word	0x0800bb84
 800afc0:	0800bba4 	.word	0x0800bba4
 800afc4:	0800bb64 	.word	0x0800bb64

0800afc8 <__ascii_wctomb>:
 800afc8:	b149      	cbz	r1, 800afde <__ascii_wctomb+0x16>
 800afca:	2aff      	cmp	r2, #255	; 0xff
 800afcc:	bf85      	ittet	hi
 800afce:	238a      	movhi	r3, #138	; 0x8a
 800afd0:	6003      	strhi	r3, [r0, #0]
 800afd2:	700a      	strbls	r2, [r1, #0]
 800afd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800afd8:	bf98      	it	ls
 800afda:	2001      	movls	r0, #1
 800afdc:	4770      	bx	lr
 800afde:	4608      	mov	r0, r1
 800afe0:	4770      	bx	lr
	...

0800afe4 <__swsetup_r>:
 800afe4:	4b32      	ldr	r3, [pc, #200]	; (800b0b0 <__swsetup_r+0xcc>)
 800afe6:	b570      	push	{r4, r5, r6, lr}
 800afe8:	681d      	ldr	r5, [r3, #0]
 800afea:	4606      	mov	r6, r0
 800afec:	460c      	mov	r4, r1
 800afee:	b125      	cbz	r5, 800affa <__swsetup_r+0x16>
 800aff0:	69ab      	ldr	r3, [r5, #24]
 800aff2:	b913      	cbnz	r3, 800affa <__swsetup_r+0x16>
 800aff4:	4628      	mov	r0, r5
 800aff6:	f000 f985 	bl	800b304 <__sinit>
 800affa:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <__swsetup_r+0xd0>)
 800affc:	429c      	cmp	r4, r3
 800affe:	d10f      	bne.n	800b020 <__swsetup_r+0x3c>
 800b000:	686c      	ldr	r4, [r5, #4]
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b008:	0719      	lsls	r1, r3, #28
 800b00a:	d42c      	bmi.n	800b066 <__swsetup_r+0x82>
 800b00c:	06dd      	lsls	r5, r3, #27
 800b00e:	d411      	bmi.n	800b034 <__swsetup_r+0x50>
 800b010:	2309      	movs	r3, #9
 800b012:	6033      	str	r3, [r6, #0]
 800b014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295
 800b01e:	e03e      	b.n	800b09e <__swsetup_r+0xba>
 800b020:	4b25      	ldr	r3, [pc, #148]	; (800b0b8 <__swsetup_r+0xd4>)
 800b022:	429c      	cmp	r4, r3
 800b024:	d101      	bne.n	800b02a <__swsetup_r+0x46>
 800b026:	68ac      	ldr	r4, [r5, #8]
 800b028:	e7eb      	b.n	800b002 <__swsetup_r+0x1e>
 800b02a:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <__swsetup_r+0xd8>)
 800b02c:	429c      	cmp	r4, r3
 800b02e:	bf08      	it	eq
 800b030:	68ec      	ldreq	r4, [r5, #12]
 800b032:	e7e6      	b.n	800b002 <__swsetup_r+0x1e>
 800b034:	0758      	lsls	r0, r3, #29
 800b036:	d512      	bpl.n	800b05e <__swsetup_r+0x7a>
 800b038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b03a:	b141      	cbz	r1, 800b04e <__swsetup_r+0x6a>
 800b03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b040:	4299      	cmp	r1, r3
 800b042:	d002      	beq.n	800b04a <__swsetup_r+0x66>
 800b044:	4630      	mov	r0, r6
 800b046:	f7ff fb6f 	bl	800a728 <_free_r>
 800b04a:	2300      	movs	r3, #0
 800b04c:	6363      	str	r3, [r4, #52]	; 0x34
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	2300      	movs	r3, #0
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	f043 0308 	orr.w	r3, r3, #8
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	b94b      	cbnz	r3, 800b07e <__swsetup_r+0x9a>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b074:	d003      	beq.n	800b07e <__swsetup_r+0x9a>
 800b076:	4621      	mov	r1, r4
 800b078:	4630      	mov	r0, r6
 800b07a:	f000 fa07 	bl	800b48c <__smakebuf_r>
 800b07e:	89a0      	ldrh	r0, [r4, #12]
 800b080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b084:	f010 0301 	ands.w	r3, r0, #1
 800b088:	d00a      	beq.n	800b0a0 <__swsetup_r+0xbc>
 800b08a:	2300      	movs	r3, #0
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	6963      	ldr	r3, [r4, #20]
 800b090:	425b      	negs	r3, r3
 800b092:	61a3      	str	r3, [r4, #24]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	b943      	cbnz	r3, 800b0aa <__swsetup_r+0xc6>
 800b098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b09c:	d1ba      	bne.n	800b014 <__swsetup_r+0x30>
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	0781      	lsls	r1, r0, #30
 800b0a2:	bf58      	it	pl
 800b0a4:	6963      	ldrpl	r3, [r4, #20]
 800b0a6:	60a3      	str	r3, [r4, #8]
 800b0a8:	e7f4      	b.n	800b094 <__swsetup_r+0xb0>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	e7f7      	b.n	800b09e <__swsetup_r+0xba>
 800b0ae:	bf00      	nop
 800b0b0:	20000190 	.word	0x20000190
 800b0b4:	0800bb84 	.word	0x0800bb84
 800b0b8:	0800bba4 	.word	0x0800bba4
 800b0bc:	0800bb64 	.word	0x0800bb64

0800b0c0 <abort>:
 800b0c0:	b508      	push	{r3, lr}
 800b0c2:	2006      	movs	r0, #6
 800b0c4:	f000 fa52 	bl	800b56c <raise>
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f7f5 ff8b 	bl	8000fe4 <_exit>
	...

0800b0d0 <__sflush_r>:
 800b0d0:	898a      	ldrh	r2, [r1, #12]
 800b0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	0710      	lsls	r0, r2, #28
 800b0da:	460c      	mov	r4, r1
 800b0dc:	d458      	bmi.n	800b190 <__sflush_r+0xc0>
 800b0de:	684b      	ldr	r3, [r1, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc05      	bgt.n	800b0f0 <__sflush_r+0x20>
 800b0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dc02      	bgt.n	800b0f0 <__sflush_r+0x20>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	d0f9      	beq.n	800b0ea <__sflush_r+0x1a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0fc:	682f      	ldr	r7, [r5, #0]
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	d032      	beq.n	800b168 <__sflush_r+0x98>
 800b102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	075a      	lsls	r2, r3, #29
 800b108:	d505      	bpl.n	800b116 <__sflush_r+0x46>
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	1ac0      	subs	r0, r0, r3
 800b10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b110:	b10b      	cbz	r3, 800b116 <__sflush_r+0x46>
 800b112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b114:	1ac0      	subs	r0, r0, r3
 800b116:	2300      	movs	r3, #0
 800b118:	4602      	mov	r2, r0
 800b11a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b11c:	6a21      	ldr	r1, [r4, #32]
 800b11e:	4628      	mov	r0, r5
 800b120:	47b0      	blx	r6
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	d106      	bne.n	800b136 <__sflush_r+0x66>
 800b128:	6829      	ldr	r1, [r5, #0]
 800b12a:	291d      	cmp	r1, #29
 800b12c:	d82c      	bhi.n	800b188 <__sflush_r+0xb8>
 800b12e:	4a2a      	ldr	r2, [pc, #168]	; (800b1d8 <__sflush_r+0x108>)
 800b130:	40ca      	lsrs	r2, r1
 800b132:	07d6      	lsls	r6, r2, #31
 800b134:	d528      	bpl.n	800b188 <__sflush_r+0xb8>
 800b136:	2200      	movs	r2, #0
 800b138:	6062      	str	r2, [r4, #4]
 800b13a:	04d9      	lsls	r1, r3, #19
 800b13c:	6922      	ldr	r2, [r4, #16]
 800b13e:	6022      	str	r2, [r4, #0]
 800b140:	d504      	bpl.n	800b14c <__sflush_r+0x7c>
 800b142:	1c42      	adds	r2, r0, #1
 800b144:	d101      	bne.n	800b14a <__sflush_r+0x7a>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b903      	cbnz	r3, 800b14c <__sflush_r+0x7c>
 800b14a:	6560      	str	r0, [r4, #84]	; 0x54
 800b14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b14e:	602f      	str	r7, [r5, #0]
 800b150:	2900      	cmp	r1, #0
 800b152:	d0ca      	beq.n	800b0ea <__sflush_r+0x1a>
 800b154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b158:	4299      	cmp	r1, r3
 800b15a:	d002      	beq.n	800b162 <__sflush_r+0x92>
 800b15c:	4628      	mov	r0, r5
 800b15e:	f7ff fae3 	bl	800a728 <_free_r>
 800b162:	2000      	movs	r0, #0
 800b164:	6360      	str	r0, [r4, #52]	; 0x34
 800b166:	e7c1      	b.n	800b0ec <__sflush_r+0x1c>
 800b168:	6a21      	ldr	r1, [r4, #32]
 800b16a:	2301      	movs	r3, #1
 800b16c:	4628      	mov	r0, r5
 800b16e:	47b0      	blx	r6
 800b170:	1c41      	adds	r1, r0, #1
 800b172:	d1c7      	bne.n	800b104 <__sflush_r+0x34>
 800b174:	682b      	ldr	r3, [r5, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0c4      	beq.n	800b104 <__sflush_r+0x34>
 800b17a:	2b1d      	cmp	r3, #29
 800b17c:	d001      	beq.n	800b182 <__sflush_r+0xb2>
 800b17e:	2b16      	cmp	r3, #22
 800b180:	d101      	bne.n	800b186 <__sflush_r+0xb6>
 800b182:	602f      	str	r7, [r5, #0]
 800b184:	e7b1      	b.n	800b0ea <__sflush_r+0x1a>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	e7ad      	b.n	800b0ec <__sflush_r+0x1c>
 800b190:	690f      	ldr	r7, [r1, #16]
 800b192:	2f00      	cmp	r7, #0
 800b194:	d0a9      	beq.n	800b0ea <__sflush_r+0x1a>
 800b196:	0793      	lsls	r3, r2, #30
 800b198:	680e      	ldr	r6, [r1, #0]
 800b19a:	bf08      	it	eq
 800b19c:	694b      	ldreq	r3, [r1, #20]
 800b19e:	600f      	str	r7, [r1, #0]
 800b1a0:	bf18      	it	ne
 800b1a2:	2300      	movne	r3, #0
 800b1a4:	eba6 0807 	sub.w	r8, r6, r7
 800b1a8:	608b      	str	r3, [r1, #8]
 800b1aa:	f1b8 0f00 	cmp.w	r8, #0
 800b1ae:	dd9c      	ble.n	800b0ea <__sflush_r+0x1a>
 800b1b0:	6a21      	ldr	r1, [r4, #32]
 800b1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1b4:	4643      	mov	r3, r8
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b0      	blx	r6
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	dc06      	bgt.n	800b1ce <__sflush_r+0xfe>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e78e      	b.n	800b0ec <__sflush_r+0x1c>
 800b1ce:	4407      	add	r7, r0
 800b1d0:	eba8 0800 	sub.w	r8, r8, r0
 800b1d4:	e7e9      	b.n	800b1aa <__sflush_r+0xda>
 800b1d6:	bf00      	nop
 800b1d8:	20400001 	.word	0x20400001

0800b1dc <_fflush_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	690b      	ldr	r3, [r1, #16]
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	b913      	cbnz	r3, 800b1ec <_fflush_r+0x10>
 800b1e6:	2500      	movs	r5, #0
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}
 800b1ec:	b118      	cbz	r0, 800b1f6 <_fflush_r+0x1a>
 800b1ee:	6983      	ldr	r3, [r0, #24]
 800b1f0:	b90b      	cbnz	r3, 800b1f6 <_fflush_r+0x1a>
 800b1f2:	f000 f887 	bl	800b304 <__sinit>
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <_fflush_r+0x6c>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	d11b      	bne.n	800b234 <_fflush_r+0x58>
 800b1fc:	686c      	ldr	r4, [r5, #4]
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0ef      	beq.n	800b1e6 <_fflush_r+0xa>
 800b206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b208:	07d0      	lsls	r0, r2, #31
 800b20a:	d404      	bmi.n	800b216 <_fflush_r+0x3a>
 800b20c:	0599      	lsls	r1, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_fflush_r+0x3a>
 800b210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b212:	f000 f915 	bl	800b440 <__retarget_lock_acquire_recursive>
 800b216:	4628      	mov	r0, r5
 800b218:	4621      	mov	r1, r4
 800b21a:	f7ff ff59 	bl	800b0d0 <__sflush_r>
 800b21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b220:	07da      	lsls	r2, r3, #31
 800b222:	4605      	mov	r5, r0
 800b224:	d4e0      	bmi.n	800b1e8 <_fflush_r+0xc>
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	059b      	lsls	r3, r3, #22
 800b22a:	d4dd      	bmi.n	800b1e8 <_fflush_r+0xc>
 800b22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b22e:	f000 f908 	bl	800b442 <__retarget_lock_release_recursive>
 800b232:	e7d9      	b.n	800b1e8 <_fflush_r+0xc>
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_fflush_r+0x70>)
 800b236:	429c      	cmp	r4, r3
 800b238:	d101      	bne.n	800b23e <_fflush_r+0x62>
 800b23a:	68ac      	ldr	r4, [r5, #8]
 800b23c:	e7df      	b.n	800b1fe <_fflush_r+0x22>
 800b23e:	4b04      	ldr	r3, [pc, #16]	; (800b250 <_fflush_r+0x74>)
 800b240:	429c      	cmp	r4, r3
 800b242:	bf08      	it	eq
 800b244:	68ec      	ldreq	r4, [r5, #12]
 800b246:	e7da      	b.n	800b1fe <_fflush_r+0x22>
 800b248:	0800bb84 	.word	0x0800bb84
 800b24c:	0800bba4 	.word	0x0800bba4
 800b250:	0800bb64 	.word	0x0800bb64

0800b254 <std>:
 800b254:	2300      	movs	r3, #0
 800b256:	b510      	push	{r4, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	e9c0 3300 	strd	r3, r3, [r0]
 800b25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b262:	6083      	str	r3, [r0, #8]
 800b264:	8181      	strh	r1, [r0, #12]
 800b266:	6643      	str	r3, [r0, #100]	; 0x64
 800b268:	81c2      	strh	r2, [r0, #14]
 800b26a:	6183      	str	r3, [r0, #24]
 800b26c:	4619      	mov	r1, r3
 800b26e:	2208      	movs	r2, #8
 800b270:	305c      	adds	r0, #92	; 0x5c
 800b272:	f7fd fb93 	bl	800899c <memset>
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <std+0x38>)
 800b278:	6263      	str	r3, [r4, #36]	; 0x24
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <std+0x3c>)
 800b27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <std+0x40>)
 800b280:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <std+0x44>)
 800b284:	6224      	str	r4, [r4, #32]
 800b286:	6323      	str	r3, [r4, #48]	; 0x30
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	bf00      	nop
 800b28c:	0800b5a5 	.word	0x0800b5a5
 800b290:	0800b5c7 	.word	0x0800b5c7
 800b294:	0800b5ff 	.word	0x0800b5ff
 800b298:	0800b623 	.word	0x0800b623

0800b29c <_cleanup_r>:
 800b29c:	4901      	ldr	r1, [pc, #4]	; (800b2a4 <_cleanup_r+0x8>)
 800b29e:	f000 b8af 	b.w	800b400 <_fwalk_reent>
 800b2a2:	bf00      	nop
 800b2a4:	0800b1dd 	.word	0x0800b1dd

0800b2a8 <__sfmoreglue>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	1e4a      	subs	r2, r1, #1
 800b2ac:	2568      	movs	r5, #104	; 0x68
 800b2ae:	4355      	muls	r5, r2
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2b6:	f7ff fa87 	bl	800a7c8 <_malloc_r>
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	b140      	cbz	r0, 800b2d0 <__sfmoreglue+0x28>
 800b2be:	2100      	movs	r1, #0
 800b2c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b2c4:	300c      	adds	r0, #12
 800b2c6:	60a0      	str	r0, [r4, #8]
 800b2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2cc:	f7fd fb66 	bl	800899c <memset>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <__sfp_lock_acquire>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__sfp_lock_acquire+0x8>)
 800b2d6:	f000 b8b3 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800b2da:	bf00      	nop
 800b2dc:	200015d0 	.word	0x200015d0

0800b2e0 <__sfp_lock_release>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__sfp_lock_release+0x8>)
 800b2e2:	f000 b8ae 	b.w	800b442 <__retarget_lock_release_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	200015d0 	.word	0x200015d0

0800b2ec <__sinit_lock_acquire>:
 800b2ec:	4801      	ldr	r0, [pc, #4]	; (800b2f4 <__sinit_lock_acquire+0x8>)
 800b2ee:	f000 b8a7 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800b2f2:	bf00      	nop
 800b2f4:	200015cb 	.word	0x200015cb

0800b2f8 <__sinit_lock_release>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sinit_lock_release+0x8>)
 800b2fa:	f000 b8a2 	b.w	800b442 <__retarget_lock_release_recursive>
 800b2fe:	bf00      	nop
 800b300:	200015cb 	.word	0x200015cb

0800b304 <__sinit>:
 800b304:	b510      	push	{r4, lr}
 800b306:	4604      	mov	r4, r0
 800b308:	f7ff fff0 	bl	800b2ec <__sinit_lock_acquire>
 800b30c:	69a3      	ldr	r3, [r4, #24]
 800b30e:	b11b      	cbz	r3, 800b318 <__sinit+0x14>
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f7ff bff0 	b.w	800b2f8 <__sinit_lock_release>
 800b318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b31c:	6523      	str	r3, [r4, #80]	; 0x50
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <__sinit+0x68>)
 800b320:	4a13      	ldr	r2, [pc, #76]	; (800b370 <__sinit+0x6c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	62a2      	str	r2, [r4, #40]	; 0x28
 800b326:	42a3      	cmp	r3, r4
 800b328:	bf04      	itt	eq
 800b32a:	2301      	moveq	r3, #1
 800b32c:	61a3      	streq	r3, [r4, #24]
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 f820 	bl	800b374 <__sfp>
 800b334:	6060      	str	r0, [r4, #4]
 800b336:	4620      	mov	r0, r4
 800b338:	f000 f81c 	bl	800b374 <__sfp>
 800b33c:	60a0      	str	r0, [r4, #8]
 800b33e:	4620      	mov	r0, r4
 800b340:	f000 f818 	bl	800b374 <__sfp>
 800b344:	2200      	movs	r2, #0
 800b346:	60e0      	str	r0, [r4, #12]
 800b348:	2104      	movs	r1, #4
 800b34a:	6860      	ldr	r0, [r4, #4]
 800b34c:	f7ff ff82 	bl	800b254 <std>
 800b350:	68a0      	ldr	r0, [r4, #8]
 800b352:	2201      	movs	r2, #1
 800b354:	2109      	movs	r1, #9
 800b356:	f7ff ff7d 	bl	800b254 <std>
 800b35a:	68e0      	ldr	r0, [r4, #12]
 800b35c:	2202      	movs	r2, #2
 800b35e:	2112      	movs	r1, #18
 800b360:	f7ff ff78 	bl	800b254 <std>
 800b364:	2301      	movs	r3, #1
 800b366:	61a3      	str	r3, [r4, #24]
 800b368:	e7d2      	b.n	800b310 <__sinit+0xc>
 800b36a:	bf00      	nop
 800b36c:	0800b7e0 	.word	0x0800b7e0
 800b370:	0800b29d 	.word	0x0800b29d

0800b374 <__sfp>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	4607      	mov	r7, r0
 800b378:	f7ff ffac 	bl	800b2d4 <__sfp_lock_acquire>
 800b37c:	4b1e      	ldr	r3, [pc, #120]	; (800b3f8 <__sfp+0x84>)
 800b37e:	681e      	ldr	r6, [r3, #0]
 800b380:	69b3      	ldr	r3, [r6, #24]
 800b382:	b913      	cbnz	r3, 800b38a <__sfp+0x16>
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ffbd 	bl	800b304 <__sinit>
 800b38a:	3648      	adds	r6, #72	; 0x48
 800b38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b390:	3b01      	subs	r3, #1
 800b392:	d503      	bpl.n	800b39c <__sfp+0x28>
 800b394:	6833      	ldr	r3, [r6, #0]
 800b396:	b30b      	cbz	r3, 800b3dc <__sfp+0x68>
 800b398:	6836      	ldr	r6, [r6, #0]
 800b39a:	e7f7      	b.n	800b38c <__sfp+0x18>
 800b39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3a0:	b9d5      	cbnz	r5, 800b3d8 <__sfp+0x64>
 800b3a2:	4b16      	ldr	r3, [pc, #88]	; (800b3fc <__sfp+0x88>)
 800b3a4:	60e3      	str	r3, [r4, #12]
 800b3a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b3ac:	f000 f847 	bl	800b43e <__retarget_lock_init_recursive>
 800b3b0:	f7ff ff96 	bl	800b2e0 <__sfp_lock_release>
 800b3b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3bc:	6025      	str	r5, [r4, #0]
 800b3be:	61a5      	str	r5, [r4, #24]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3c8:	f7fd fae8 	bl	800899c <memset>
 800b3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d8:	3468      	adds	r4, #104	; 0x68
 800b3da:	e7d9      	b.n	800b390 <__sfp+0x1c>
 800b3dc:	2104      	movs	r1, #4
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f7ff ff62 	bl	800b2a8 <__sfmoreglue>
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	6030      	str	r0, [r6, #0]
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d1d5      	bne.n	800b398 <__sfp+0x24>
 800b3ec:	f7ff ff78 	bl	800b2e0 <__sfp_lock_release>
 800b3f0:	230c      	movs	r3, #12
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	e7ee      	b.n	800b3d4 <__sfp+0x60>
 800b3f6:	bf00      	nop
 800b3f8:	0800b7e0 	.word	0x0800b7e0
 800b3fc:	ffff0001 	.word	0xffff0001

0800b400 <_fwalk_reent>:
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b404:	4606      	mov	r6, r0
 800b406:	4688      	mov	r8, r1
 800b408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b40c:	2700      	movs	r7, #0
 800b40e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b412:	f1b9 0901 	subs.w	r9, r9, #1
 800b416:	d505      	bpl.n	800b424 <_fwalk_reent+0x24>
 800b418:	6824      	ldr	r4, [r4, #0]
 800b41a:	2c00      	cmp	r4, #0
 800b41c:	d1f7      	bne.n	800b40e <_fwalk_reent+0xe>
 800b41e:	4638      	mov	r0, r7
 800b420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b424:	89ab      	ldrh	r3, [r5, #12]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d907      	bls.n	800b43a <_fwalk_reent+0x3a>
 800b42a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b42e:	3301      	adds	r3, #1
 800b430:	d003      	beq.n	800b43a <_fwalk_reent+0x3a>
 800b432:	4629      	mov	r1, r5
 800b434:	4630      	mov	r0, r6
 800b436:	47c0      	blx	r8
 800b438:	4307      	orrs	r7, r0
 800b43a:	3568      	adds	r5, #104	; 0x68
 800b43c:	e7e9      	b.n	800b412 <_fwalk_reent+0x12>

0800b43e <__retarget_lock_init_recursive>:
 800b43e:	4770      	bx	lr

0800b440 <__retarget_lock_acquire_recursive>:
 800b440:	4770      	bx	lr

0800b442 <__retarget_lock_release_recursive>:
 800b442:	4770      	bx	lr

0800b444 <__swhatbuf_r>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	460e      	mov	r6, r1
 800b448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44c:	2900      	cmp	r1, #0
 800b44e:	b096      	sub	sp, #88	; 0x58
 800b450:	4614      	mov	r4, r2
 800b452:	461d      	mov	r5, r3
 800b454:	da07      	bge.n	800b466 <__swhatbuf_r+0x22>
 800b456:	2300      	movs	r3, #0
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	89b3      	ldrh	r3, [r6, #12]
 800b45c:	061a      	lsls	r2, r3, #24
 800b45e:	d410      	bmi.n	800b482 <__swhatbuf_r+0x3e>
 800b460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b464:	e00e      	b.n	800b484 <__swhatbuf_r+0x40>
 800b466:	466a      	mov	r2, sp
 800b468:	f000 f902 	bl	800b670 <_fstat_r>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	dbf2      	blt.n	800b456 <__swhatbuf_r+0x12>
 800b470:	9a01      	ldr	r2, [sp, #4]
 800b472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b47a:	425a      	negs	r2, r3
 800b47c:	415a      	adcs	r2, r3
 800b47e:	602a      	str	r2, [r5, #0]
 800b480:	e7ee      	b.n	800b460 <__swhatbuf_r+0x1c>
 800b482:	2340      	movs	r3, #64	; 0x40
 800b484:	2000      	movs	r0, #0
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	b016      	add	sp, #88	; 0x58
 800b48a:	bd70      	pop	{r4, r5, r6, pc}

0800b48c <__smakebuf_r>:
 800b48c:	898b      	ldrh	r3, [r1, #12]
 800b48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b490:	079d      	lsls	r5, r3, #30
 800b492:	4606      	mov	r6, r0
 800b494:	460c      	mov	r4, r1
 800b496:	d507      	bpl.n	800b4a8 <__smakebuf_r+0x1c>
 800b498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	6163      	str	r3, [r4, #20]
 800b4a4:	b002      	add	sp, #8
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}
 800b4a8:	ab01      	add	r3, sp, #4
 800b4aa:	466a      	mov	r2, sp
 800b4ac:	f7ff ffca 	bl	800b444 <__swhatbuf_r>
 800b4b0:	9900      	ldr	r1, [sp, #0]
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff f987 	bl	800a7c8 <_malloc_r>
 800b4ba:	b948      	cbnz	r0, 800b4d0 <__smakebuf_r+0x44>
 800b4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c0:	059a      	lsls	r2, r3, #22
 800b4c2:	d4ef      	bmi.n	800b4a4 <__smakebuf_r+0x18>
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	f043 0302 	orr.w	r3, r3, #2
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	e7e3      	b.n	800b498 <__smakebuf_r+0xc>
 800b4d0:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <__smakebuf_r+0x7c>)
 800b4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	6020      	str	r0, [r4, #0]
 800b4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	9b00      	ldr	r3, [sp, #0]
 800b4e0:	6163      	str	r3, [r4, #20]
 800b4e2:	9b01      	ldr	r3, [sp, #4]
 800b4e4:	6120      	str	r0, [r4, #16]
 800b4e6:	b15b      	cbz	r3, 800b500 <__smakebuf_r+0x74>
 800b4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f000 f8d1 	bl	800b694 <_isatty_r>
 800b4f2:	b128      	cbz	r0, 800b500 <__smakebuf_r+0x74>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f023 0303 	bic.w	r3, r3, #3
 800b4fa:	f043 0301 	orr.w	r3, r3, #1
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	89a0      	ldrh	r0, [r4, #12]
 800b502:	4305      	orrs	r5, r0
 800b504:	81a5      	strh	r5, [r4, #12]
 800b506:	e7cd      	b.n	800b4a4 <__smakebuf_r+0x18>
 800b508:	0800b29d 	.word	0x0800b29d

0800b50c <_malloc_usable_size_r>:
 800b50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b510:	1f18      	subs	r0, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfbc      	itt	lt
 800b516:	580b      	ldrlt	r3, [r1, r0]
 800b518:	18c0      	addlt	r0, r0, r3
 800b51a:	4770      	bx	lr

0800b51c <_raise_r>:
 800b51c:	291f      	cmp	r1, #31
 800b51e:	b538      	push	{r3, r4, r5, lr}
 800b520:	4604      	mov	r4, r0
 800b522:	460d      	mov	r5, r1
 800b524:	d904      	bls.n	800b530 <_raise_r+0x14>
 800b526:	2316      	movs	r3, #22
 800b528:	6003      	str	r3, [r0, #0]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b532:	b112      	cbz	r2, 800b53a <_raise_r+0x1e>
 800b534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b538:	b94b      	cbnz	r3, 800b54e <_raise_r+0x32>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f830 	bl	800b5a0 <_getpid_r>
 800b540:	462a      	mov	r2, r5
 800b542:	4601      	mov	r1, r0
 800b544:	4620      	mov	r0, r4
 800b546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b54a:	f000 b817 	b.w	800b57c <_kill_r>
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d00a      	beq.n	800b568 <_raise_r+0x4c>
 800b552:	1c59      	adds	r1, r3, #1
 800b554:	d103      	bne.n	800b55e <_raise_r+0x42>
 800b556:	2316      	movs	r3, #22
 800b558:	6003      	str	r3, [r0, #0]
 800b55a:	2001      	movs	r0, #1
 800b55c:	e7e7      	b.n	800b52e <_raise_r+0x12>
 800b55e:	2400      	movs	r4, #0
 800b560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b564:	4628      	mov	r0, r5
 800b566:	4798      	blx	r3
 800b568:	2000      	movs	r0, #0
 800b56a:	e7e0      	b.n	800b52e <_raise_r+0x12>

0800b56c <raise>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <raise+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f7ff bfd3 	b.w	800b51c <_raise_r>
 800b576:	bf00      	nop
 800b578:	20000190 	.word	0x20000190

0800b57c <_kill_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	; (800b59c <_kill_r+0x20>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	4611      	mov	r1, r2
 800b588:	602b      	str	r3, [r5, #0]
 800b58a:	f7f5 fd1b 	bl	8000fc4 <_kill>
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	d102      	bne.n	800b598 <_kill_r+0x1c>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	b103      	cbz	r3, 800b598 <_kill_r+0x1c>
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	bd38      	pop	{r3, r4, r5, pc}
 800b59a:	bf00      	nop
 800b59c:	200015c4 	.word	0x200015c4

0800b5a0 <_getpid_r>:
 800b5a0:	f7f5 bd08 	b.w	8000fb4 <_getpid>

0800b5a4 <__sread>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f000 f894 	bl	800b6d8 <_read_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b8:	181b      	addge	r3, r3, r0
 800b5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5be:	bfac      	ite	ge
 800b5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5c2:	81a3      	strhlt	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__swrite>:
 800b5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	898b      	ldrh	r3, [r1, #12]
 800b5ce:	05db      	lsls	r3, r3, #23
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	d505      	bpl.n	800b5e4 <__swrite+0x1e>
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	2302      	movs	r3, #2
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f000 f868 	bl	800b6b4 <_lseek_r>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	f000 b817 	b.w	800b62c <_write_r>

0800b5fe <__sseek>:
 800b5fe:	b510      	push	{r4, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 f855 	bl	800b6b4 <_lseek_r>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	bf15      	itete	ne
 800b610:	6560      	strne	r0, [r4, #84]	; 0x54
 800b612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b61a:	81a3      	strheq	r3, [r4, #12]
 800b61c:	bf18      	it	ne
 800b61e:	81a3      	strhne	r3, [r4, #12]
 800b620:	bd10      	pop	{r4, pc}

0800b622 <__sclose>:
 800b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b626:	f000 b813 	b.w	800b650 <_close_r>
	...

0800b62c <_write_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d07      	ldr	r5, [pc, #28]	; (800b64c <_write_r+0x20>)
 800b630:	4604      	mov	r4, r0
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	2200      	movs	r2, #0
 800b638:	602a      	str	r2, [r5, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f7f5 fcf9 	bl	8001032 <_write>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_write_r+0x1e>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_write_r+0x1e>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	200015c4 	.word	0x200015c4

0800b650 <_close_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d06      	ldr	r5, [pc, #24]	; (800b66c <_close_r+0x1c>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f5 fd05 	bl	800106a <_close>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_close_r+0x1a>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_close_r+0x1a>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	200015c4 	.word	0x200015c4

0800b670 <_fstat_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_fstat_r+0x20>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f7f5 fd00 	bl	8001082 <_fstat>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d102      	bne.n	800b68c <_fstat_r+0x1c>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b103      	cbz	r3, 800b68c <_fstat_r+0x1c>
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	200015c4 	.word	0x200015c4

0800b694 <_isatty_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d06      	ldr	r5, [pc, #24]	; (800b6b0 <_isatty_r+0x1c>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	f7f5 fcff 	bl	80010a2 <_isatty>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_isatty_r+0x1a>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_isatty_r+0x1a>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200015c4 	.word	0x200015c4

0800b6b4 <_lseek_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	; (800b6d4 <_lseek_r+0x20>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7f5 fcf8 	bl	80010b8 <_lseek>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_lseek_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_lseek_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	200015c4 	.word	0x200015c4

0800b6d8 <_read_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	; (800b6f8 <_read_r+0x20>)
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	602a      	str	r2, [r5, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f7f5 fc86 	bl	8000ff8 <_read>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_read_r+0x1e>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_read_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	200015c4 	.word	0x200015c4

0800b6fc <_init>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	bf00      	nop
 800b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b702:	bc08      	pop	{r3}
 800b704:	469e      	mov	lr, r3
 800b706:	4770      	bx	lr

0800b708 <_fini>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	bf00      	nop
 800b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70e:	bc08      	pop	{r3}
 800b710:	469e      	mov	lr, r3
 800b712:	4770      	bx	lr
