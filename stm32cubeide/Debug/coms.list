
coms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800b808  0800b808  0001b808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd44  0800bd44  00020360  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd44  0800bd44  00020360  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd44  0800bd44  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd44  0800bd44  0001bd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd48  0800bd48  0001bd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800bd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  20000360  0800c0ac  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  0800c0ac  00021614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176b1  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334f  00000000  00000000  00037a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0003ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0003bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254cf  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001077a  00000000  00000000  00061bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7bb  00000000  00000000  00072371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141b2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046dc  00000000  00000000  00141b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7f0 	.word	0x0800b7f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0800b7f0 	.word	0x0800b7f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <Insert_SensorData>:

SensorData sensorData[DATA_COUNT];
char receiveCommand[64];
extern volatile uint8_t dataReady;

void Insert_SensorData(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
    for (int i = 0; i < DATA_COUNT; i++) {
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	e04f      	b.n	8000d14 <Insert_SensorData+0xac>
        sensorData[i].id = i;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	b298      	uxth	r0, r3
 8000c78:	492f      	ldr	r1, [pc, #188]	; (8000d38 <Insert_SensorData+0xd0>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	4602      	mov	r2, r0
 8000c88:	801a      	strh	r2, [r3, #0]
        sensorData[i].temperature = 25.0 + (i * 0.1);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fc5a 	bl	8000544 <__aeabi_i2d>
 8000c90:	a325      	add	r3, pc, #148	; (adr r3, 8000d28 <Insert_SensorData+0xc0>)
 8000c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <Insert_SensorData+0xd4>)
 8000ca8:	f7ff fb00 	bl	80002ac <__adddf3>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff ff88 	bl	8000bc8 <__aeabi_d2f>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	481f      	ldr	r0, [pc, #124]	; (8000d38 <Insert_SensorData+0xd0>)
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4403      	add	r3, r0
 8000cc8:	3304      	adds	r3, #4
 8000cca:	6019      	str	r1, [r3, #0]
        sensorData[i].humidity = 60.0 + (i * 0.2);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fc39 	bl	8000544 <__aeabi_i2d>
 8000cd2:	a317      	add	r3, pc, #92	; (adr r3, 8000d30 <Insert_SensorData+0xc8>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f7ff fc9e 	bl	8000618 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <Insert_SensorData+0xd8>)
 8000cea:	f7ff fadf 	bl	80002ac <__adddf3>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f7ff ff67 	bl	8000bc8 <__aeabi_d2f>
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <Insert_SensorData+0xd0>)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4403      	add	r3, r0
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < DATA_COUNT; i++) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3301      	adds	r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b09      	cmp	r3, #9
 8000d18:	ddac      	ble.n	8000c74 <Insert_SensorData+0xc>
    }
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	9999999a 	.word	0x9999999a
 8000d2c:	3fb99999 	.word	0x3fb99999
 8000d30:	9999999a 	.word	0x9999999a
 8000d34:	3fc99999 	.word	0x3fc99999
 8000d38:	200005ec 	.word	0x200005ec
 8000d3c:	40390000 	.word	0x40390000
 8000d40:	404e0000 	.word	0x404e0000

08000d44 <USB_SendData>:

//USB_SendData();

void USB_SendData(const char *data)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fa49 	bl	80001e4 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f007 f95c 	bl	8008014 <CDC_Transmit_FS>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <main>:
//}

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void) {
 8000d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d68:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000d6c:	af06      	add	r7, sp, #24
    HAL_Init();
 8000d6e:	f000 fa92 	bl	8001296 <HAL_Init>
    SystemClock_Config();
 8000d72:	f000 f8df 	bl	8000f34 <SystemClock_Config>
    MX_USB_DEVICE_Init();
 8000d76:	f007 f865 	bl	8007e44 <MX_USB_DEVICE_Init>

    char jsonBuffer[512];
    Insert_SensorData();
 8000d7a:	f7ff ff75 	bl	8000c68 <Insert_SensorData>

    while (1) {
    	if (dataReady)
 8000d7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <main+0x194>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0fa      	beq.n	8000d7e <main+0x1a>
    	{
            USB_SendData("Perintah diterima: ");
 8000d88:	485c      	ldr	r0, [pc, #368]	; (8000efc <main+0x198>)
 8000d8a:	f7ff ffdb 	bl	8000d44 <USB_SendData>
            USB_SendData(receiveCommand);
 8000d8e:	485c      	ldr	r0, [pc, #368]	; (8000f00 <main+0x19c>)
 8000d90:	f7ff ffd8 	bl	8000d44 <USB_SendData>
            USB_SendData("\r\n");
 8000d94:	485b      	ldr	r0, [pc, #364]	; (8000f04 <main+0x1a0>)
 8000d96:	f7ff ffd5 	bl	8000d44 <USB_SendData>

            if (strcmp(receiveCommand, "data") == 0) {
 8000d9a:	495b      	ldr	r1, [pc, #364]	; (8000f08 <main+0x1a4>)
 8000d9c:	4858      	ldr	r0, [pc, #352]	; (8000f00 <main+0x19c>)
 8000d9e:	f7ff fa17 	bl	80001d0 <strcmp>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d103      	bne.n	8000db0 <main+0x4c>
                USB_SendData("Mengirimkan data sensor...\r\n");
 8000da8:	4858      	ldr	r0, [pc, #352]	; (8000f0c <main+0x1a8>)
 8000daa:	f7ff ffcb 	bl	8000d44 <USB_SendData>
 8000dae:	e009      	b.n	8000dc4 <main+0x60>
            } else if (strcmp(receiveCommand, "clear") == 0) {
 8000db0:	4957      	ldr	r1, [pc, #348]	; (8000f10 <main+0x1ac>)
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <main+0x19c>)
 8000db4:	f7ff fa0c 	bl	80001d0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <main+0x60>
                USB_SendData("Menghapus data...\r\n");
 8000dbe:	4855      	ldr	r0, [pc, #340]	; (8000f14 <main+0x1b0>)
 8000dc0:	f7ff ffc0 	bl	8000d44 <USB_SendData>
            }

    		dataReady = 0;
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <main+0x194>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

    		if (strncmp(receiveCommand, "data", 4) == 0)
 8000dca:	2204      	movs	r2, #4
 8000dcc:	494e      	ldr	r1, [pc, #312]	; (8000f08 <main+0x1a4>)
 8000dce:	484c      	ldr	r0, [pc, #304]	; (8000f00 <main+0x19c>)
 8000dd0:	f008 fafe 	bl	80093d0 <strncmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d17c      	bne.n	8000ed4 <main+0x170>
    		{
    			Insert_SensorData();
 8000dda:	f7ff ff45 	bl	8000c68 <Insert_SensorData>

    			int offset = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    			offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset, "[");
 8000de4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000de8:	463a      	mov	r2, r7
 8000dea:	18d0      	adds	r0, r2, r3
 8000dec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000df0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000df4:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <main+0x1b4>)
 8000df6:	4619      	mov	r1, r3
 8000df8:	f008 fab6 	bl	8009368 <sniprintf>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e02:	4413      	add	r3, r2
 8000e04:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    			for (int i = 0; i < DATA_COUNT; i++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000e0e:	e04c      	b.n	8000eaa <main+0x146>
    				offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000e10:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e14:	463a      	mov	r2, r7
 8000e16:	18d6      	adds	r6, r2, r3
 8000e18:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e1c:	f5c3 7800 	rsb	r8, r3, #512	; 0x200
    						"{\"id\":%d,\"temperature\":%.2f,\"humidity\":%.2f}%s",
							sensorData[i].id, sensorData[i].temperature, sensorData[i].humidity,
 8000e20:	493e      	ldr	r1, [pc, #248]	; (8000f1c <main+0x1b8>)
 8000e22:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	881b      	ldrh	r3, [r3, #0]
    				offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000e32:	4699      	mov	r9, r3
							sensorData[i].id, sensorData[i].temperature, sensorData[i].humidity,
 8000e34:	4939      	ldr	r1, [pc, #228]	; (8000f1c <main+0x1b8>)
 8000e36:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	3304      	adds	r3, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
    				offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb8d 	bl	8000568 <__aeabi_f2d>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	460d      	mov	r5, r1
							sensorData[i].id, sensorData[i].temperature, sensorData[i].humidity,
 8000e52:	4932      	ldr	r1, [pc, #200]	; (8000f1c <main+0x1b8>)
 8000e54:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3308      	adds	r3, #8
 8000e64:	681b      	ldr	r3, [r3, #0]
    				offset += snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset,
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb7e 	bl	8000568 <__aeabi_f2d>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8000e74:	2909      	cmp	r1, #9
 8000e76:	d101      	bne.n	8000e7c <main+0x118>
 8000e78:	4929      	ldr	r1, [pc, #164]	; (8000f20 <main+0x1bc>)
 8000e7a:	e000      	b.n	8000e7e <main+0x11a>
 8000e7c:	4929      	ldr	r1, [pc, #164]	; (8000f24 <main+0x1c0>)
 8000e7e:	9104      	str	r1, [sp, #16]
 8000e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e84:	e9cd 4500 	strd	r4, r5, [sp]
 8000e88:	464b      	mov	r3, r9
 8000e8a:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <main+0x1c4>)
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f008 fa6a 	bl	8009368 <sniprintf>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    			for (int i = 0; i < DATA_COUNT; i++) {
 8000ea0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000eae:	2b09      	cmp	r3, #9
 8000eb0:	ddae      	ble.n	8000e10 <main+0xac>
							(i == DATA_COUNT - 1) ? "" : ",");
    			}
                snprintf(jsonBuffer + offset, sizeof(jsonBuffer) - offset, "]\r\n");
 8000eb2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000eb6:	463a      	mov	r2, r7
 8000eb8:	18d0      	adds	r0, r2, r3
 8000eba:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ebe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <main+0x1c8>)
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f008 fa4f 	bl	8009368 <sniprintf>
                USB_SendData(jsonBuffer);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff39 	bl	8000d44 <USB_SendData>
 8000ed2:	e754      	b.n	8000d7e <main+0x1a>
    		} else if (strncmp(receiveCommand, "clear", 5) == 0) { // reset data
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <main+0x1ac>)
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <main+0x19c>)
 8000eda:	f008 fa79 	bl	80093d0 <strncmp>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f47f af4c 	bne.w	8000d7e <main+0x1a>
                memset(sensorData, 0, sizeof(sensorData));
 8000ee6:	2278      	movs	r2, #120	; 0x78
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <main+0x1b8>)
 8000eec:	f007 fdca 	bl	8008a84 <memset>
                USB_SendData("Data cleared\r\n");
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <main+0x1cc>)
 8000ef2:	f7ff ff27 	bl	8000d44 <USB_SendData>
    	if (dataReady)
 8000ef6:	e742      	b.n	8000d7e <main+0x1a>
 8000ef8:	20000381 	.word	0x20000381
 8000efc:	0800b808 	.word	0x0800b808
 8000f00:	200005ac 	.word	0x200005ac
 8000f04:	0800b81c 	.word	0x0800b81c
 8000f08:	0800b820 	.word	0x0800b820
 8000f0c:	0800b828 	.word	0x0800b828
 8000f10:	0800b848 	.word	0x0800b848
 8000f14:	0800b850 	.word	0x0800b850
 8000f18:	0800b864 	.word	0x0800b864
 8000f1c:	200005ec 	.word	0x200005ec
 8000f20:	0800b868 	.word	0x0800b868
 8000f24:	0800b86c 	.word	0x0800b86c
 8000f28:	0800b870 	.word	0x0800b870
 8000f2c:	0800b8a0 	.word	0x0800b8a0
 8000f30:	0800b8a4 	.word	0x0800b8a4

08000f34 <SystemClock_Config>:
    	}
    }
}

void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	; 0x58
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2244      	movs	r2, #68	; 0x44
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f007 fd9e 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5a:	f002 f8bd 	bl	80030d8 <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f64:	f000 f838 	bl	8000fd8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f74:	2360      	movs	r3, #96	; 0x60
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f84:	2328      	movs	r3, #40	; 0x28
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 f903 	bl	80031a4 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fa4:	f000 f818 	bl	8000fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2303      	movs	r3, #3
 8000fae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fd01 	bl	80039c8 <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fcc:	f000 f804 	bl	8000fd8 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3758      	adds	r7, #88	; 0x58
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x44>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x44>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f962 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USB_IRQHandler+0x10>)
 8001086:	f000 fbc5 	bl	8001814 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20001308 	.word	0x20001308

08001094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_kill>:

int _kill(int pid, int sig)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ae:	f007 fcb1 	bl	8008a14 <__errno>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2216      	movs	r2, #22
 80010b6:	601a      	str	r2, [r3, #0]
	return -1;
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_exit>:

void _exit (int status)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffe7 	bl	80010a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010d6:	e7fe      	b.n	80010d6 <_exit+0x12>

080010d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e00a      	b.n	8001100 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ea:	f3af 8000 	nop.w
 80010ee:	4601      	mov	r1, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	b2ca      	uxtb	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf0      	blt.n	80010ea <_read+0x12>
	}

return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e009      	b.n	8001138 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbf1      	blt.n	8001124 <_write+0x12>
	}
	return len;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_close>:

int _close(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001172:	605a      	str	r2, [r3, #4]
	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <_isatty>:

int _isatty(int file)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f007 fc16 	bl	8008a14 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000c000 	.word	0x2000c000
 8001214:	00000400 	.word	0x00000400
 8001218:	2000037c 	.word	0x2000037c
 800121c:	20001618 	.word	0x20001618

08001220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001248:	f7ff ffea 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <LoopForever+0x6>)
  ldr r1, =_edata
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <LoopForever+0xe>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001264:	4c0a      	ldr	r4, [pc, #40]	; (8001290 <LoopForever+0x16>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001272:	f007 fbd5 	bl	8008a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001276:	f7ff fd75 	bl	8000d64 <main>

0800127a <LoopForever>:

LoopForever:
    b LoopForever
 800127a:	e7fe      	b.n	800127a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800127c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8001288:	0800bd4c 	.word	0x0800bd4c
  ldr r2, =_sbss
 800128c:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8001290:	20001614 	.word	0x20001614

08001294 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC1_IRQHandler>

08001296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f93d 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f80e 	bl	80012c8 <HAL_InitTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e001      	b.n	80012bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b8:	f7ff fe94 	bl	8000fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_InitTick+0x6c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_InitTick+0x70>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f949 	bl	800158a <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d809      	bhi.n	8001318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f913 	bl	8001536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_InitTick+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e007      	b.n	8001328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e004      	b.n	8001328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e001      	b.n	8001328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000664 	.word	0x20000664

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000664 	.word	0x20000664

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff3e 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff31 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a4:	b08b      	sub	sp, #44	; 0x2c
 80015a6:	af06      	add	r7, sp, #24
 80015a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e109      	b.n	80017c8 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f006 fe7d 	bl	80082c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 ff40 	bl	8004460 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	687e      	ldr	r6, [r7, #4]
 80015e8:	466d      	mov	r5, sp
 80015ea:	f106 0410 	add.w	r4, r6, #16
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015fa:	1d33      	adds	r3, r6, #4
 80015fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f002 ff06 	bl	8004410 <USB_CoreInit>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2202      	movs	r2, #2
 800160e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0d8      	b.n	80017c8 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f002 ff3a 	bl	8004496 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	e04d      	b.n	80016c4 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3305      	adds	r3, #5
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3304      	adds	r3, #4
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	b298      	uxth	r0, r3
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	333a      	adds	r3, #58	; 0x3a
 8001668:	4602      	mov	r2, r0
 800166a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3307      	adds	r3, #7
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	333c      	adds	r3, #60	; 0x3c
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3340      	adds	r3, #64	; 0x40
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3344      	adds	r3, #68	; 0x44
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3301      	adds	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3ac      	bcc.n	8001628 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e044      	b.n	800175e <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	f203 136d 	addw	r3, r3, #365	; 0x16d
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	3301      	adds	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3b5      	bcc.n	80016d4 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	687e      	ldr	r6, [r7, #4]
 8001770:	466d      	mov	r5, sp
 8001772:	f106 0410 	add.w	r4, r6, #16
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800177e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001782:	1d33      	adds	r3, r6, #4
 8001784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f002 fe92 	bl	80044b0 <USB_DevInit>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e014      	b.n	80017c8 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f001 fc55 	bl	8003066 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fe3a 	bl	800643a <USB_DevDisconnect>

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_PCD_Start+0x16>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e012      	b.n	800180c <HAL_PCD_Start+0x3c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fe1d 	bl	8004432 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fe05 	bl	800640c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fe1f 	bl	8006464 <USB_ReadInterrupts>
 8001826:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fb3e 	bl	8001eb4 <PCD_EP_ISR_Handler>

    return;
 8001838:	e110      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f006 fdd4 	bl	800840a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001862:	2100      	movs	r1, #0
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f8fc 	bl	8001a62 <HAL_PCD_SetAddress>

    return;
 800186a:	e0f7      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001888:	b292      	uxth	r2, r2
 800188a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800188e:	e0e5      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018b2:	e0d3      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d034      	beq.n	8001928 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0204 	bic.w	r2, r2, #4
 80018d0:	b292      	uxth	r2, r2
 80018d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0208 	bic.w	r2, r2, #8
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001900:	2100      	movs	r1, #0
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f007 f832 	bl	800896c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f006 fdb7 	bl	800847c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001920:	b292      	uxth	r2, r2
 8001922:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001926:	e099      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192e:	2b00      	cmp	r3, #0
 8001930:	d027      	beq.n	8001982 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0208 	orr.w	r2, r2, #8
 8001944:	b292      	uxth	r2, r2
 8001946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0204 	orr.w	r2, r2, #4
 8001974:	b292      	uxth	r2, r2
 8001976:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f006 fd64 	bl	8008448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001980:	e06c      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001988:	2b00      	cmp	r3, #0
 800198a:	d040      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199e:	b292      	uxth	r2, r2
 80019a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d12b      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0204 	orr.w	r2, r2, #4
 80019c0:	b292      	uxth	r2, r2
 80019c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0208 	orr.w	r2, r2, #8
 80019d8:	b292      	uxth	r2, r2
 80019da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019fc:	2101      	movs	r1, #1
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f006 ffb4 	bl	800896c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001a04:	e02a      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f006 fd1e 	bl	8008448 <HAL_PCD_SuspendCallback>
    return;
 8001a0c:	e026      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00f      	beq.n	8001a38 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f006 fcdc 	bl	80083ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a36:	e011      	b.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00c      	beq.n	8001a5c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a54:	b292      	uxth	r2, r2
 8001a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a5a:	bf00      	nop
  }
}
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_SetAddress+0x1a>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e013      	b.n	8001aa4 <HAL_PCD_SetAddress+0x42>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 fca5 	bl	80063e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	70fb      	strb	r3, [r7, #3]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	803b      	strh	r3, [r7, #0]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da0f      	bge.n	8001af2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00f      	b.n	8001b12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0207 	and.w	r2, r3, #7
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b1e:	883a      	ldrh	r2, [r7, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	78ba      	ldrb	r2, [r7, #2]
 8001b28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3c:	78bb      	ldrb	r3, [r7, #2]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d102      	bne.n	8001b48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_PCD_EP_Open+0xaa>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e00e      	b.n	8001b74 <HAL_PCD_EP_Open+0xc8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68f9      	ldr	r1, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fcc5 	bl	80044f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0f      	bge.n	8001bb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00f      	b.n	8001bd0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_PCD_EP_Close+0x6e>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e00e      	b.n	8001c08 <HAL_PCD_EP_Close+0x8c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 f835 	bl	8004c68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 0207 	and.w	r2, r3, #7
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	3304      	adds	r3, #4
 8001c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d106      	bne.n	8001c76 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6979      	ldr	r1, [r7, #20]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f9e7 	bl	8005042 <USB_EPStartXfer>
 8001c74:	e005      	b.n	8001c82 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 f9e0 	bl	8005042 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 0207 	and.w	r2, r3, #7
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2200      	movs	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2201      	movs	r2, #1
 8001d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f98b 	bl	8005042 <USB_EPStartXfer>
 8001d2c:	e005      	b.n	8001d3a <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f984 	bl	8005042 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d901      	bls.n	8001d62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e04e      	b.n	8001e00 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da0f      	bge.n	8001d8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3304      	adds	r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	705a      	strb	r2, [r3, #1]
 8001d88:	e00d      	b.n	8001da6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_PCD_EP_SetStall+0x82>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e01c      	b.n	8001e00 <HAL_PCD_EP_SetStall+0xbc>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 fa06 	bl	80061e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f004 fb47 	bl	8006484 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 020f 	and.w	r2, r3, #15
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d901      	bls.n	8001e26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e042      	b.n	8001eac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0f      	bge.n	8001e4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00f      	b.n	8001e6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 0207 	and.w	r2, r3, #7
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_PCD_EP_ClrStall+0x86>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_ClrStall+0xa4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 f9f3 	bl	8006288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b096      	sub	sp, #88	; 0x58
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ebc:	e3a9      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001eca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001ed8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 8169 	bne.w	80021b4 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ee2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d150      	bne.n	8001f90 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	81fb      	strh	r3, [r7, #14]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	89fb      	ldrh	r3, [r7, #14]
 8001f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	332c      	adds	r3, #44	; 0x2c
 8001f16:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	441a      	add	r2, r3
 8001f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f006 fa32 	bl	80083ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 8357 	beq.w	8002612 <PCD_EP_ISR_Handler+0x75e>
 8001f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 8352 	bne.w	8002612 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	b292      	uxth	r2, r2
 8001f82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001f8e:	e340      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fa2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d032      	beq.n	8002014 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f004 fa99 	bl	8006520 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	823b      	strh	r3, [r7, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	8a3a      	ldrh	r2, [r7, #16]
 8002004:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002008:	b292      	uxth	r2, r2
 800200a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f006 f9a7 	bl	8008360 <HAL_PCD_SetupStageCallback>
 8002012:	e2fe      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002014:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002018:	2b00      	cmp	r3, #0
 800201a:	f280 82fa 	bge.w	8002612 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29a      	uxth	r2, r3
 8002026:	f640 738f 	movw	r3, #3983	; 0xf8f
 800202a:	4013      	ands	r3, r2
 800202c:	83fb      	strh	r3, [r7, #30]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	8bfa      	ldrh	r2, [r7, #30]
 8002034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002038:	b292      	uxth	r2, r2
 800203a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	4413      	add	r3, r2
 8002056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002062:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d019      	beq.n	80020a0 <PCD_EP_ISR_Handler+0x1ec>
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207a:	6959      	ldr	r1, [r3, #20]
 800207c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002082:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002084:	b29b      	uxth	r3, r3
 8002086:	f004 fa4b 	bl	8006520 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800208a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	441a      	add	r2, r3
 8002094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002096:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002098:	2100      	movs	r1, #0
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f006 f972 	bl	8008384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80020aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 82ad 	bne.w	8002612 <PCD_EP_ISR_Handler+0x75e>
 80020b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80020c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80020c4:	f000 82a5 	beq.w	8002612 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4413      	add	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b3e      	cmp	r3, #62	; 0x3e
 80020ee:	d918      	bls.n	8002122 <PCD_EP_ISR_Handler+0x26e>
 80020f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
 80020f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <PCD_EP_ISR_Handler+0x256>
 8002104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002106:	3b01      	subs	r3, #1
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
 800210a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210c:	b29b      	uxth	r3, r3
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	b29b      	uxth	r3, r3
 8002112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800211a:	b29a      	uxth	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	e029      	b.n	8002176 <PCD_EP_ISR_Handler+0x2c2>
 8002122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d112      	bne.n	8002150 <PCD_EP_ISR_Handler+0x29c>
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002134:	b29a      	uxth	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002148:	b29a      	uxth	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	801a      	strh	r2, [r3, #0]
 800214e:	e012      	b.n	8002176 <PCD_EP_ISR_Handler+0x2c2>
 8002150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
 8002158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <PCD_EP_ISR_Handler+0x2b6>
 8002164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002166:	3301      	adds	r3, #1
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
 800216a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216c:	b29b      	uxth	r3, r3
 800216e:	029b      	lsls	r3, r3, #10
 8002170:	b29a      	uxth	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002186:	827b      	strh	r3, [r7, #18]
 8002188:	8a7b      	ldrh	r3, [r7, #18]
 800218a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800218e:	827b      	strh	r3, [r7, #18]
 8002190:	8a7b      	ldrh	r3, [r7, #18]
 8002192:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002196:	827b      	strh	r3, [r7, #18]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	8a7b      	ldrh	r3, [r7, #18]
 800219e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	8013      	strh	r3, [r2, #0]
 80021b2:	e22e      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021c8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f280 80f7 	bge.w	80023c0 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021e8:	4013      	ands	r3, r2
 80021ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002208:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002222:	7b1b      	ldrb	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d123      	bne.n	8002270 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	4413      	add	r3, r2
 8002242:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 808e 	beq.w	8002376 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	6959      	ldr	r1, [r3, #20]
 8002262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002264:	88da      	ldrh	r2, [r3, #6]
 8002266:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800226a:	f004 f959 	bl	8006520 <USB_ReadPMA>
 800226e:	e082      	b.n	8002376 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002272:	78db      	ldrb	r3, [r3, #3]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d10a      	bne.n	800228e <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002278:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800227c:	461a      	mov	r2, r3
 800227e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9d4 	bl	800262e <HAL_PCD_EP_DB_Receive>
 8002286:	4603      	mov	r3, r0
 8002288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800228c:	e073      	b.n	8002376 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	441a      	add	r2, r3
 80022ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d022      	beq.n	8002332 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	4413      	add	r3, r2
 8002306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002310:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002318:	2b00      	cmp	r3, #0
 800231a:	d02c      	beq.n	8002376 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	6959      	ldr	r1, [r3, #20]
 8002324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002326:	891a      	ldrh	r2, [r3, #8]
 8002328:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800232c:	f004 f8f8 	bl	8006520 <USB_ReadPMA>
 8002330:	e021      	b.n	8002376 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4413      	add	r3, r2
 800234c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800235a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002368:	6959      	ldr	r1, [r3, #20]
 800236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236c:	895a      	ldrh	r2, [r3, #10]
 800236e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002372:	f004 f8d5 	bl	8006520 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800237e:	441a      	add	r2, r3
 8002380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002382:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800238c:	441a      	add	r2, r3
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <PCD_EP_ISR_Handler+0x4f2>
 800239a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d206      	bcs.n	80023b4 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f005 ffe9 	bl	8008384 <HAL_PCD_DataOutStageCallback>
 80023b2:	e005      	b.n	80023c0 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fe41 	bl	8005042 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8122 	beq.w	8002612 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80023ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241c:	b29b      	uxth	r3, r3
 800241e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	78db      	ldrb	r3, [r3, #3]
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80a2 	bne.w	800256e <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	7b1b      	ldrb	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8093 	beq.w	8002560 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800243a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d046      	beq.n	80024d4 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d126      	bne.n	800249c <PCD_EP_ISR_Handler+0x5e8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	4413      	add	r3, r2
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	00da      	lsls	r2, r3, #3
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	4413      	add	r3, r2
 8002470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002480:	b29a      	uxth	r2, r3
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	801a      	strh	r2, [r3, #0]
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002494:	b29a      	uxth	r2, r3
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	e061      	b.n	8002560 <PCD_EP_ISR_Handler+0x6ac>
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d15d      	bne.n	8002560 <PCD_EP_ISR_Handler+0x6ac>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	4413      	add	r3, r2
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	00da      	lsls	r2, r3, #3
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	4413      	add	r3, r2
 80024c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	2200      	movs	r2, #0
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	e045      	b.n	8002560 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d126      	bne.n	8002530 <PCD_EP_ISR_Handler+0x67c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	4413      	add	r3, r2
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	00da      	lsls	r2, r3, #3
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	4413      	add	r3, r2
 8002504:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002514:	b29a      	uxth	r2, r3
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002528:	b29a      	uxth	r2, r3
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e017      	b.n	8002560 <PCD_EP_ISR_Handler+0x6ac>
 8002530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002532:	785b      	ldrb	r3, [r3, #1]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d113      	bne.n	8002560 <PCD_EP_ISR_Handler+0x6ac>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	4413      	add	r3, r2
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00da      	lsls	r2, r3, #3
 8002550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002552:	4413      	add	r3, r2
 8002554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f005 ff27 	bl	80083ba <HAL_PCD_DataInStageCallback>
 800256c:	e051      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800256e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d144      	bne.n	8002604 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4413      	add	r3, r2
 8002594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d907      	bls.n	80025be <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ba:	619a      	str	r2, [r3, #24]
 80025bc:	e002      	b.n	80025c4 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80025c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f005 fef1 	bl	80083ba <HAL_PCD_DataInStageCallback>
 80025d8:	e01b      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80025da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025e2:	441a      	add	r2, r3
 80025e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025f0:	441a      	add	r2, r3
 80025f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fd20 	bl	8005042 <USB_EPStartXfer>
 8002602:	e006      	b.n	8002612 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002604:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002608:	461a      	mov	r2, r3
 800260a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f917 	bl	8002840 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800261a:	b29b      	uxth	r3, r3
 800261c:	b21b      	sxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	f6ff ac4d 	blt.w	8001ebe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3758      	adds	r7, #88	; 0x58
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b088      	sub	sp, #32
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	4613      	mov	r3, r2
 800263a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d07c      	beq.n	8002740 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	4413      	add	r3, r2
 8002660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	699a      	ldr	r2, [r3, #24]
 8002670:	8b7b      	ldrh	r3, [r7, #26]
 8002672:	429a      	cmp	r2, r3
 8002674:	d306      	bcc.n	8002684 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	1ad2      	subs	r2, r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	619a      	str	r2, [r3, #24]
 8002682:	e002      	b.n	800268a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d123      	bne.n	80026da <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ac:	833b      	strh	r3, [r7, #24]
 80026ae:	8b3b      	ldrh	r3, [r7, #24]
 80026b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026b4:	833b      	strh	r3, [r7, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	8b3b      	ldrh	r3, [r7, #24]
 80026c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01f      	beq.n	8002724 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	82fb      	strh	r3, [r7, #22]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	8afb      	ldrh	r3, [r7, #22]
 8002710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002720:	b29b      	uxth	r3, r3
 8002722:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002724:	8b7b      	ldrh	r3, [r7, #26]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8085 	beq.w	8002836 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6959      	ldr	r1, [r3, #20]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	891a      	ldrh	r2, [r3, #8]
 8002738:	8b7b      	ldrh	r3, [r7, #26]
 800273a:	f003 fef1 	bl	8006520 <USB_ReadPMA>
 800273e:	e07a      	b.n	8002836 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	4413      	add	r3, r2
 800275a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002764:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	8b7b      	ldrh	r3, [r7, #26]
 800276c:	429a      	cmp	r2, r3
 800276e:	d306      	bcc.n	800277e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	8b7b      	ldrh	r3, [r7, #26]
 8002776:	1ad2      	subs	r2, r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	e002      	b.n	8002784 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d123      	bne.n	80027d4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	83fb      	strh	r3, [r7, #30]
 80027a8:	8bfb      	ldrh	r3, [r7, #30]
 80027aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027ae:	83fb      	strh	r3, [r7, #30]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	8bfb      	ldrh	r3, [r7, #30]
 80027c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11f      	bne.n	800281e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f8:	83bb      	strh	r3, [r7, #28]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	441a      	add	r2, r3
 8002808:	8bbb      	ldrh	r3, [r7, #28]
 800280a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800281a:	b29b      	uxth	r3, r3
 800281c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800281e:	8b7b      	ldrh	r3, [r7, #26]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6959      	ldr	r1, [r3, #20]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	895a      	ldrh	r2, [r3, #10]
 8002830:	8b7b      	ldrh	r3, [r7, #26]
 8002832:	f003 fe75 	bl	8006520 <USB_ReadPMA>
    }
  }

  return count;
 8002836:	8b7b      	ldrh	r3, [r7, #26]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0a2      	sub	sp, #136	; 0x88
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 81c5 	beq.w	8002be4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4413      	add	r3, r2
 8002874:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288a:	429a      	cmp	r2, r3
 800288c:	d907      	bls.n	800289e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	619a      	str	r2, [r3, #24]
 800289c:	e002      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 80b9 	bne.w	8002a20 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d126      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0xc4>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	4413      	add	r3, r2
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	00da      	lsls	r2, r3, #3
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	4413      	add	r3, r2
 80028d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	801a      	strh	r2, [r3, #0]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	e01a      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d116      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0xfa>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	4413      	add	r3, r2
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	00da      	lsls	r2, r3, #3
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	4413      	add	r3, r2
 800292e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	2200      	movs	r2, #0
 8002938:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d126      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x156>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	00da      	lsls	r2, r3, #3
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800297a:	b29a      	uxth	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e017      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d113      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x186>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	4413      	add	r3, r2
 80029ae:	623b      	str	r3, [r7, #32]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00da      	lsls	r2, r3, #3
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f005 fcf4 	bl	80083ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 82d2 	beq.w	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	827b      	strh	r3, [r7, #18]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	8a7b      	ldrh	r3, [r7, #18]
 8002a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]
 8002a1e:	e2b0      	b.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d021      	beq.n	8002a6e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	f040 8284 	bne.w	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a82:	441a      	add	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	441a      	add	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d309      	bcc.n	8002ab6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6a1a      	ldr	r2, [r3, #32]
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	1ad2      	subs	r2, r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	621a      	str	r2, [r3, #32]
 8002ab4:	e015      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002acc:	e009      	b.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d155      	bne.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x356>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	4413      	add	r3, r2
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	2b3e      	cmp	r3, #62	; 0x3e
 8002b16:	d916      	bls.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x306>
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b42:	801a      	strh	r2, [r3, #0]
 8002b44:	e043      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d112      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x332>
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	e02d      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x348>
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	3301      	adds	r3, #1
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	e01b      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	785b      	ldrb	r3, [r3, #1]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d117      	bne.n	8002bce <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	4413      	add	r3, r2
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	00da      	lsls	r2, r3, #3
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bcc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6959      	ldr	r1, [r3, #20]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	891a      	ldrh	r2, [r3, #8]
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f003 fc5d 	bl	800649c <USB_WritePMA>
 8002be2:	e1ce      	b.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d307      	bcc.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c20:	1ad2      	subs	r2, r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	619a      	str	r2, [r3, #24]
 8002c26:	e002      	b.n	8002c2e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 80c4 	bne.w	8002dc0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d126      	bne.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x44e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c54:	4413      	add	r3, r2
 8002c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	00da      	lsls	r2, r3, #3
 8002c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c60:	4413      	add	r3, r2
 8002c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c66:	667b      	str	r3, [r7, #100]	; 0x64
 8002c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	e01a      	b.n	8002cc4 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d116      	bne.n	8002cc4 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002caa:	4413      	add	r3, r2
 8002cac:	673b      	str	r3, [r7, #112]	; 0x70
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	00da      	lsls	r2, r3, #3
 8002cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d12f      	bne.n	8002d32 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cea:	4413      	add	r3, r2
 8002cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	00da      	lsls	r2, r3, #3
 8002cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d2e:	801a      	strh	r2, [r3, #0]
 8002d30:	e017      	b.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x522>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d113      	bne.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x522>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d48:	4413      	add	r3, r2
 8002d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	00da      	lsls	r2, r3, #3
 8002d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d54:	4413      	add	r3, r2
 8002d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d5e:	2200      	movs	r2, #0
 8002d60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f005 fb26 	bl	80083ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 8104 	bne.w	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	e0e0      	b.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d121      	bne.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 80b4 	bne.w	8002f82 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e22:	441a      	add	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e30:	441a      	add	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d309      	bcc.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	621a      	str	r2, [r3, #32]
 8002e54:	e015      	b.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002e5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e6c:	e009      	b.n	8002e82 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	663b      	str	r3, [r7, #96]	; 0x60
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d155      	bne.n	8002f3c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ea4:	4413      	add	r3, r2
 8002ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	00da      	lsls	r2, r3, #3
 8002eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eba:	2b3e      	cmp	r3, #62	; 0x3e
 8002ebc:	d916      	bls.n	8002eec <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x694>
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee8:	801a      	strh	r2, [r3, #0]
 8002eea:	e040      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d112      	bne.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e02a      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e018      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d114      	bne.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f52:	4413      	add	r3, r2
 8002f54:	663b      	str	r3, [r7, #96]	; 0x60
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	00da      	lsls	r2, r3, #3
 8002f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5e:	4413      	add	r3, r2
 8002f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6959      	ldr	r1, [r3, #20]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	895a      	ldrh	r2, [r3, #10]
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f003 fa8d 	bl	800649c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9c:	823b      	strh	r3, [r7, #16]
 8002f9e:	8a3b      	ldrh	r3, [r7, #16]
 8002fa0:	f083 0310 	eor.w	r3, r3, #16
 8002fa4:	823b      	strh	r3, [r7, #16]
 8002fa6:	8a3b      	ldrh	r3, [r7, #16]
 8002fa8:	f083 0320 	eor.w	r3, r3, #32
 8002fac:	823b      	strh	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	8a3b      	ldrh	r3, [r7, #16]
 8002fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3788      	adds	r7, #136	; 0x88
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	4613      	mov	r3, r2
 8002fec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00c      	beq.n	8003014 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e00a      	b.n	800302a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003014:	897a      	ldrh	r2, [r7, #10]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800302a:	893b      	ldrh	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	b29a      	uxth	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	80da      	strh	r2, [r3, #6]
 800303e:	e00b      	b.n	8003058 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2201      	movs	r2, #1
 8003044:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	b29a      	uxth	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	b29a      	uxth	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800308a:	b29b      	uxth	r3, r3
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40007000 	.word	0x40007000

080030d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e6:	d130      	bne.n	800314a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f4:	d038      	beq.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2232      	movs	r2, #50	; 0x32
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	3301      	adds	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800311c:	e002      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3b01      	subs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d102      	bne.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f2      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	d110      	bne.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e00f      	b.n	800316a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d007      	beq.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003166:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40007000 	.word	0x40007000
 800317c:	20000000 	.word	0x20000000
 8003180:	431bde83 	.word	0x431bde83

08003184 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800318e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003192:	6053      	str	r3, [r2, #4]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40007000 	.word	0x40007000

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e3fe      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4ba1      	ldr	r3, [pc, #644]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c0:	4b9e      	ldr	r3, [pc, #632]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80e4 	beq.w	80033a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <HAL_RCC_OscConfig+0x4a>
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	f040 808b 	bne.w	80032fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f040 8087 	bne.w	80032fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ee:	4b93      	ldr	r3, [pc, #588]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e3d6      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	4b8c      	ldr	r3, [pc, #560]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_RCC_OscConfig+0x7c>
 8003216:	4b89      	ldr	r3, [pc, #548]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321e:	e005      	b.n	800322c <HAL_RCC_OscConfig+0x88>
 8003220:	4b86      	ldr	r3, [pc, #536]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322c:	4293      	cmp	r3, r2
 800322e:	d223      	bcs.n	8003278 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fd53 	bl	8003ce0 <RCC_SetFlashLatencyFromMSIRange>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e3b7      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003244:	4b7d      	ldr	r3, [pc, #500]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7c      	ldr	r2, [pc, #496]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b7a      	ldr	r3, [pc, #488]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4977      	ldr	r1, [pc, #476]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4972      	ldr	r1, [pc, #456]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
 8003276:	e025      	b.n	80032c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003278:	4b70      	ldr	r3, [pc, #448]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6f      	ldr	r2, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	496a      	ldr	r1, [pc, #424]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003296:	4b69      	ldr	r3, [pc, #420]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	4965      	ldr	r1, [pc, #404]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fd13 	bl	8003ce0 <RCC_SetFlashLatencyFromMSIRange>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e377      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c4:	f000 fc80 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	495a      	ldr	r1, [pc, #360]	; (8003440 <HAL_RCC_OscConfig+0x29c>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_RCC_OscConfig+0x2a0>)
 80032e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032e4:	4b58      	ldr	r3, [pc, #352]	; (8003448 <HAL_RCC_OscConfig+0x2a4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd ffed 	bl	80012c8 <HAL_InitTick>
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d052      	beq.n	800339e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	e35b      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d032      	beq.n	800336a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4c      	ldr	r2, [pc, #304]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003310:	f7fe f82a 	bl	8001368 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003318:	f7fe f826 	bl	8001368 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e344      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a40      	ldr	r2, [pc, #256]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	493b      	ldr	r1, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003354:	4b39      	ldr	r3, [pc, #228]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	4936      	ldr	r1, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	e01a      	b.n	80033a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003376:	f7fd fff7 	bl	8001368 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800337e:	f7fd fff3 	bl	8001368 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e311      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003390:	4b2a      	ldr	r3, [pc, #168]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x1da>
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800339e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d074      	beq.n	8003496 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x21a>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d10e      	bne.n	80033d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d064      	beq.n	8003494 <HAL_RCC_OscConfig+0x2f0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d160      	bne.n	8003494 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e2ee      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x24a>
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a15      	ldr	r2, [pc, #84]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e01d      	b.n	800342a <HAL_RCC_OscConfig+0x286>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCC_OscConfig+0x26e>
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_RCC_OscConfig+0x298>)
 80033fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0c      	ldr	r2, [pc, #48]	; (800343c <HAL_RCC_OscConfig+0x298>)
 800340a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e00b      	b.n	800342a <HAL_RCC_OscConfig+0x286>
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a06      	ldr	r2, [pc, #24]	; (800343c <HAL_RCC_OscConfig+0x298>)
 8003424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01c      	beq.n	800346c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fd ff99 	bl	8001368 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003438:	e011      	b.n	800345e <HAL_RCC_OscConfig+0x2ba>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	0800b920 	.word	0x0800b920
 8003444:	20000000 	.word	0x20000000
 8003448:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fd ff8c 	bl	8001368 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e2aa      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345e:	4baf      	ldr	r3, [pc, #700]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x2a8>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd ff7c 	bl	8001368 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7fd ff78 	bl	8001368 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e296      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003486:	4ba5      	ldr	r3, [pc, #660]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x2d0>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d060      	beq.n	8003564 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x310>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d119      	bne.n	80034e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d116      	bne.n	80034e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b4:	4b99      	ldr	r3, [pc, #612]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x328>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e273      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	4b93      	ldr	r3, [pc, #588]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	4990      	ldr	r1, [pc, #576]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e0:	e040      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d023      	beq.n	8003532 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ea:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a8b      	ldr	r2, [pc, #556]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd ff37 	bl	8001368 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fd ff33 	bl	8001368 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e251      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003510:	4b82      	ldr	r3, [pc, #520]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b7f      	ldr	r3, [pc, #508]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	497c      	ldr	r1, [pc, #496]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b7a      	ldr	r3, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a79      	ldr	r2, [pc, #484]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fd ff13 	bl	8001368 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003546:	f7fd ff0f 	bl	8001368 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e22d      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003558:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03c      	beq.n	80035ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357e:	4a67      	ldr	r2, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd feee 	bl	8001368 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd feea 	bl	8001368 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e208      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a2:	4b5e      	ldr	r3, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80035a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCC_OscConfig+0x3ec>
 80035b0:	e01b      	b.n	80035ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b2:	4b5a      	ldr	r3, [pc, #360]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80035b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fd fed1 	bl	8001368 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fd fecd 	bl	8001368 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1eb      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ef      	bne.n	80035ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035fc:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	4a43      	ldr	r2, [pc, #268]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6593      	str	r3, [r2, #88]	; 0x58
 8003614:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003624:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCC_OscConfig+0x57c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d118      	bne.n	8003662 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x57c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <HAL_RCC_OscConfig+0x57c>)
 8003636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363c:	f7fd fe94 	bl	8001368 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fd fe90 	bl	8001368 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1ae      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003656:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_RCC_OscConfig+0x57c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_RCC_OscConfig+0x4d8>
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367a:	e024      	b.n	80036c6 <HAL_RCC_OscConfig+0x522>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b05      	cmp	r3, #5
 8003682:	d110      	bne.n	80036a6 <HAL_RCC_OscConfig+0x502>
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_RCC_OscConfig+0x578>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	4a20      	ldr	r2, [pc, #128]	; (800371c <HAL_RCC_OscConfig+0x578>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a4:	e00f      	b.n	80036c6 <HAL_RCC_OscConfig+0x522>
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b6:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	4a17      	ldr	r2, [pc, #92]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fd fe4b 	bl	8001368 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fd fe47 	bl	8001368 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e163      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x578>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0ed      	beq.n	80036d6 <HAL_RCC_OscConfig+0x532>
 80036fa:	e01a      	b.n	8003732 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fe34 	bl	8001368 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003702:	e00f      	b.n	8003724 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fd fe30 	bl	8001368 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d906      	bls.n	8003724 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e14c      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	4ba5      	ldr	r3, [pc, #660]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e8      	bne.n	8003704 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4ba0      	ldr	r3, [pc, #640]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a9f      	ldr	r2, [pc, #636]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003758:	4b98      	ldr	r3, [pc, #608]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800375a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375e:	4a97      	ldr	r2, [pc, #604]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd fdfe 	bl	8001368 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003770:	f7fd fdfa 	bl	8001368 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e118      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003782:	4b8e      	ldr	r3, [pc, #568]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x5cc>
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003792:	4b8a      	ldr	r3, [pc, #552]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003798:	4a88      	ldr	r2, [pc, #544]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fde1 	bl	8001368 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037aa:	f7fd fddd 	bl	8001368 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0fb      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037bc:	4b7f      	ldr	r3, [pc, #508]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ef      	bne.n	80037aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80ef 	beq.w	80039b2 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	2b02      	cmp	r3, #2
 80037da:	f040 80c5 	bne.w	8003968 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0203 	and.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d12c      	bne.n	800384c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	3b01      	subs	r3, #1
 80037fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d123      	bne.n	800384c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d11b      	bne.n	800384c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d113      	bne.n	800384c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d109      	bne.n	800384c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	3b01      	subs	r3, #1
 8003846:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d067      	beq.n	800391c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d062      	beq.n	8003918 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0a8      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003862:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800386e:	f7fd fd7b 	bl	8001368 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fd77 	bl	8001368 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e095      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003888:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003894:	4b49      	ldr	r3, [pc, #292]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <HAL_RCC_OscConfig+0x81c>)
 800389a:	4013      	ands	r3, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	4311      	orrs	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ae:	0212      	lsls	r2, r2, #8
 80038b0:	4311      	orrs	r1, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038b6:	0852      	lsrs	r2, r2, #1
 80038b8:	3a01      	subs	r2, #1
 80038ba:	0552      	lsls	r2, r2, #21
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038c2:	0852      	lsrs	r2, r2, #1
 80038c4:	3a01      	subs	r2, #1
 80038c6:	0652      	lsls	r2, r2, #25
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ce:	06d2      	lsls	r2, r2, #27
 80038d0:	430a      	orrs	r2, r1
 80038d2:	493a      	ldr	r1, [pc, #232]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038d8:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a37      	ldr	r2, [pc, #220]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80038de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80038ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038f0:	f7fd fd3a 	bl	8001368 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fd fd36 	bl	8001368 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e054      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003916:	e04c      	b.n	80039b2 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e04b      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d144      	bne.n	80039b2 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003934:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a20      	ldr	r2, [pc, #128]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800393a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003940:	f7fd fd12 	bl	8001368 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fd0e 	bl	8001368 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e02c      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x7a4>
 8003966:	e024      	b.n	80039b2 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d01f      	beq.n	80039ae <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fd fcf5 	bl	8001368 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fd fcf1 	bl	8001368 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e00f      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4905      	ldr	r1, [pc, #20]	; (80039bc <HAL_RCC_OscConfig+0x818>)
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCC_OscConfig+0x820>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	60cb      	str	r3, [r1, #12]
 80039ac:	e001      	b.n	80039b2 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	019d808c 	.word	0x019d808c
 80039c4:	feeefffc 	.word	0xfeeefffc

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0e7      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b72      	ldr	r3, [pc, #456]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 0207 	bic.w	r2, r3, #7
 80039f2:	4970      	ldr	r1, [pc, #448]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b6e      	ldr	r3, [pc, #440]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0cf      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d908      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4960      	ldr	r1, [pc, #384]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d04c      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a4e:	4b5a      	ldr	r3, [pc, #360]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d121      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0a6      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a66:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d115      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e09a      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e08e      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e086      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b46      	ldr	r3, [pc, #280]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4943      	ldr	r1, [pc, #268]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fc5a 	bl	8001368 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd fc56 	bl	8001368 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e06e      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b3a      	ldr	r3, [pc, #232]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d208      	bcs.n	8003b0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	492b      	ldr	r1, [pc, #172]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d210      	bcs.n	8003b3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 0207 	bic.w	r2, r3, #7
 8003b24:	4923      	ldr	r1, [pc, #140]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e036      	b.n	8003bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4918      	ldr	r1, [pc, #96]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4910      	ldr	r1, [pc, #64]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b7c:	f000 f824 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	490b      	ldr	r1, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x1f4>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd fb91 	bl	80012c8 <HAL_InitTick>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003baa:	7afb      	ldrb	r3, [r7, #11]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	0800b920 	.word	0x0800b920
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20000004 	.word	0x20000004

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x34>
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d121      	bne.n	8003c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d11e      	bne.n	8003c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bfc:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c08:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	e005      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c24:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10d      	bne.n	8003c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e004      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	d134      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c56:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d003      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0xac>
 8003c6c:	e005      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c70:	617b      	str	r3, [r7, #20]
      break;
 8003c72:	e005      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003c76:	617b      	str	r3, [r7, #20]
      break;
 8003c78:	e002      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	617b      	str	r3, [r7, #20]
      break;
 8003c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	fb02 f203 	mul.w	r2, r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	0e5b      	lsrs	r3, r3, #25
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	0800b930 	.word	0x0800b930
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	007a1200 	.word	0x007a1200

08003ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cec:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cf8:	f7ff f9e0 	bl	80030bc <HAL_PWREx_GetVoltageRange>
 8003cfc:	6178      	str	r0, [r7, #20]
 8003cfe:	e014      	b.n	8003d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d18:	f7ff f9d0 	bl	80030bc <HAL_PWREx_GetVoltageRange>
 8003d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d10b      	bne.n	8003d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d919      	bls.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d3c:	d902      	bls.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d3e:	2302      	movs	r3, #2
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	e013      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d44:	2301      	movs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	e010      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d902      	bls.n	8003d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d50:	2303      	movs	r3, #3
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	e00a      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d102      	bne.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e004      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b70      	cmp	r3, #112	; 0x70
 8003d66:	d101      	bne.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d68:	2301      	movs	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 0207 	bic.w	r2, r3, #7
 8003d74:	4909      	ldr	r1, [pc, #36]	; (8003d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d7c:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d001      	beq.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40022000 	.word	0x40022000

08003da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003da8:	2300      	movs	r3, #0
 8003daa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dac:	2300      	movs	r3, #0
 8003dae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d031      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dc4:	d01a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dca:	d814      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d009      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dd4:	d10f      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	4a5c      	ldr	r2, [pc, #368]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de2:	e00c      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fa1e 	bl	800422c <RCCEx_PLLSAI1_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	74fb      	strb	r3, [r7, #19]
      break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e04:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	494e      	ldr	r1, [pc, #312]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e1a:	e001      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 809e 	beq.w	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e32:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00d      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6593      	str	r3, [r2, #88]	; 0x58
 8003e54:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e60:	2301      	movs	r3, #1
 8003e62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b3a      	ldr	r3, [pc, #232]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a39      	ldr	r2, [pc, #228]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e70:	f7fd fa7a 	bl	8001368 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e76:	e009      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd fa76 	bl	8001368 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d902      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	74fb      	strb	r3, [r7, #19]
        break;
 8003e8a:	e005      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e8c:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ef      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d15a      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e9e:	4b2b      	ldr	r3, [pc, #172]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d019      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d016      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fa36 	bl	8001368 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efe:	e00b      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fd fa32 	bl	8001368 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d902      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	74fb      	strb	r3, [r7, #19]
            break;
 8003f16:	e006      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ec      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2c:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	4904      	ldr	r1, [pc, #16]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f42:	e009      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	74bb      	strb	r3, [r7, #18]
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f58:	7c7b      	ldrb	r3, [r7, #17]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4bb2      	ldr	r3, [pc, #712]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	4ab1      	ldr	r2, [pc, #708]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f76:	4bac      	ldr	r3, [pc, #688]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f023 0203 	bic.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	49a8      	ldr	r1, [pc, #672]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f98:	4ba3      	ldr	r3, [pc, #652]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 020c 	bic.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	49a0      	ldr	r1, [pc, #640]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fba:	4b9b      	ldr	r3, [pc, #620]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	4997      	ldr	r1, [pc, #604]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fdc:	4b92      	ldr	r3, [pc, #584]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	498f      	ldr	r1, [pc, #572]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffe:	4b8a      	ldr	r3, [pc, #552]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	4986      	ldr	r1, [pc, #536]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004020:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	497e      	ldr	r1, [pc, #504]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004042:	4b79      	ldr	r3, [pc, #484]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004048:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	4975      	ldr	r1, [pc, #468]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004064:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	496d      	ldr	r1, [pc, #436]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004086:	4b68      	ldr	r3, [pc, #416]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	4964      	ldr	r1, [pc, #400]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d028      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a8:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	495c      	ldr	r1, [pc, #368]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b57      	ldr	r3, [pc, #348]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a56      	ldr	r2, [pc, #344]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
 80040d4:	e011      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040de:	d10c      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f8a0 	bl	800422c <RCCEx_PLLSAI1_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d028      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004106:	4b48      	ldr	r3, [pc, #288]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	4944      	ldr	r1, [pc, #272]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004124:	d106      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004126:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004130:	60d3      	str	r3, [r2, #12]
 8004132:	e011      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413c:	d10c      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f871 	bl	800422c <RCCEx_PLLSAI1_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d028      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004164:	4b30      	ldr	r3, [pc, #192]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	492d      	ldr	r1, [pc, #180]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004182:	d106      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004184:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	e011      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419a:	d10c      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f842 	bl	800422c <RCCEx_PLLSAI1_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01c      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	4915      	ldr	r1, [pc, #84]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	2102      	movs	r1, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f81f 	bl	800422c <RCCEx_PLLSAI1_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	4904      	ldr	r1, [pc, #16]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800421e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000

0800422c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800423a:	4b74      	ldr	r3, [pc, #464]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0203 	and.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d10d      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
       ||
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800425e:	4b6b      	ldr	r3, [pc, #428]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
       ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d047      	beq.n	8004302 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	e044      	b.n	8004302 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d018      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x86>
 8004280:	2b03      	cmp	r3, #3
 8004282:	d825      	bhi.n	80042d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004284:	2b01      	cmp	r3, #1
 8004286:	d002      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x62>
 8004288:	2b02      	cmp	r3, #2
 800428a:	d009      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x74>
 800428c:	e020      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800428e:	4b5f      	ldr	r3, [pc, #380]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11d      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429e:	e01a      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042a0:	4b5a      	ldr	r3, [pc, #360]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b0:	e013      	b.n	80042da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042b2:	4b56      	ldr	r3, [pc, #344]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042be:	4b53      	ldr	r3, [pc, #332]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ce:	e006      	b.n	80042de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      break;
 80042d4:	e004      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042de:	bf00      	nop
    }

    if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042e6:	4b49      	ldr	r3, [pc, #292]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	430b      	orrs	r3, r1
 80042fc:	4943      	ldr	r1, [pc, #268]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d17c      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004308:	4b40      	ldr	r3, [pc, #256]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3f      	ldr	r2, [pc, #252]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800430e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004314:	f7fd f828 	bl	8001368 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800431a:	e009      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431c:	f7fd f824 	bl	8001368 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
        break;
 800432e:	e005      	b.n	800433c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ef      	bne.n	800431c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d15f      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d110      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6892      	ldr	r2, [r2, #8]
 8004358:	0211      	lsls	r1, r2, #8
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68d2      	ldr	r2, [r2, #12]
 800435e:	06d2      	lsls	r2, r2, #27
 8004360:	430a      	orrs	r2, r1
 8004362:	492a      	ldr	r1, [pc, #168]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	610b      	str	r3, [r1, #16]
 8004368:	e027      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d112      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004370:	4b26      	ldr	r3, [pc, #152]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004378:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6892      	ldr	r2, [r2, #8]
 8004380:	0211      	lsls	r1, r2, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6912      	ldr	r2, [r2, #16]
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0552      	lsls	r2, r2, #21
 800438c:	430a      	orrs	r2, r1
 800438e:	491f      	ldr	r1, [pc, #124]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	610b      	str	r3, [r1, #16]
 8004394:	e011      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800439e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6892      	ldr	r2, [r2, #8]
 80043a6:	0211      	lsls	r1, r2, #8
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6952      	ldr	r2, [r2, #20]
 80043ac:	0852      	lsrs	r2, r2, #1
 80043ae:	3a01      	subs	r2, #1
 80043b0:	0652      	lsls	r2, r2, #25
 80043b2:	430a      	orrs	r2, r1
 80043b4:	4915      	ldr	r1, [pc, #84]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fc ffcf 	bl	8001368 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043cc:	e009      	b.n	80043e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ce:	f7fc ffcb 	bl	8001368 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	73fb      	strb	r3, [r7, #15]
          break;
 80043e0:	e005      	b.n	80043ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4903      	ldr	r1, [pc, #12]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000

08004410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004410:	b084      	sub	sp, #16
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	f107 0014 	add.w	r0, r7, #20
 800441e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	b004      	add	sp, #16
 8004430:	4770      	bx	lr

08004432 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004442:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004446:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004468:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800446c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	b29b      	uxth	r3, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	b29b      	uxth	r3, r3
 800447e:	4013      	ands	r3, r2
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 0014 	add.w	r0, r7, #20
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	b004      	add	sp, #16
 80044f0:	4770      	bx	lr
	...

080044f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b09d      	sub	sp, #116	; 0x74
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	78db      	ldrb	r3, [r3, #3]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d81f      	bhi.n	8004566 <USB_ActivateEndpoint+0x72>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <USB_ActivateEndpoint+0x38>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	0800453d 	.word	0x0800453d
 8004530:	08004559 	.word	0x08004559
 8004534:	0800456f 	.word	0x0800456f
 8004538:	0800454b 	.word	0x0800454b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800453c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004544:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004548:	e012      	b.n	8004570 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800454a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800454e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004552:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004556:	e00b      	b.n	8004570 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800455c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004560:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004564:	e004      	b.n	8004570 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800456c:	e000      	b.n	8004570 <USB_ActivateEndpoint+0x7c>
      break;
 800456e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	b21b      	sxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	b21a      	sxth	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b21b      	sxth	r3, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	7b1b      	ldrb	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 816e 	bne.w	80048c2 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8084 	beq.w	80046f8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	00da      	lsls	r2, r3, #3
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	88db      	ldrh	r3, [r3, #6]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	827b      	strh	r3, [r7, #18]
 8004632:	8a7b      	ldrh	r3, [r7, #18]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01b      	beq.n	8004674 <USB_ActivateEndpoint+0x180>
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	823b      	strh	r3, [r7, #16]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	8a3b      	ldrh	r3, [r7, #16]
 8004660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	78db      	ldrb	r3, [r3, #3]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d020      	beq.n	80046be <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004692:	81bb      	strh	r3, [r7, #12]
 8004694:	89bb      	ldrh	r3, [r7, #12]
 8004696:	f083 0320 	eor.w	r3, r3, #32
 800469a:	81bb      	strh	r3, [r7, #12]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	89bb      	ldrh	r3, [r7, #12]
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
 80046bc:	e2cb      	b.n	8004c56 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	81fb      	strh	r3, [r7, #14]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	89fb      	ldrh	r3, [r7, #14]
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
 80046f6:	e2ae      	b.n	8004c56 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	633b      	str	r3, [r7, #48]	; 0x30
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	4413      	add	r3, r2
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	00da      	lsls	r2, r3, #3
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	4413      	add	r3, r2
 8004716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	88db      	ldrh	r3, [r3, #6]
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	4413      	add	r3, r2
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	00da      	lsls	r2, r3, #3
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	4413      	add	r3, r2
 800474a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b3e      	cmp	r3, #62	; 0x3e
 8004756:	d918      	bls.n	800478a <USB_ActivateEndpoint+0x296>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <USB_ActivateEndpoint+0x27e>
 800476c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476e:	3b01      	subs	r3, #1
 8004770:	66bb      	str	r3, [r7, #104]	; 0x68
 8004772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004774:	b29b      	uxth	r3, r3
 8004776:	029b      	lsls	r3, r3, #10
 8004778:	b29b      	uxth	r3, r3
 800477a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004782:	b29a      	uxth	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	e029      	b.n	80047de <USB_ActivateEndpoint+0x2ea>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d112      	bne.n	80047b8 <USB_ActivateEndpoint+0x2c4>
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800479c:	b29a      	uxth	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	e012      	b.n	80047de <USB_ActivateEndpoint+0x2ea>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <USB_ActivateEndpoint+0x2de>
 80047cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ce:	3301      	adds	r3, #1
 80047d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80047ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01b      	beq.n	800482e <USB_ActivateEndpoint+0x33a>
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480c:	843b      	strh	r3, [r7, #32]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	8c3b      	ldrh	r3, [r7, #32]
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d124      	bne.n	8004880 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	83bb      	strh	r3, [r7, #28]
 800484e:	8bbb      	ldrh	r3, [r7, #28]
 8004850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004854:	83bb      	strh	r3, [r7, #28]
 8004856:	8bbb      	ldrh	r3, [r7, #28]
 8004858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800485c:	83bb      	strh	r3, [r7, #28]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	8bbb      	ldrh	r3, [r7, #28]
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]
 800487e:	e1ea      	b.n	8004c56 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	83fb      	strh	r3, [r7, #30]
 8004898:	8bfb      	ldrh	r3, [r7, #30]
 800489a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800489e:	83fb      	strh	r3, [r7, #30]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	8bfb      	ldrh	r3, [r7, #30]
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
 80048c0:	e1c9      	b.n	8004c56 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d11e      	bne.n	8004908 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	441a      	add	r2, r3
 80048ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
 8004906:	e01d      	b.n	8004944 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	b29b      	uxth	r3, r3
 8004942:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004954:	4413      	add	r3, r2
 8004956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	00da      	lsls	r2, r3, #3
 800495e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004960:	4413      	add	r3, r2
 8004962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004966:	65bb      	str	r3, [r7, #88]	; 0x58
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	891b      	ldrh	r3, [r3, #8]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	657b      	str	r3, [r7, #84]	; 0x54
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004988:	4413      	add	r3, r2
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	00da      	lsls	r2, r3, #3
 8004992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004994:	4413      	add	r3, r2
 8004996:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	895b      	ldrh	r3, [r3, #10]
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 8093 	bne.w	8004adc <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80049c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01b      	beq.n	8004a0a <USB_ActivateEndpoint+0x516>
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01b      	beq.n	8004a5a <USB_ActivateEndpoint+0x566>
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a70:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a78:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a80:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8013      	strh	r3, [r2, #0]
 8004ada:	e0bc      	b.n	8004c56 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01d      	beq.n	8004b34 <USB_ActivateEndpoint+0x640>
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01d      	beq.n	8004b8c <USB_ActivateEndpoint+0x698>
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d024      	beq.n	8004bde <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004baa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bb2:	f083 0320 	eor.w	r3, r3, #32
 8004bb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]
 8004bdc:	e01d      	b.n	8004c1a <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004c56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3774      	adds	r7, #116	; 0x74
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop

08004c68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b08d      	sub	sp, #52	; 0x34
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	7b1b      	ldrb	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 808e 	bne.w	8004d98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d044      	beq.n	8004d0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	81bb      	strh	r3, [r7, #12]
 8004c92:	89bb      	ldrh	r3, [r7, #12]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <USB_DeactivateEndpoint+0x6c>
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	817b      	strh	r3, [r7, #10]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ccc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cea:	813b      	strh	r3, [r7, #8]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	893b      	ldrh	r3, [r7, #8]
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
 8004d0c:	e192      	b.n	8005034 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	827b      	strh	r3, [r7, #18]
 8004d1c:	8a7b      	ldrh	r3, [r7, #18]
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01b      	beq.n	8004d5e <USB_DeactivateEndpoint+0xf6>
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	823b      	strh	r3, [r7, #16]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	8a3b      	ldrh	r3, [r7, #16]
 8004d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	81fb      	strh	r3, [r7, #14]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
 8004d96:	e14d      	b.n	8005034 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 80a5 	bne.w	8004eec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	843b      	strh	r3, [r7, #32]
 8004db0:	8c3b      	ldrh	r3, [r7, #32]
 8004db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01b      	beq.n	8004df2 <USB_DeactivateEndpoint+0x18a>
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	83fb      	strh	r3, [r7, #30]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	441a      	add	r2, r3
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	83bb      	strh	r3, [r7, #28]
 8004e00:	8bbb      	ldrh	r3, [r7, #28]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01b      	beq.n	8004e42 <USB_DeactivateEndpoint+0x1da>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	837b      	strh	r3, [r7, #26]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	441a      	add	r2, r3
 8004e2c:	8b7b      	ldrh	r3, [r7, #26]
 8004e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e58:	833b      	strh	r3, [r7, #24]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	8b3b      	ldrh	r3, [r7, #24]
 8004e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	82fb      	strh	r3, [r7, #22]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	441a      	add	r2, r3
 8004e9c:	8afb      	ldrh	r3, [r7, #22]
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec8:	82bb      	strh	r3, [r7, #20]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8abb      	ldrh	r3, [r7, #20]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
 8004eea:	e0a3      	b.n	8005034 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004efa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <USB_DeactivateEndpoint+0x2d4>
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <USB_DeactivateEndpoint+0x324>
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	847b      	strh	r3, [r7, #34]	; 0x22
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3734      	adds	r7, #52	; 0x34
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b0c2      	sub	sp, #264	; 0x108
 8005046:	af00      	add	r7, sp, #0
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	6018      	str	r0, [r3, #0]
 800504c:	463b      	mov	r3, r7
 800504e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b01      	cmp	r3, #1
 8005058:	f040 8509 	bne.w	8005a6e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800505c:	463b      	mov	r3, r7
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699a      	ldr	r2, [r3, #24]
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d905      	bls.n	8005078 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005076:	e004      	b.n	8005082 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	7b1b      	ldrb	r3, [r3, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d128      	bne.n	80050de <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6959      	ldr	r1, [r3, #20]
 8005092:	463b      	mov	r3, r7
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	88da      	ldrh	r2, [r3, #6]
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509c:	b29b      	uxth	r3, r3
 800509e:	1d38      	adds	r0, r7, #4
 80050a0:	6800      	ldr	r0, [r0, #0]
 80050a2:	f001 f9fb 	bl	800649c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	463b      	mov	r3, r7
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	00da      	lsls	r2, r3, #3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	f000 bc9f 	b.w	8005a1c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	f040 8347 	bne.w	8005778 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	f240 82eb 	bls.w	80056d2 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	463b      	mov	r3, r7
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	463b      	mov	r3, r7
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800512c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005134:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	b29b      	uxth	r3, r3
 800513e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	463b      	mov	r3, r7
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	463b      	mov	r3, r7
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8159 	beq.w	8005420 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d164      	bne.n	8005248 <USB_EPStartXfer+0x206>
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	4413      	add	r3, r2
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	00da      	lsls	r2, r3, #3
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	4413      	add	r3, r2
 80051a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ac:	2b3e      	cmp	r3, #62	; 0x3e
 80051ae:	d91c      	bls.n	80051ea <USB_EPStartXfer+0x1a8>
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <USB_EPStartXfer+0x18e>
 80051c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051ca:	3b01      	subs	r3, #1
 80051cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29b      	uxth	r3, r3
 80051da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	801a      	strh	r2, [r3, #0]
 80051e8:	e04a      	b.n	8005280 <USB_EPStartXfer+0x23e>
 80051ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d112      	bne.n	8005218 <USB_EPStartXfer+0x1d6>
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005210:	b29a      	uxth	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e033      	b.n	8005280 <USB_EPStartXfer+0x23e>
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <USB_EPStartXfer+0x1f6>
 800522e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005232:	3301      	adds	r3, #1
 8005234:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005238:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800523c:	b29b      	uxth	r3, r3
 800523e:	029b      	lsls	r3, r3, #10
 8005240:	b29a      	uxth	r2, r3
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e01b      	b.n	8005280 <USB_EPStartXfer+0x23e>
 8005248:	463b      	mov	r3, r7
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d116      	bne.n	8005280 <USB_EPStartXfer+0x23e>
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525a:	b29b      	uxth	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	4413      	add	r3, r2
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
 8005264:	463b      	mov	r3, r7
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	00da      	lsls	r2, r3, #3
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	4413      	add	r3, r2
 8005270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	b29a      	uxth	r2, r3
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	895b      	ldrh	r3, [r3, #10]
 8005286:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6959      	ldr	r1, [r3, #20]
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	b29b      	uxth	r3, r3
 8005296:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800529a:	1d38      	adds	r0, r7, #4
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f001 f8fd 	bl	800649c <USB_WritePMA>
            ep->xfer_buff += len;
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ac:	441a      	add	r2, r3
 80052ae:	463b      	mov	r3, r7
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6a1a      	ldr	r2, [r3, #32]
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d909      	bls.n	80052d8 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a1a      	ldr	r2, [r3, #32]
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	621a      	str	r2, [r3, #32]
 80052d6:	e008      	b.n	80052ea <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ea:	463b      	mov	r3, r7
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d164      	bne.n	80053be <USB_EPStartXfer+0x37c>
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	4413      	add	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	463b      	mov	r3, r7
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	00da      	lsls	r2, r3, #3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	4413      	add	r3, r2
 8005318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005322:	2b3e      	cmp	r3, #62	; 0x3e
 8005324:	d91c      	bls.n	8005360 <USB_EPStartXfer+0x31e>
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <USB_EPStartXfer+0x304>
 800533c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005340:	3b01      	subs	r3, #1
 8005342:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534a:	b29b      	uxth	r3, r3
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	b29b      	uxth	r3, r3
 8005350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005358:	b29a      	uxth	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	e04d      	b.n	80053fc <USB_EPStartXfer+0x3ba>
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	2b00      	cmp	r3, #0
 8005366:	d112      	bne.n	800538e <USB_EPStartXfer+0x34c>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005372:	b29a      	uxth	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005386:	b29a      	uxth	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e036      	b.n	80053fc <USB_EPStartXfer+0x3ba>
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <USB_EPStartXfer+0x36c>
 80053a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a8:	3301      	adds	r3, #1
 80053aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e01e      	b.n	80053fc <USB_EPStartXfer+0x3ba>
 80053be:	463b      	mov	r3, r7
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d119      	bne.n	80053fc <USB_EPStartXfer+0x3ba>
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	4413      	add	r3, r2
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	00da      	lsls	r2, r3, #3
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	4413      	add	r3, r2
 80053ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	891b      	ldrh	r3, [r3, #8]
 8005402:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005406:	463b      	mov	r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6959      	ldr	r1, [r3, #20]
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005410:	b29b      	uxth	r3, r3
 8005412:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005416:	1d38      	adds	r0, r7, #4
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	f001 f83f 	bl	800649c <USB_WritePMA>
 800541e:	e2fd      	b.n	8005a1c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d164      	bne.n	80054f4 <USB_EPStartXfer+0x4b2>
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543e:	4413      	add	r3, r2
 8005440:	64bb      	str	r3, [r7, #72]	; 0x48
 8005442:	463b      	mov	r3, r7
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	00da      	lsls	r2, r3, #3
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	4413      	add	r3, r2
 800544e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005452:	647b      	str	r3, [r7, #68]	; 0x44
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005458:	2b3e      	cmp	r3, #62	; 0x3e
 800545a:	d91c      	bls.n	8005496 <USB_EPStartXfer+0x454>
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <USB_EPStartXfer+0x43a>
 8005472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005476:	3b01      	subs	r3, #1
 8005478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800547c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005480:	b29b      	uxth	r3, r3
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	b29b      	uxth	r3, r3
 8005486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548e:	b29a      	uxth	r2, r3
 8005490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	e04d      	b.n	8005532 <USB_EPStartXfer+0x4f0>
 8005496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549a:	2b00      	cmp	r3, #0
 800549c:	d112      	bne.n	80054c4 <USB_EPStartXfer+0x482>
 800549e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29a      	uxth	r2, r3
 80054be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e036      	b.n	8005532 <USB_EPStartXfer+0x4f0>
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <USB_EPStartXfer+0x4a2>
 80054da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054de:	3301      	adds	r3, #1
 80054e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e01e      	b.n	8005532 <USB_EPStartXfer+0x4f0>
 80054f4:	463b      	mov	r3, r7
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d119      	bne.n	8005532 <USB_EPStartXfer+0x4f0>
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	653b      	str	r3, [r7, #80]	; 0x50
 8005504:	1d3b      	adds	r3, r7, #4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550c:	b29b      	uxth	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005512:	4413      	add	r3, r2
 8005514:	653b      	str	r3, [r7, #80]	; 0x50
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00da      	lsls	r2, r3, #3
 800551e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005520:	4413      	add	r3, r2
 8005522:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552c:	b29a      	uxth	r2, r3
 800552e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005530:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	891b      	ldrh	r3, [r3, #8]
 8005538:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6959      	ldr	r1, [r3, #20]
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005546:	b29b      	uxth	r3, r3
 8005548:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800554c:	1d38      	adds	r0, r7, #4
 800554e:	6800      	ldr	r0, [r0, #0]
 8005550:	f000 ffa4 	bl	800649c <USB_WritePMA>
            ep->xfer_buff += len;
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555e:	441a      	add	r2, r3
 8005560:	463b      	mov	r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a1a      	ldr	r2, [r3, #32]
 800556c:	463b      	mov	r3, r7
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d909      	bls.n	800558a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8005576:	463b      	mov	r3, r7
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005580:	1ad2      	subs	r2, r2, r3
 8005582:	463b      	mov	r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	621a      	str	r2, [r3, #32]
 8005588:	e008      	b.n	800559c <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
 80055a2:	463b      	mov	r3, r7
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d164      	bne.n	8005676 <USB_EPStartXfer+0x634>
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	4413      	add	r3, r2
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055c4:	463b      	mov	r3, r7
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	00da      	lsls	r2, r3, #3
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055da:	2b3e      	cmp	r3, #62	; 0x3e
 80055dc:	d91c      	bls.n	8005618 <USB_EPStartXfer+0x5d6>
 80055de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <USB_EPStartXfer+0x5bc>
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	3b01      	subs	r3, #1
 80055fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	b29b      	uxth	r3, r3
 8005604:	029b      	lsls	r3, r3, #10
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005610:	b29a      	uxth	r2, r3
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	e04a      	b.n	80056ae <USB_EPStartXfer+0x66c>
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561c:	2b00      	cmp	r3, #0
 800561e:	d112      	bne.n	8005646 <USB_EPStartXfer+0x604>
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800562a:	b29a      	uxth	r2, r3
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563e:	b29a      	uxth	r2, r3
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	e033      	b.n	80056ae <USB_EPStartXfer+0x66c>
 8005646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <USB_EPStartXfer+0x624>
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	3301      	adds	r3, #1
 8005662:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29a      	uxth	r2, r3
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	e01b      	b.n	80056ae <USB_EPStartXfer+0x66c>
 8005676:	463b      	mov	r3, r7
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d116      	bne.n	80056ae <USB_EPStartXfer+0x66c>
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568e:	4413      	add	r3, r2
 8005690:	643b      	str	r3, [r7, #64]	; 0x40
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	00da      	lsls	r2, r3, #3
 800569a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569c:	4413      	add	r3, r2
 800569e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056ae:	463b      	mov	r3, r7
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	895b      	ldrh	r3, [r3, #10]
 80056b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056b8:	463b      	mov	r3, r7
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6959      	ldr	r1, [r3, #20]
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056c8:	1d38      	adds	r0, r7, #4
 80056ca:	6800      	ldr	r0, [r0, #0]
 80056cc:	f000 fee6 	bl	800649c <USB_WritePMA>
 80056d0:	e1a4      	b.n	8005a1c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800570c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571c:	b29b      	uxth	r3, r3
 800571e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005734:	4413      	add	r3, r2
 8005736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	00da      	lsls	r2, r3, #3
 8005740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005742:	4413      	add	r3, r2
 8005744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005748:	65bb      	str	r3, [r7, #88]	; 0x58
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574e:	b29a      	uxth	r2, r3
 8005750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005752:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	891b      	ldrh	r3, [r3, #8]
 800575a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6959      	ldr	r1, [r3, #20]
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005768:	b29b      	uxth	r3, r3
 800576a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800576e:	1d38      	adds	r0, r7, #4
 8005770:	6800      	ldr	r0, [r0, #0]
 8005772:	f000 fe93 	bl	800649c <USB_WritePMA>
 8005776:	e151      	b.n	8005a1c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 809b 	beq.w	80058dc <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	673b      	str	r3, [r7, #112]	; 0x70
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d164      	bne.n	8005880 <USB_EPStartXfer+0x83e>
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ca:	4413      	add	r3, r2
 80057cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	00da      	lsls	r2, r3, #3
 80057d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057d8:	4413      	add	r3, r2
 80057da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057de:	667b      	str	r3, [r7, #100]	; 0x64
 80057e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e4:	2b3e      	cmp	r3, #62	; 0x3e
 80057e6:	d91c      	bls.n	8005822 <USB_EPStartXfer+0x7e0>
 80057e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <USB_EPStartXfer+0x7c6>
 80057fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005802:	3b01      	subs	r3, #1
 8005804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005808:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800580c:	b29b      	uxth	r3, r3
 800580e:	029b      	lsls	r3, r3, #10
 8005810:	b29b      	uxth	r3, r3
 8005812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800581a:	b29a      	uxth	r2, r3
 800581c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	e04a      	b.n	80058b8 <USB_EPStartXfer+0x876>
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005826:	2b00      	cmp	r3, #0
 8005828:	d112      	bne.n	8005850 <USB_EPStartXfer+0x80e>
 800582a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005834:	b29a      	uxth	r2, r3
 8005836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e033      	b.n	80058b8 <USB_EPStartXfer+0x876>
 8005850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800585a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <USB_EPStartXfer+0x82e>
 8005866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800586a:	3301      	adds	r3, #1
 800586c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005870:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005874:	b29b      	uxth	r3, r3
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	b29a      	uxth	r2, r3
 800587a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e01b      	b.n	80058b8 <USB_EPStartXfer+0x876>
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d116      	bne.n	80058b8 <USB_EPStartXfer+0x876>
 800588a:	1d3b      	adds	r3, r7, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005892:	b29b      	uxth	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005898:	4413      	add	r3, r2
 800589a:	673b      	str	r3, [r7, #112]	; 0x70
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	00da      	lsls	r2, r3, #3
 80058a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a6:	4413      	add	r3, r2
 80058a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	895b      	ldrh	r3, [r3, #10]
 80058be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6959      	ldr	r1, [r3, #20]
 80058c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058d2:	1d38      	adds	r0, r7, #4
 80058d4:	6800      	ldr	r0, [r0, #0]
 80058d6:	f000 fde1 	bl	800649c <USB_WritePMA>
 80058da:	e09f      	b.n	8005a1c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d164      	bne.n	80059b0 <USB_EPStartXfer+0x96e>
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058fa:	4413      	add	r3, r2
 80058fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	00da      	lsls	r2, r3, #3
 8005906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005908:	4413      	add	r3, r2
 800590a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800590e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005914:	2b3e      	cmp	r3, #62	; 0x3e
 8005916:	d91c      	bls.n	8005952 <USB_EPStartXfer+0x910>
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_EPStartXfer+0x8f6>
 800592e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005932:	3b01      	subs	r3, #1
 8005934:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594a:	b29a      	uxth	r2, r3
 800594c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e053      	b.n	80059fa <USB_EPStartXfer+0x9b8>
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005956:	2b00      	cmp	r3, #0
 8005958:	d112      	bne.n	8005980 <USB_EPStartXfer+0x93e>
 800595a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005964:	b29a      	uxth	r2, r3
 8005966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005978:	b29a      	uxth	r2, r3
 800597a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597c:	801a      	strh	r2, [r3, #0]
 800597e:	e03c      	b.n	80059fa <USB_EPStartXfer+0x9b8>
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800598a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <USB_EPStartXfer+0x95e>
 8005996:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800599a:	3301      	adds	r3, #1
 800599c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e024      	b.n	80059fa <USB_EPStartXfer+0x9b8>
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d11f      	bne.n	80059fa <USB_EPStartXfer+0x9b8>
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d2:	4413      	add	r3, r2
 80059d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00da      	lsls	r2, r3, #3
 80059e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	891b      	ldrh	r3, [r3, #8]
 8005a00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a04:	463b      	mov	r3, r7
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6959      	ldr	r1, [r3, #20]
 8005a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a14:	1d38      	adds	r0, r7, #4
 8005a16:	6800      	ldr	r0, [r0, #0]
 8005a18:	f000 fd40 	bl	800649c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	817b      	strh	r3, [r7, #10]
 8005a38:	897b      	ldrh	r3, [r7, #10]
 8005a3a:	f083 0310 	eor.w	r3, r3, #16
 8005a3e:	817b      	strh	r3, [r7, #10]
 8005a40:	897b      	ldrh	r3, [r7, #10]
 8005a42:	f083 0320 	eor.w	r3, r3, #32
 8005a46:	817b      	strh	r3, [r7, #10]
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	897b      	ldrh	r3, [r7, #10]
 8005a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8013      	strh	r3, [r2, #0]
 8005a6c:	e3b5      	b.n	80061da <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a6e:	463b      	mov	r3, r7
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	7b1b      	ldrb	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 8090 	bne.w	8005b9a <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d90e      	bls.n	8005aa8 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	619a      	str	r2, [r3, #24]
 8005aa6:	e008      	b.n	8005aba <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	00da      	lsls	r2, r3, #3
 8005ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af2:	2b3e      	cmp	r3, #62	; 0x3e
 8005af4:	d91d      	bls.n	8005b32 <USB_EPStartXfer+0xaf0>
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <USB_EPStartXfer+0xad4>
 8005b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b10:	3b01      	subs	r3, #1
 8005b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e325      	b.n	800617e <USB_EPStartXfer+0x113c>
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d116      	bne.n	8005b68 <USB_EPStartXfer+0xb26>
 8005b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e30a      	b.n	800617e <USB_EPStartXfer+0x113c>
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <USB_EPStartXfer+0xb46>
 8005b7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b82:	3301      	adds	r3, #1
 8005b84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	029b      	lsls	r3, r3, #10
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e2f1      	b.n	800617e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	78db      	ldrb	r3, [r3, #3]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	f040 818f 	bne.w	8005ec4 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d175      	bne.n	8005c9c <USB_EPStartXfer+0xc5a>
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc8:	4413      	add	r3, r2
 8005bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	00da      	lsls	r2, r3, #3
 8005bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b3e      	cmp	r3, #62	; 0x3e
 8005bec:	d91f      	bls.n	8005c2e <USB_EPStartXfer+0xbec>
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <USB_EPStartXfer+0xbd0>
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	e05c      	b.n	8005ce8 <USB_EPStartXfer+0xca6>
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d116      	bne.n	8005c66 <USB_EPStartXfer+0xc24>
 8005c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e040      	b.n	8005ce8 <USB_EPStartXfer+0xca6>
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d004      	beq.n	8005c8a <USB_EPStartXfer+0xc48>
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	3301      	adds	r3, #1
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e025      	b.n	8005ce8 <USB_EPStartXfer+0xca6>
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d120      	bne.n	8005ce8 <USB_EPStartXfer+0xca6>
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cae:	1d3b      	adds	r3, r7, #4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	00da      	lsls	r2, r3, #3
 8005ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d175      	bne.n	8005de6 <USB_EPStartXfer+0xda4>
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d12:	4413      	add	r3, r2
 8005d14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	00da      	lsls	r2, r3, #3
 8005d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b3e      	cmp	r3, #62	; 0x3e
 8005d36:	d91f      	bls.n	8005d78 <USB_EPStartXfer+0xd36>
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <USB_EPStartXfer+0xd1a>
 8005d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d56:	3b01      	subs	r3, #1
 8005d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e058      	b.n	8005e2a <USB_EPStartXfer+0xde8>
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d116      	bne.n	8005db0 <USB_EPStartXfer+0xd6e>
 8005d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e03c      	b.n	8005e2a <USB_EPStartXfer+0xde8>
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <USB_EPStartXfer+0xd92>
 8005dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	029b      	lsls	r3, r3, #10
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e021      	b.n	8005e2a <USB_EPStartXfer+0xde8>
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d11c      	bne.n	8005e2a <USB_EPStartXfer+0xde8>
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e00:	4413      	add	r3, r2
 8005e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e06:	463b      	mov	r3, r7
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	00da      	lsls	r2, r3, #3
 8005e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e28:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 81a4 	beq.w	800617e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <USB_EPStartXfer+0xe20>
 8005e56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 8187 	bne.w	800617e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 8180 	bne.w	800617e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	463b      	mov	r3, r7
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]
 8005ec2:	e15c      	b.n	800617e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 8155 	bne.w	800617a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d90e      	bls.n	8005efe <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	1ad2      	subs	r2, r2, r3
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	619a      	str	r2, [r3, #24]
 8005efc:	e008      	b.n	8005f10 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d16f      	bne.n	8005ffa <USB_EPStartXfer+0xfb8>
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f22:	1d3b      	adds	r3, r7, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f32:	4413      	add	r3, r2
 8005f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	00da      	lsls	r2, r3, #3
 8005f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f44:	4413      	add	r3, r2
 8005f46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	2b3e      	cmp	r3, #62	; 0x3e
 8005f54:	d91d      	bls.n	8005f92 <USB_EPStartXfer+0xf50>
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <USB_EPStartXfer+0xf34>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	3b01      	subs	r3, #1
 8005f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e058      	b.n	8006044 <USB_EPStartXfer+0x1002>
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <USB_EPStartXfer+0xf86>
 8005f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	e03d      	b.n	8006044 <USB_EPStartXfer+0x1002>
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <USB_EPStartXfer+0xfa6>
 8005fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e024      	b.n	8006044 <USB_EPStartXfer+0x1002>
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d11f      	bne.n	8006044 <USB_EPStartXfer+0x1002>
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601c:	4413      	add	r3, r2
 800601e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	00da      	lsls	r2, r3, #3
 800602a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602e:	4413      	add	r3, r2
 8006030:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	b29a      	uxth	r2, r3
 800603e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d16f      	bne.n	8006136 <USB_EPStartXfer+0x10f4>
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006066:	b29b      	uxth	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800606e:	4413      	add	r3, r2
 8006070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	00da      	lsls	r2, r3, #3
 800607c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006080:	4413      	add	r3, r2
 8006082:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	2b3e      	cmp	r3, #62	; 0x3e
 8006090:	d91d      	bls.n	80060ce <USB_EPStartXfer+0x108c>
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <USB_EPStartXfer+0x1070>
 80060a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ac:	3b01      	subs	r3, #1
 80060ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	029b      	lsls	r3, r3, #10
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	e057      	b.n	800617e <USB_EPStartXfer+0x113c>
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d116      	bne.n	8006104 <USB_EPStartXfer+0x10c2>
 80060d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e03c      	b.n	800617e <USB_EPStartXfer+0x113c>
 8006104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d004      	beq.n	8006124 <USB_EPStartXfer+0x10e2>
 800611a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611e:	3301      	adds	r3, #1
 8006120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006128:	b29b      	uxth	r3, r3
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	b29a      	uxth	r2, r3
 800612e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	e023      	b.n	800617e <USB_EPStartXfer+0x113c>
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d11e      	bne.n	800617e <USB_EPStartXfer+0x113c>
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006150:	4413      	add	r3, r2
 8006152:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	00da      	lsls	r2, r3, #3
 800615e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006162:	4413      	add	r3, r2
 8006164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006170:	b29a      	uxth	r2, r3
 8006172:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	e001      	b.n	800617e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e02e      	b.n	80061dc <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800619c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061b4:	1d3b      	adds	r3, r7, #4
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	463b      	mov	r3, r7
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620e:	81bb      	strh	r3, [r7, #12]
 8006210:	89bb      	ldrh	r3, [r7, #12]
 8006212:	f083 0310 	eor.w	r3, r3, #16
 8006216:	81bb      	strh	r3, [r7, #12]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	89bb      	ldrh	r3, [r7, #12]
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
 8006238:	e01f      	b.n	800627a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006250:	81fb      	strh	r3, [r7, #14]
 8006252:	89fb      	ldrh	r3, [r7, #14]
 8006254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006258:	81fb      	strh	r3, [r7, #14]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	89fb      	ldrh	r3, [r7, #14]
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	7b1b      	ldrb	r3, [r3, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 809d 	bne.w	80063d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d04c      	beq.n	800633e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	823b      	strh	r3, [r7, #16]
 80062b2:	8a3b      	ldrh	r3, [r7, #16]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01b      	beq.n	80062f4 <USB_EPClearStall+0x6c>
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	81fb      	strh	r3, [r7, #14]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	441a      	add	r2, r3
 80062de:	89fb      	ldrh	r3, [r7, #14]
 80062e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	78db      	ldrb	r3, [r3, #3]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d06c      	beq.n	80063d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006312:	81bb      	strh	r3, [r7, #12]
 8006314:	89bb      	ldrh	r3, [r7, #12]
 8006316:	f083 0320 	eor.w	r3, r3, #32
 800631a:	81bb      	strh	r3, [r7, #12]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	89bb      	ldrh	r3, [r7, #12]
 8006328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006338:	b29b      	uxth	r3, r3
 800633a:	8013      	strh	r3, [r2, #0]
 800633c:	e04b      	b.n	80063d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	82fb      	strh	r3, [r7, #22]
 800634c:	8afb      	ldrh	r3, [r7, #22]
 800634e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d01b      	beq.n	800638e <USB_EPClearStall+0x106>
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	82bb      	strh	r3, [r7, #20]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	441a      	add	r2, r3
 8006378:	8abb      	ldrh	r3, [r7, #20]
 800637a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	827b      	strh	r3, [r7, #18]
 80063a6:	8a7b      	ldrh	r3, [r7, #18]
 80063a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063ac:	827b      	strh	r3, [r7, #18]
 80063ae:	8a7b      	ldrh	r3, [r7, #18]
 80063b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063b4:	827b      	strh	r3, [r7, #18]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8a7b      	ldrh	r3, [r7, #18]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2280      	movs	r2, #128	; 0x80
 80063fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006448:	b29b      	uxth	r3, r3
 800644a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006472:	b29b      	uxth	r3, r3
 8006474:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800649c:	b480      	push	{r7}
 800649e:	b08b      	sub	sp, #44	; 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4611      	mov	r1, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	460b      	mov	r3, r1
 80064ac:	80fb      	strh	r3, [r7, #6]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80064b2:	88bb      	ldrh	r3, [r7, #4]
 80064b4:	3301      	adds	r3, #1
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
 80064d2:	e01b      	b.n	800650c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b21a      	sxth	r2, r3
 80064e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	b21b      	sxth	r3, r3
 80064ec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	8a7a      	ldrh	r2, [r7, #18]
 80064f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	3302      	adds	r3, #2
 80064f8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	3301      	adds	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	3b01      	subs	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e0      	bne.n	80064d4 <USB_WritePMA+0x38>
  }
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	372c      	adds	r7, #44	; 0x2c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006520:	b480      	push	{r7}
 8006522:	b08b      	sub	sp, #44	; 0x2c
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	4611      	mov	r1, r2
 800652c:	461a      	mov	r2, r3
 800652e:	460b      	mov	r3, r1
 8006530:	80fb      	strh	r3, [r7, #6]
 8006532:	4613      	mov	r3, r2
 8006534:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006536:	88bb      	ldrh	r3, [r7, #4]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006550:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e018      	b.n	800658a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	3302      	adds	r3, #2
 8006564:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3301      	adds	r3, #1
 8006572:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	b2da      	uxtb	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3301      	adds	r3, #1
 8006582:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	3b01      	subs	r3, #1
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e3      	bne.n	8006558 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	701a      	strb	r2, [r3, #0]
  }
}
 80065ac:	bf00      	nop
 80065ae:	372c      	adds	r7, #44	; 0x2c
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065c8:	f002 fa06 	bl	80089d8 <USBD_static_malloc>
 80065cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80065dc:	2302      	movs	r3, #2
 80065de:	e066      	b.n	80066ae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7c1b      	ldrb	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d119      	bne.n	8006624 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f4:	2202      	movs	r2, #2
 80065f6:	2181      	movs	r1, #129	; 0x81
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 ffef 	bl	80085dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006608:	2202      	movs	r2, #2
 800660a:	2101      	movs	r1, #1
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 ffe5 	bl	80085dc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2210      	movs	r2, #16
 800661e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006622:	e016      	b.n	8006652 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006624:	2340      	movs	r3, #64	; 0x40
 8006626:	2202      	movs	r2, #2
 8006628:	2181      	movs	r1, #129	; 0x81
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 ffd6 	bl	80085dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	2202      	movs	r2, #2
 800663a:	2101      	movs	r1, #1
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 ffcd 	bl	80085dc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2210      	movs	r2, #16
 800664e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006652:	2308      	movs	r3, #8
 8006654:	2203      	movs	r2, #3
 8006656:	2182      	movs	r1, #130	; 0x82
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 ffbf 	bl	80085dc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7c1b      	ldrb	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800668e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006692:	2101      	movs	r1, #1
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f002 f91d 	bl	80088d4 <USBD_LL_PrepareReceive>
 800669a:	e007      	b.n	80066ac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a2:	2340      	movs	r3, #64	; 0x40
 80066a4:	2101      	movs	r1, #1
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f002 f914 	bl	80088d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066c2:	2181      	movs	r1, #129	; 0x81
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 ffc7 	bl	8008658 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066d0:	2101      	movs	r1, #1
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 ffc0 	bl	8008658 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066e0:	2182      	movs	r1, #130	; 0x82
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 ffb8 	bl	8008658 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00e      	beq.n	8006720 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006712:	4618      	mov	r0, r3
 8006714:	f002 f96e 	bl	80089f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800673c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	e0af      	b.n	80068b4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800675c:	2b00      	cmp	r3, #0
 800675e:	d03f      	beq.n	80067e0 <USBD_CDC_Setup+0xb4>
 8006760:	2b20      	cmp	r3, #32
 8006762:	f040 809f 	bne.w	80068a4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02e      	beq.n	80067cc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b25b      	sxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	da16      	bge.n	80067a6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006784:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	88d2      	ldrh	r2, [r2, #6]
 800678a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	88db      	ldrh	r3, [r3, #6]
 8006790:	2b07      	cmp	r3, #7
 8006792:	bf28      	it	cs
 8006794:	2307      	movcs	r3, #7
 8006796:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	89fa      	ldrh	r2, [r7, #14]
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 facf 	bl	8007d42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80067a4:	e085      	b.n	80068b2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	785a      	ldrb	r2, [r3, #1]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	88db      	ldrh	r3, [r3, #6]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80067bc:	6939      	ldr	r1, [r7, #16]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	88db      	ldrh	r3, [r3, #6]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fae8 	bl	8007d9a <USBD_CtlPrepareRx>
      break;
 80067ca:	e072      	b.n	80068b2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	7850      	ldrb	r0, [r2, #1]
 80067d8:	2200      	movs	r2, #0
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	4798      	blx	r3
      break;
 80067de:	e068      	b.n	80068b2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b0b      	cmp	r3, #11
 80067e6:	d852      	bhi.n	800688e <USBD_CDC_Setup+0x162>
 80067e8:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <USBD_CDC_Setup+0xc4>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006821 	.word	0x08006821
 80067f4:	0800689d 	.word	0x0800689d
 80067f8:	0800688f 	.word	0x0800688f
 80067fc:	0800688f 	.word	0x0800688f
 8006800:	0800688f 	.word	0x0800688f
 8006804:	0800688f 	.word	0x0800688f
 8006808:	0800688f 	.word	0x0800688f
 800680c:	0800688f 	.word	0x0800688f
 8006810:	0800688f 	.word	0x0800688f
 8006814:	0800688f 	.word	0x0800688f
 8006818:	0800684b 	.word	0x0800684b
 800681c:	08006875 	.word	0x08006875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b03      	cmp	r3, #3
 800682a:	d107      	bne.n	800683c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800682c:	f107 030a 	add.w	r3, r7, #10
 8006830:	2202      	movs	r2, #2
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fa84 	bl	8007d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800683a:	e032      	b.n	80068a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fa0e 	bl	8007c60 <USBD_CtlError>
            ret = USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	75fb      	strb	r3, [r7, #23]
          break;
 8006848:	e02b      	b.n	80068a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006856:	f107 030d 	add.w	r3, r7, #13
 800685a:	2201      	movs	r2, #1
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fa6f 	bl	8007d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006864:	e01d      	b.n	80068a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f9f9 	bl	8007c60 <USBD_CtlError>
            ret = USBD_FAIL;
 800686e:	2303      	movs	r3, #3
 8006870:	75fb      	strb	r3, [r7, #23]
          break;
 8006872:	e016      	b.n	80068a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b03      	cmp	r3, #3
 800687e:	d00f      	beq.n	80068a0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 f9ec 	bl	8007c60 <USBD_CtlError>
            ret = USBD_FAIL;
 8006888:	2303      	movs	r3, #3
 800688a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800688c:	e008      	b.n	80068a0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f9e5 	bl	8007c60 <USBD_CtlError>
          ret = USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	75fb      	strb	r3, [r7, #23]
          break;
 800689a:	e002      	b.n	80068a2 <USBD_CDC_Setup+0x176>
          break;
 800689c:	bf00      	nop
 800689e:	e008      	b.n	80068b2 <USBD_CDC_Setup+0x186>
          break;
 80068a0:	bf00      	nop
      }
      break;
 80068a2:	e006      	b.n	80068b2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 f9da 	bl	8007c60 <USBD_CtlError>
      ret = USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	75fb      	strb	r3, [r7, #23]
      break;
 80068b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80068ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	e04f      	b.n	800697e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3318      	adds	r3, #24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d029      	beq.n	8006950 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068fc:	78fa      	ldrb	r2, [r7, #3]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3318      	adds	r3, #24
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	78f9      	ldrb	r1, [r7, #3]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	460b      	mov	r3, r1
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4403      	add	r3, r0
 800691c:	333c      	adds	r3, #60	; 0x3c
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	fbb2 f1f3 	udiv	r1, r2, r3
 8006924:	fb03 f301 	mul.w	r3, r3, r1
 8006928:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	3318      	adds	r3, #24
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006942:	78f9      	ldrb	r1, [r7, #3]
 8006944:	2300      	movs	r3, #0
 8006946:	2200      	movs	r2, #0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 ff8b 	bl	8008864 <USBD_LL_Transmit>
 800694e:	e015      	b.n	800697c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006998:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e015      	b.n	80069d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 ffc9 	bl	8008944 <USBD_LL_GetRxDataSize>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069ce:	4611      	mov	r1, r2
 80069d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e01b      	b.n	8006a2e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <USBD_CDC_EP0_RxReady+0x50>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a06:	2bff      	cmp	r3, #255	; 0xff
 8006a08:	d010      	beq.n	8006a2c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006a18:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a20:	b292      	uxth	r2, r2
 8006a22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2243      	movs	r2, #67	; 0x43
 8006a44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006a46:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	20000094 	.word	0x20000094

08006a58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2243      	movs	r2, #67	; 0x43
 8006a64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006a66:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000050 	.word	0x20000050

08006a78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2243      	movs	r2, #67	; 0x43
 8006a84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a86:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	200000d8 	.word	0x200000d8

08006a98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006aa6:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	2000000c 	.word	0x2000000c

08006ab8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e004      	b.n	8006ad6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e008      	b.n	8006b12 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e004      	b.n	8006b44 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e01a      	b.n	8006ba8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d114      	bne.n	8006ba6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b9a:	2181      	movs	r1, #129	; 0x81
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fe61 	bl	8008864 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e016      	b.n	8006bfc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7c1b      	ldrb	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be0:	2101      	movs	r1, #1
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fe76 	bl	80088d4 <USBD_LL_PrepareReceive>
 8006be8:	e007      	b.n	8006bfa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bf0:	2340      	movs	r3, #64	; 0x40
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fe6d 	bl	80088d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e01f      	b.n	8006c5c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	79fa      	ldrb	r2, [r7, #7]
 8006c4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f001 fc2f 	bl	80084b4 <USBD_LL_Init>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e016      	b.n	8006caa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	f107 020e 	add.w	r2, r7, #14
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4798      	blx	r3
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fc5c 	bl	8008578 <USBD_LL_Start>
 8006cc0:	4603      	mov	r3, r0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	4611      	mov	r1, r2
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
  }

  return USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 ff46 	bl	8007bec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d01a      	beq.n	8006dba <USBD_LL_SetupStage+0x72>
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d822      	bhi.n	8006dce <USBD_LL_SetupStage+0x86>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <USBD_LL_SetupStage+0x4a>
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d00a      	beq.n	8006da6 <USBD_LL_SetupStage+0x5e>
 8006d90:	e01d      	b.n	8006dce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f9ee 	bl	800717c <USBD_StdDevReq>
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]
      break;
 8006da4:	e020      	b.n	8006de8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa52 	bl	8007258 <USBD_StdItfReq>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73fb      	strb	r3, [r7, #15]
      break;
 8006db8:	e016      	b.n	8006de8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa91 	bl	80072ea <USBD_StdEPReq>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]
      break;
 8006dcc:	e00c      	b.n	8006de8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fc71 	bl	80086c4 <USBD_LL_StallEP>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
      break;
 8006de6:	bf00      	nop
  }

  return ret;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b086      	sub	sp, #24
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d138      	bne.n	8006e78 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d14a      	bne.n	8006eae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d913      	bls.n	8006e4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bf28      	it	cs
 8006e3e:	4613      	movcs	r3, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 ffc5 	bl	8007dd4 <USBD_CtlContinueRx>
 8006e4a:	e030      	b.n	8006eae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d10b      	bne.n	8006e70 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 ffc0 	bl	8007df6 <USBD_CtlSendStatus>
 8006e76:	e01a      	b.n	8006eae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d114      	bne.n	8006eae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00e      	beq.n	8006eae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	7afa      	ldrb	r2, [r7, #11]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	4798      	blx	r3
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	e000      	b.n	8006eb0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ec6:	7afb      	ldrb	r3, [r7, #11]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d16b      	bne.n	8006fa4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d156      	bne.n	8006f8a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d914      	bls.n	8006f12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	1ad2      	subs	r2, r2, r3
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 ff3a 	bl	8007d78 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f04:	2300      	movs	r3, #0
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f001 fce2 	bl	80088d4 <USBD_LL_PrepareReceive>
 8006f10:	e03b      	b.n	8006f8a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d11c      	bne.n	8006f58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d316      	bcc.n	8006f58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d20f      	bcs.n	8006f58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 ff1b 	bl	8007d78 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f001 fcbf 	bl	80088d4 <USBD_LL_PrepareReceive>
 8006f56:	e018      	b.n	8006f8a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d10b      	bne.n	8006f7c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f7c:	2180      	movs	r1, #128	; 0x80
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f001 fba0 	bl	80086c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 ff49 	bl	8007e1c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d122      	bne.n	8006fda <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff fe98 	bl	8006cca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fa2:	e01a      	b.n	8006fda <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d114      	bne.n	8006fda <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00e      	beq.n	8006fda <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	7afa      	ldrb	r2, [r7, #11]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	4798      	blx	r3
 8006fcc:	4603      	mov	r3, r0
 8006fce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	e000      	b.n	8006fdc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007014:	2303      	movs	r3, #3
 8007016:	e02f      	b.n	8007078 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00f      	beq.n	8007042 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6852      	ldr	r2, [r2, #4]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	4611      	mov	r1, r2
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007042:	2340      	movs	r3, #64	; 0x40
 8007044:	2200      	movs	r2, #0
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 fac7 	bl	80085dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2240      	movs	r2, #64	; 0x40
 800705a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800705e:	2340      	movs	r3, #64	; 0x40
 8007060:	2200      	movs	r2, #0
 8007062:	2180      	movs	r1, #128	; 0x80
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fab9 	bl	80085dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2204      	movs	r2, #4
 80070ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d106      	bne.n	80070ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800710e:	2303      	movs	r3, #3
 8007110:	e012      	b.n	8007138 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b03      	cmp	r3, #3
 800711c:	d10b      	bne.n	8007136 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	3301      	adds	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800715e:	8a3b      	ldrh	r3, [r7, #16]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	b21a      	sxth	r2, r3
 8007164:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007168:	4313      	orrs	r3, r2
 800716a:	b21b      	sxth	r3, r3
 800716c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800716e:	89fb      	ldrh	r3, [r7, #14]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d005      	beq.n	80071a2 <USBD_StdDevReq+0x26>
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d853      	bhi.n	8007242 <USBD_StdDevReq+0xc6>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <USBD_StdDevReq+0x3a>
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d14f      	bne.n	8007242 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]
      break;
 80071b4:	e04a      	b.n	800724c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b09      	cmp	r3, #9
 80071bc:	d83b      	bhi.n	8007236 <USBD_StdDevReq+0xba>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USBD_StdDevReq+0x48>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	08007219 	.word	0x08007219
 80071c8:	0800722d 	.word	0x0800722d
 80071cc:	08007237 	.word	0x08007237
 80071d0:	08007223 	.word	0x08007223
 80071d4:	08007237 	.word	0x08007237
 80071d8:	080071f7 	.word	0x080071f7
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	08007237 	.word	0x08007237
 80071e4:	0800720f 	.word	0x0800720f
 80071e8:	08007201 	.word	0x08007201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9de 	bl	80075b0 <USBD_GetDescriptor>
          break;
 80071f4:	e024      	b.n	8007240 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb6d 	bl	80078d8 <USBD_SetAddress>
          break;
 80071fe:	e01f      	b.n	8007240 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fbac 	bl	8007960 <USBD_SetConfig>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
          break;
 800720c:	e018      	b.n	8007240 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc4b 	bl	8007aac <USBD_GetConfig>
          break;
 8007216:	e013      	b.n	8007240 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fc7c 	bl	8007b18 <USBD_GetStatus>
          break;
 8007220:	e00e      	b.n	8007240 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fcab 	bl	8007b80 <USBD_SetFeature>
          break;
 800722a:	e009      	b.n	8007240 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fcba 	bl	8007ba8 <USBD_ClrFeature>
          break;
 8007234:	e004      	b.n	8007240 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fd11 	bl	8007c60 <USBD_CtlError>
          break;
 800723e:	bf00      	nop
      }
      break;
 8007240:	e004      	b.n	800724c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fd0b 	bl	8007c60 <USBD_CtlError>
      break;
 800724a:	bf00      	nop
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop

08007258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d005      	beq.n	800727e <USBD_StdItfReq+0x26>
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d82f      	bhi.n	80072d6 <USBD_StdItfReq+0x7e>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <USBD_StdItfReq+0x26>
 800727a:	2b20      	cmp	r3, #32
 800727c:	d12b      	bne.n	80072d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	2b02      	cmp	r3, #2
 800728a:	d81d      	bhi.n	80072c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	889b      	ldrh	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	d813      	bhi.n	80072be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	88db      	ldrh	r3, [r3, #6]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d110      	bne.n	80072d2 <USBD_StdItfReq+0x7a>
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fd9d 	bl	8007df6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072bc:	e009      	b.n	80072d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fccd 	bl	8007c60 <USBD_CtlError>
          break;
 80072c6:	e004      	b.n	80072d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fcc8 	bl	8007c60 <USBD_CtlError>
          break;
 80072d0:	e000      	b.n	80072d4 <USBD_StdItfReq+0x7c>
          break;
 80072d2:	bf00      	nop
      }
      break;
 80072d4:	e004      	b.n	80072e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fcc1 	bl	8007c60 <USBD_CtlError>
      break;
 80072de:	bf00      	nop
  }

  return ret;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	889b      	ldrh	r3, [r3, #4]
 80072fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	d007      	beq.n	800731a <USBD_StdEPReq+0x30>
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	f200 8145 	bhi.w	800759a <USBD_StdEPReq+0x2b0>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00c      	beq.n	800732e <USBD_StdEPReq+0x44>
 8007314:	2b20      	cmp	r3, #32
 8007316:	f040 8140 	bne.w	800759a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4798      	blx	r3
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
      break;
 800732c:	e13a      	b.n	80075a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d007      	beq.n	8007346 <USBD_StdEPReq+0x5c>
 8007336:	2b03      	cmp	r3, #3
 8007338:	f300 8129 	bgt.w	800758e <USBD_StdEPReq+0x2a4>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d07f      	beq.n	8007440 <USBD_StdEPReq+0x156>
 8007340:	2b01      	cmp	r3, #1
 8007342:	d03c      	beq.n	80073be <USBD_StdEPReq+0xd4>
 8007344:	e123      	b.n	800758e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d002      	beq.n	8007358 <USBD_StdEPReq+0x6e>
 8007352:	2b03      	cmp	r3, #3
 8007354:	d016      	beq.n	8007384 <USBD_StdEPReq+0x9a>
 8007356:	e02c      	b.n	80073b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00d      	beq.n	800737a <USBD_StdEPReq+0x90>
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	d00a      	beq.n	800737a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f9ab 	bl	80086c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800736e:	2180      	movs	r1, #128	; 0x80
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 f9a7 	bl	80086c4 <USBD_LL_StallEP>
 8007376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007378:	e020      	b.n	80073bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc6f 	bl	8007c60 <USBD_CtlError>
              break;
 8007382:	e01b      	b.n	80073bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	885b      	ldrh	r3, [r3, #2]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10e      	bne.n	80073aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <USBD_StdEPReq+0xc0>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d008      	beq.n	80073aa <USBD_StdEPReq+0xc0>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	88db      	ldrh	r3, [r3, #6]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f98d 	bl	80086c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fd23 	bl	8007df6 <USBD_CtlSendStatus>

              break;
 80073b0:	e004      	b.n	80073bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fc53 	bl	8007c60 <USBD_CtlError>
              break;
 80073ba:	bf00      	nop
          }
          break;
 80073bc:	e0ec      	b.n	8007598 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d002      	beq.n	80073d0 <USBD_StdEPReq+0xe6>
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d016      	beq.n	80073fc <USBD_StdEPReq+0x112>
 80073ce:	e030      	b.n	8007432 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <USBD_StdEPReq+0x108>
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b80      	cmp	r3, #128	; 0x80
 80073da:	d00a      	beq.n	80073f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f96f 	bl	80086c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e6:	2180      	movs	r1, #128	; 0x80
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f96b 	bl	80086c4 <USBD_LL_StallEP>
 80073ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073f0:	e025      	b.n	800743e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc33 	bl	8007c60 <USBD_CtlError>
              break;
 80073fa:	e020      	b.n	800743e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d11b      	bne.n	800743c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740a:	2b00      	cmp	r3, #0
 800740c:	d004      	beq.n	8007418 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f98c 	bl	8008730 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fcec 	bl	8007df6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007430:	e004      	b.n	800743c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc13 	bl	8007c60 <USBD_CtlError>
              break;
 800743a:	e000      	b.n	800743e <USBD_StdEPReq+0x154>
              break;
 800743c:	bf00      	nop
          }
          break;
 800743e:	e0ab      	b.n	8007598 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d002      	beq.n	8007452 <USBD_StdEPReq+0x168>
 800744c:	2b03      	cmp	r3, #3
 800744e:	d032      	beq.n	80074b6 <USBD_StdEPReq+0x1cc>
 8007450:	e097      	b.n	8007582 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d007      	beq.n	8007468 <USBD_StdEPReq+0x17e>
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d004      	beq.n	8007468 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fbfd 	bl	8007c60 <USBD_CtlError>
                break;
 8007466:	e091      	b.n	800758c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	da0b      	bge.n	8007488 <USBD_StdEPReq+0x19e>
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	3310      	adds	r3, #16
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4413      	add	r3, r2
 8007484:	3304      	adds	r3, #4
 8007486:	e00b      	b.n	80074a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	3304      	adds	r3, #4
 80074a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2202      	movs	r2, #2
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fc47 	bl	8007d42 <USBD_CtlSendData>
              break;
 80074b4:	e06a      	b.n	800758c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da11      	bge.n	80074e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3324      	adds	r3, #36	; 0x24
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d117      	bne.n	8007508 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fbc0 	bl	8007c60 <USBD_CtlError>
                  break;
 80074e0:	e054      	b.n	800758c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f003 020f 	and.w	r2, r3, #15
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fbad 	bl	8007c60 <USBD_CtlError>
                  break;
 8007506:	e041      	b.n	800758c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da0b      	bge.n	8007528 <USBD_StdEPReq+0x23e>
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	3310      	adds	r3, #16
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	4413      	add	r3, r2
 8007524:	3304      	adds	r3, #4
 8007526:	e00b      	b.n	8007540 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	3304      	adds	r3, #4
 8007540:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <USBD_StdEPReq+0x264>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b80      	cmp	r3, #128	; 0x80
 800754c:	d103      	bne.n	8007556 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e00e      	b.n	8007574 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 f91e 	bl	800879c <USBD_LL_IsStallEP>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e002      	b.n	8007574 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2202      	movs	r2, #2
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fbe1 	bl	8007d42 <USBD_CtlSendData>
              break;
 8007580:	e004      	b.n	800758c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb6b 	bl	8007c60 <USBD_CtlError>
              break;
 800758a:	bf00      	nop
          }
          break;
 800758c:	e004      	b.n	8007598 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb65 	bl	8007c60 <USBD_CtlError>
          break;
 8007596:	bf00      	nop
      }
      break;
 8007598:	e004      	b.n	80075a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb5f 	bl	8007c60 <USBD_CtlError>
      break;
 80075a2:	bf00      	nop
  }

  return ret;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	885b      	ldrh	r3, [r3, #2]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b0e      	cmp	r3, #14
 80075d2:	f200 8152 	bhi.w	800787a <USBD_GetDescriptor+0x2ca>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <USBD_GetDescriptor+0x2c>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	0800764d 	.word	0x0800764d
 80075e0:	08007665 	.word	0x08007665
 80075e4:	080076a5 	.word	0x080076a5
 80075e8:	0800787b 	.word	0x0800787b
 80075ec:	0800787b 	.word	0x0800787b
 80075f0:	0800781b 	.word	0x0800781b
 80075f4:	08007847 	.word	0x08007847
 80075f8:	0800787b 	.word	0x0800787b
 80075fc:	0800787b 	.word	0x0800787b
 8007600:	0800787b 	.word	0x0800787b
 8007604:	0800787b 	.word	0x0800787b
 8007608:	0800787b 	.word	0x0800787b
 800760c:	0800787b 	.word	0x0800787b
 8007610:	0800787b 	.word	0x0800787b
 8007614:	08007619 	.word	0x08007619
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7c12      	ldrb	r2, [r2, #16]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800763a:	e126      	b.n	800788a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fb0e 	bl	8007c60 <USBD_CtlError>
        err++;
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	3301      	adds	r3, #1
 8007648:	72fb      	strb	r3, [r7, #11]
      break;
 800764a:	e11e      	b.n	800788a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7c12      	ldrb	r2, [r2, #16]
 8007658:	f107 0108 	add.w	r1, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
      break;
 8007662:	e112      	b.n	800788a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	7c1b      	ldrb	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10d      	bne.n	8007688 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f107 0208 	add.w	r2, r7, #8
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	2202      	movs	r2, #2
 8007684:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007686:	e100      	b.n	800788a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f107 0208 	add.w	r2, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	2202      	movs	r2, #2
 80076a0:	701a      	strb	r2, [r3, #0]
      break;
 80076a2:	e0f2      	b.n	800788a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	885b      	ldrh	r3, [r3, #2]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	f200 80ac 	bhi.w	8007808 <USBD_GetDescriptor+0x258>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <USBD_GetDescriptor+0x108>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076d1 	.word	0x080076d1
 80076bc:	08007705 	.word	0x08007705
 80076c0:	08007739 	.word	0x08007739
 80076c4:	0800776d 	.word	0x0800776d
 80076c8:	080077a1 	.word	0x080077a1
 80076cc:	080077d5 	.word	0x080077d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	7c12      	ldrb	r2, [r2, #16]
 80076e8:	f107 0108 	add.w	r1, r7, #8
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076f2:	e091      	b.n	8007818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fab2 	bl	8007c60 <USBD_CtlError>
            err++;
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	3301      	adds	r3, #1
 8007700:	72fb      	strb	r3, [r7, #11]
          break;
 8007702:	e089      	b.n	8007818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7c12      	ldrb	r2, [r2, #16]
 800771c:	f107 0108 	add.w	r1, r7, #8
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007726:	e077      	b.n	8007818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa98 	bl	8007c60 <USBD_CtlError>
            err++;
 8007730:	7afb      	ldrb	r3, [r7, #11]
 8007732:	3301      	adds	r3, #1
 8007734:	72fb      	strb	r3, [r7, #11]
          break;
 8007736:	e06f      	b.n	8007818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775a:	e05d      	b.n	8007818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fa7e 	bl	8007c60 <USBD_CtlError>
            err++;
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	3301      	adds	r3, #1
 8007768:	72fb      	strb	r3, [r7, #11]
          break;
 800776a:	e055      	b.n	8007818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778e:	e043      	b.n	8007818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa64 	bl	8007c60 <USBD_CtlError>
            err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
          break;
 800779e:	e03b      	b.n	8007818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e029      	b.n	8007818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa4a 	bl	8007c60 <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e021      	b.n	8007818 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7c12      	ldrb	r2, [r2, #16]
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f6:	e00f      	b.n	8007818 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa30 	bl	8007c60 <USBD_CtlError>
            err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
          break;
 8007806:	e007      	b.n	8007818 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa28 	bl	8007c60 <USBD_CtlError>
          err++;
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	3301      	adds	r3, #1
 8007814:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007816:	bf00      	nop
      }
      break;
 8007818:	e037      	b.n	800788a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7c1b      	ldrb	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782a:	f107 0208 	add.w	r2, r7, #8
 800782e:	4610      	mov	r0, r2
 8007830:	4798      	blx	r3
 8007832:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007834:	e029      	b.n	800788a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa11 	bl	8007c60 <USBD_CtlError>
        err++;
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	3301      	adds	r3, #1
 8007842:	72fb      	strb	r3, [r7, #11]
      break;
 8007844:	e021      	b.n	800788a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	7c1b      	ldrb	r3, [r3, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10d      	bne.n	800786a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	f107 0208 	add.w	r2, r7, #8
 800785a:	4610      	mov	r0, r2
 800785c:	4798      	blx	r3
 800785e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	2207      	movs	r2, #7
 8007866:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007868:	e00f      	b.n	800788a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f9f7 	bl	8007c60 <USBD_CtlError>
        err++;
 8007872:	7afb      	ldrb	r3, [r7, #11]
 8007874:	3301      	adds	r3, #1
 8007876:	72fb      	strb	r3, [r7, #11]
      break;
 8007878:	e007      	b.n	800788a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f9ef 	bl	8007c60 <USBD_CtlError>
      err++;
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	3301      	adds	r3, #1
 8007886:	72fb      	strb	r3, [r7, #11]
      break;
 8007888:	bf00      	nop
  }

  if (err != 0U)
 800788a:	7afb      	ldrb	r3, [r7, #11]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d11e      	bne.n	80078ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	88db      	ldrh	r3, [r3, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d016      	beq.n	80078c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007898:	893b      	ldrh	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00e      	beq.n	80078bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	88da      	ldrh	r2, [r3, #6]
 80078a2:	893b      	ldrh	r3, [r7, #8]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bf28      	it	cs
 80078a8:	4613      	movcs	r3, r2
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	461a      	mov	r2, r3
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa44 	bl	8007d42 <USBD_CtlSendData>
 80078ba:	e009      	b.n	80078d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9ce 	bl	8007c60 <USBD_CtlError>
 80078c4:	e004      	b.n	80078d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa95 	bl	8007df6 <USBD_CtlSendStatus>
 80078cc:	e000      	b.n	80078d0 <USBD_GetDescriptor+0x320>
    return;
 80078ce:	bf00      	nop
  }
}
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop

080078d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	889b      	ldrh	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d131      	bne.n	800794e <USBD_SetAddress+0x76>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	88db      	ldrh	r3, [r3, #6]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12d      	bne.n	800794e <USBD_SetAddress+0x76>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	2b7f      	cmp	r3, #127	; 0x7f
 80078f8:	d829      	bhi.n	800794e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d104      	bne.n	800791c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9a3 	bl	8007c60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	e01d      	b.n	8007958 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7bfa      	ldrb	r2, [r7, #15]
 8007920:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 ff65 	bl	80087f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa61 	bl	8007df6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	e009      	b.n	8007958 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794c:	e004      	b.n	8007958 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f985 	bl	8007c60 <USBD_CtlError>
  }
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	885b      	ldrh	r3, [r3, #2]
 8007972:	b2da      	uxtb	r2, r3
 8007974:	4b4c      	ldr	r3, [pc, #304]	; (8007aa8 <USBD_SetConfig+0x148>)
 8007976:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007978:	4b4b      	ldr	r3, [pc, #300]	; (8007aa8 <USBD_SetConfig+0x148>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d905      	bls.n	800798c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f96c 	bl	8007c60 <USBD_CtlError>
    return USBD_FAIL;
 8007988:	2303      	movs	r3, #3
 800798a:	e088      	b.n	8007a9e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d002      	beq.n	800799e <USBD_SetConfig+0x3e>
 8007998:	2b03      	cmp	r3, #3
 800799a:	d025      	beq.n	80079e8 <USBD_SetConfig+0x88>
 800799c:	e071      	b.n	8007a82 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800799e:	4b42      	ldr	r3, [pc, #264]	; (8007aa8 <USBD_SetConfig+0x148>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01c      	beq.n	80079e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80079a6:	4b40      	ldr	r3, [pc, #256]	; (8007aa8 <USBD_SetConfig+0x148>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079b0:	4b3d      	ldr	r3, [pc, #244]	; (8007aa8 <USBD_SetConfig+0x148>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff f992 	bl	8006ce0 <USBD_SetClassConfig>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f949 	bl	8007c60 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079ce:	e065      	b.n	8007a9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa10 	bl	8007df6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2203      	movs	r2, #3
 80079da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079de:	e05d      	b.n	8007a9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa08 	bl	8007df6 <USBD_CtlSendStatus>
      break;
 80079e6:	e059      	b.n	8007a9c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079e8:	4b2f      	ldr	r3, [pc, #188]	; (8007aa8 <USBD_SetConfig+0x148>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d112      	bne.n	8007a16 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079f8:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <USBD_SetConfig+0x148>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a02:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <USBD_SetConfig+0x148>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff f985 	bl	8006d18 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9f1 	bl	8007df6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a14:	e042      	b.n	8007a9c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <USBD_SetConfig+0x148>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d02a      	beq.n	8007a7a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff f973 	bl	8006d18 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <USBD_SetConfig+0x148>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <USBD_SetConfig+0x148>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff f94c 	bl	8006ce0 <USBD_SetClassConfig>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00f      	beq.n	8007a72 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f903 	bl	8007c60 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff f958 	bl	8006d18 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a70:	e014      	b.n	8007a9c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9bf 	bl	8007df6 <USBD_CtlSendStatus>
      break;
 8007a78:	e010      	b.n	8007a9c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9bb 	bl	8007df6 <USBD_CtlSendStatus>
      break;
 8007a80:	e00c      	b.n	8007a9c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8eb 	bl	8007c60 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <USBD_SetConfig+0x148>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff f941 	bl	8006d18 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9a:	bf00      	nop
  }

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000380 	.word	0x20000380

08007aac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d004      	beq.n	8007ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f8cd 	bl	8007c60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ac6:	e023      	b.n	8007b10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	dc02      	bgt.n	8007ada <USBD_GetConfig+0x2e>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dc03      	bgt.n	8007ae0 <USBD_GetConfig+0x34>
 8007ad8:	e015      	b.n	8007b06 <USBD_GetConfig+0x5a>
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d00b      	beq.n	8007af6 <USBD_GetConfig+0x4a>
 8007ade:	e012      	b.n	8007b06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	2201      	movs	r2, #1
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f927 	bl	8007d42 <USBD_CtlSendData>
        break;
 8007af4:	e00c      	b.n	8007b10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	2201      	movs	r2, #1
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f91f 	bl	8007d42 <USBD_CtlSendData>
        break;
 8007b04:	e004      	b.n	8007b10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8a9 	bl	8007c60 <USBD_CtlError>
        break;
 8007b0e:	bf00      	nop
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d81e      	bhi.n	8007b6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	88db      	ldrh	r3, [r3, #6]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d004      	beq.n	8007b42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f890 	bl	8007c60 <USBD_CtlError>
        break;
 8007b40:	e01a      	b.n	8007b78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f043 0202 	orr.w	r2, r3, #2
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	330c      	adds	r3, #12
 8007b62:	2202      	movs	r2, #2
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8eb 	bl	8007d42 <USBD_CtlSendData>
      break;
 8007b6c:	e004      	b.n	8007b78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f875 	bl	8007c60 <USBD_CtlError>
      break;
 8007b76:	bf00      	nop
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d106      	bne.n	8007ba0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f92b 	bl	8007df6 <USBD_CtlSendStatus>
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d80b      	bhi.n	8007bd8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d10c      	bne.n	8007be2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f910 	bl	8007df6 <USBD_CtlSendStatus>
      }
      break;
 8007bd6:	e004      	b.n	8007be2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f840 	bl	8007c60 <USBD_CtlError>
      break;
 8007be0:	e000      	b.n	8007be4 <USBD_ClrFeature+0x3c>
      break;
 8007be2:	bf00      	nop
  }
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fa92 	bl	8007140 <SWAPBYTE>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fa85 	bl	8007140 <SWAPBYTE>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fa78 	bl	8007140 <SWAPBYTE>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	80da      	strh	r2, [r3, #6]
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c6a:	2180      	movs	r1, #128	; 0x80
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fd29 	bl	80086c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fd25 	bl	80086c4 <USBD_LL_StallEP>
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d036      	beq.n	8007d06 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c9c:	6938      	ldr	r0, [r7, #16]
 8007c9e:	f000 f836 	bl	8007d0e <USBD_GetLen>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	7812      	ldrb	r2, [r2, #0]
 8007cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	2203      	movs	r2, #3
 8007cca:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cd2:	e013      	b.n	8007cfc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4413      	add	r3, r2
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	613b      	str	r3, [r7, #16]
    idx++;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e7      	bne.n	8007cd4 <USBD_GetString+0x52>
 8007d04:	e000      	b.n	8007d08 <USBD_GetString+0x86>
    return;
 8007d06:	bf00      	nop
  }
}
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d1e:	e005      	b.n	8007d2c <USBD_GetLen+0x1e>
  {
    len++;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	3301      	adds	r3, #1
 8007d24:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f5      	bne.n	8007d20 <USBD_GetLen+0x12>
  }

  return len;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	2100      	movs	r1, #0
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fd7b 	bl	8008864 <USBD_LL_Transmit>

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fd6a 	bl	8008864 <USBD_LL_Transmit>

  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2203      	movs	r2, #3
 8007daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fd85 	bl	80088d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	2100      	movs	r1, #0
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 fd74 	bl	80088d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2204      	movs	r2, #4
 8007e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e06:	2300      	movs	r3, #0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fd29 	bl	8008864 <USBD_LL_Transmit>

  return USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2205      	movs	r2, #5
 8007e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fd4e 	bl	80088d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4912      	ldr	r1, [pc, #72]	; (8007e94 <MX_USB_DEVICE_Init+0x50>)
 8007e4c:	4812      	ldr	r0, [pc, #72]	; (8007e98 <MX_USB_DEVICE_Init+0x54>)
 8007e4e:	f7fe fed9 	bl	8006c04 <USBD_Init>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e58:	f7f9 f8be 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e5c:	490f      	ldr	r1, [pc, #60]	; (8007e9c <MX_USB_DEVICE_Init+0x58>)
 8007e5e:	480e      	ldr	r0, [pc, #56]	; (8007e98 <MX_USB_DEVICE_Init+0x54>)
 8007e60:	f7fe ff00 	bl	8006c64 <USBD_RegisterClass>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e6a:	f7f9 f8b5 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e6e:	490c      	ldr	r1, [pc, #48]	; (8007ea0 <MX_USB_DEVICE_Init+0x5c>)
 8007e70:	4809      	ldr	r0, [pc, #36]	; (8007e98 <MX_USB_DEVICE_Init+0x54>)
 8007e72:	f7fe fe21 	bl	8006ab8 <USBD_CDC_RegisterInterface>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e7c:	f7f9 f8ac 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e80:	4805      	ldr	r0, [pc, #20]	; (8007e98 <MX_USB_DEVICE_Init+0x54>)
 8007e82:	f7fe ff16 	bl	8006cb2 <USBD_Start>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e8c:	f7f9 f8a4 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e90:	bf00      	nop
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000130 	.word	0x20000130
 8007e98:	20000668 	.word	0x20000668
 8007e9c:	20000018 	.word	0x20000018
 8007ea0:	2000011c 	.word	0x2000011c

08007ea4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4905      	ldr	r1, [pc, #20]	; (8007ec0 <CDC_Init_FS+0x1c>)
 8007eac:	4805      	ldr	r0, [pc, #20]	; (8007ec4 <CDC_Init_FS+0x20>)
 8007eae:	f7fe fe18 	bl	8006ae2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007eb2:	4905      	ldr	r1, [pc, #20]	; (8007ec8 <CDC_Init_FS+0x24>)
 8007eb4:	4803      	ldr	r0, [pc, #12]	; (8007ec4 <CDC_Init_FS+0x20>)
 8007eb6:	f7fe fe32 	bl	8006b1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000d20 	.word	0x20000d20
 8007ec4:	20000668 	.word	0x20000668
 8007ec8:	20000938 	.word	0x20000938

08007ecc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ed0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b23      	cmp	r3, #35	; 0x23
 8007ef0:	d84a      	bhi.n	8007f88 <CDC_Control_FS+0xac>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <CDC_Control_FS+0x1c>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f89 	.word	0x08007f89
 8007efc:	08007f89 	.word	0x08007f89
 8007f00:	08007f89 	.word	0x08007f89
 8007f04:	08007f89 	.word	0x08007f89
 8007f08:	08007f89 	.word	0x08007f89
 8007f0c:	08007f89 	.word	0x08007f89
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007f89 	.word	0x08007f89
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f89 	.word	0x08007f89
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	08007f89 	.word	0x08007f89
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007f89 	.word	0x08007f89
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007f89 	.word	0x08007f89
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f89 	.word	0x08007f89
 8007f54:	08007f89 	.word	0x08007f89
 8007f58:	08007f89 	.word	0x08007f89
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007f89 	.word	0x08007f89
 8007f64:	08007f89 	.word	0x08007f89
 8007f68:	08007f89 	.word	0x08007f89
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f89 	.word	0x08007f89
 8007f74:	08007f89 	.word	0x08007f89
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007f89 	.word	0x08007f89
 8007f80:	08007f89 	.word	0x08007f89
 8007f84:	08007f89 	.word	0x08007f89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f88:	bf00      	nop
  }

  return (USBD_OK);
 8007f8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <CDC_Receive_FS>:

char receiveCommand[64];
volatile uint8_t dataReady = 0;

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
//			char error_msg[] = "Input tidak valid";
//			CDC_Transmit_FS((uint8_t*) error_msg, strlen(error_msg));
//		}
//	}

	Buf[*Len] = '\0'; // Pastikan string null-terminated
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
	USB_SendData("Data diterima: ");
 8007fae:	4814      	ldr	r0, [pc, #80]	; (8008000 <CDC_Receive_FS+0x68>)
 8007fb0:	f7f8 fec8 	bl	8000d44 <USB_SendData>
	USB_SendData((char*)Buf);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7f8 fec5 	bl	8000d44 <USB_SendData>
	USB_SendData("\r\n");
 8007fba:	4812      	ldr	r0, [pc, #72]	; (8008004 <CDC_Receive_FS+0x6c>)
 8007fbc:	f7f8 fec2 	bl	8000d44 <USB_SendData>

	if (*Len < sizeof(receiveCommand)) {
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8007fc6:	d80e      	bhi.n	8007fe6 <CDC_Receive_FS+0x4e>
	        memcpy(receiveCommand, Buf, *Len);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	480d      	ldr	r0, [pc, #52]	; (8008008 <CDC_Receive_FS+0x70>)
 8007fd2:	f000 fd49 	bl	8008a68 <memcpy>
	        receiveCommand[*Len] = '\0'; // Null-terminate string
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a0b      	ldr	r2, [pc, #44]	; (8008008 <CDC_Receive_FS+0x70>)
 8007fdc:	2100      	movs	r1, #0
 8007fde:	54d1      	strb	r1, [r2, r3]
	        dataReady = 1;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <CDC_Receive_FS+0x74>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
	    }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4809      	ldr	r0, [pc, #36]	; (8008010 <CDC_Receive_FS+0x78>)
 8007fea:	f7fe fd98 	bl	8006b1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fee:	4808      	ldr	r0, [pc, #32]	; (8008010 <CDC_Receive_FS+0x78>)
 8007ff0:	f7fe fdde 	bl	8006bb0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	0800b8b4 	.word	0x0800b8b4
 8008004:	0800b8c4 	.word	0x0800b8c4
 8008008:	200005ac 	.word	0x200005ac
 800800c:	20000381 	.word	0x20000381
 8008010:	20000668 	.word	0x20000668

08008014 <CDC_Transmit_FS>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008024:	4b0d      	ldr	r3, [pc, #52]	; (800805c <CDC_Transmit_FS+0x48>)
 8008026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008036:	2301      	movs	r3, #1
 8008038:	e00b      	b.n	8008052 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	461a      	mov	r2, r3
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4806      	ldr	r0, [pc, #24]	; (800805c <CDC_Transmit_FS+0x48>)
 8008042:	f7fe fd4e 	bl	8006ae2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008046:	4805      	ldr	r0, [pc, #20]	; (800805c <CDC_Transmit_FS+0x48>)
 8008048:	f7fe fd82 	bl	8006b50 <USBD_CDC_TransmitPacket>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000668 	.word	0x20000668

08008060 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008076:	4618      	mov	r0, r3
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2212      	movs	r2, #18
 8008094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008096:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20000150 	.word	0x20000150

080080a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2204      	movs	r2, #4
 80080b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080ba:	4b03      	ldr	r3, [pc, #12]	; (80080c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	20000170 	.word	0x20000170

080080cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4907      	ldr	r1, [pc, #28]	; (8008100 <USBD_FS_ProductStrDescriptor+0x34>)
 80080e2:	4808      	ldr	r0, [pc, #32]	; (8008104 <USBD_FS_ProductStrDescriptor+0x38>)
 80080e4:	f7ff fdcd 	bl	8007c82 <USBD_GetString>
 80080e8:	e004      	b.n	80080f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4904      	ldr	r1, [pc, #16]	; (8008100 <USBD_FS_ProductStrDescriptor+0x34>)
 80080ee:	4805      	ldr	r0, [pc, #20]	; (8008104 <USBD_FS_ProductStrDescriptor+0x38>)
 80080f0:	f7ff fdc7 	bl	8007c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20001108 	.word	0x20001108
 8008104:	0800b8d8 	.word	0x0800b8d8

08008108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	4904      	ldr	r1, [pc, #16]	; (8008128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800811a:	f7ff fdb2 	bl	8007c82 <USBD_GetString>
  return USBD_StrDesc;
 800811e:	4b02      	ldr	r3, [pc, #8]	; (8008128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001108 	.word	0x20001108
 800812c:	0800b8f0 	.word	0x0800b8f0

08008130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	221a      	movs	r2, #26
 8008140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008142:	f000 f855 	bl	80081f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008146:	4b02      	ldr	r3, [pc, #8]	; (8008150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000174 	.word	0x20000174

08008154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	6039      	str	r1, [r7, #0]
 800815e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4907      	ldr	r1, [pc, #28]	; (8008188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800816a:	4808      	ldr	r0, [pc, #32]	; (800818c <USBD_FS_ConfigStrDescriptor+0x38>)
 800816c:	f7ff fd89 	bl	8007c82 <USBD_GetString>
 8008170:	e004      	b.n	800817c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4904      	ldr	r1, [pc, #16]	; (8008188 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008176:	4805      	ldr	r0, [pc, #20]	; (800818c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008178:	f7ff fd83 	bl	8007c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20001108 	.word	0x20001108
 800818c:	0800b904 	.word	0x0800b904

08008190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d105      	bne.n	80081ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	4907      	ldr	r1, [pc, #28]	; (80081c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081a6:	4808      	ldr	r0, [pc, #32]	; (80081c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081a8:	f7ff fd6b 	bl	8007c82 <USBD_GetString>
 80081ac:	e004      	b.n	80081b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4904      	ldr	r1, [pc, #16]	; (80081c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081b2:	4805      	ldr	r0, [pc, #20]	; (80081c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081b4:	f7ff fd65 	bl	8007c82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20001108 	.word	0x20001108
 80081c8:	0800b910 	.word	0x0800b910

080081cc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	220c      	movs	r2, #12
 80081dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80081de:	4b03      	ldr	r3, [pc, #12]	; (80081ec <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000164 	.word	0x20000164

080081f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <Get_SerialNum+0x44>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <Get_SerialNum+0x48>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <Get_SerialNum+0x4c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4413      	add	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008216:	2208      	movs	r2, #8
 8008218:	4909      	ldr	r1, [pc, #36]	; (8008240 <Get_SerialNum+0x50>)
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 f814 	bl	8008248 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008220:	2204      	movs	r2, #4
 8008222:	4908      	ldr	r1, [pc, #32]	; (8008244 <Get_SerialNum+0x54>)
 8008224:	68b8      	ldr	r0, [r7, #8]
 8008226:	f000 f80f 	bl	8008248 <IntToUnicode>
  }
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	1fff7590 	.word	0x1fff7590
 8008238:	1fff7594 	.word	0x1fff7594
 800823c:	1fff7598 	.word	0x1fff7598
 8008240:	20000176 	.word	0x20000176
 8008244:	20000186 	.word	0x20000186

08008248 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4613      	mov	r3, r2
 8008254:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]
 800825e:	e027      	b.n	80082b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	0f1b      	lsrs	r3, r3, #28
 8008264:	2b09      	cmp	r3, #9
 8008266:	d80b      	bhi.n	8008280 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	0f1b      	lsrs	r3, r3, #28
 800826c:	b2da      	uxtb	r2, r3
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	4619      	mov	r1, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	440b      	add	r3, r1
 8008278:	3230      	adds	r2, #48	; 0x30
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	e00a      	b.n	8008296 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	0f1b      	lsrs	r3, r3, #28
 8008284:	b2da      	uxtb	r2, r3
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	4619      	mov	r1, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	440b      	add	r3, r1
 8008290:	3237      	adds	r2, #55	; 0x37
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	011b      	lsls	r3, r3, #4
 800829a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	3301      	adds	r3, #1
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	4413      	add	r3, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	3301      	adds	r3, #1
 80082ae:	75fb      	strb	r3, [r7, #23]
 80082b0:	7dfa      	ldrb	r2, [r7, #23]
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d3d3      	bcc.n	8008260 <IntToUnicode+0x18>
  }
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
	...

080082c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b09c      	sub	sp, #112	; 0x70
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082d0:	f107 0310 	add.w	r3, r7, #16
 80082d4:	2260      	movs	r2, #96	; 0x60
 80082d6:	2100      	movs	r1, #0
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fbd3 	bl	8008a84 <memset>
  if(pcdHandle->Instance==USB)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_PCD_MspInit+0x90>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d132      	bne.n	800834e <HAL_PCD_MspInit+0x86>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80082e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80082ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80082f2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80082f8:	2301      	movs	r3, #1
 80082fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80082fc:	2318      	movs	r3, #24
 80082fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008300:	2307      	movs	r3, #7
 8008302:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008304:	2302      	movs	r3, #2
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008308:	2302      	movs	r3, #2
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800830c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008312:	f107 0310 	add.w	r3, r7, #16
 8008316:	4618      	mov	r0, r3
 8008318:	f7fb fd42 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 8008322:	f7f8 fe59 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <HAL_PCD_MspInit+0x94>)
 8008328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832a:	4a0c      	ldr	r2, [pc, #48]	; (800835c <HAL_PCD_MspInit+0x94>)
 800832c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008330:	6593      	str	r3, [r2, #88]	; 0x58
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <HAL_PCD_MspInit+0x94>)
 8008334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008336:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800833e:	2200      	movs	r2, #0
 8008340:	2100      	movs	r1, #0
 8008342:	2043      	movs	r0, #67	; 0x43
 8008344:	f7f9 f8f7 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008348:	2043      	movs	r0, #67	; 0x43
 800834a:	f7f9 f910 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800834e:	bf00      	nop
 8008350:	3770      	adds	r7, #112	; 0x70
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40006800 	.word	0x40006800
 800835c:	40021000 	.word	0x40021000

08008360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f7fe fce6 	bl	8006d48 <USBD_LL_SetupStage>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	440b      	add	r3, r1
 80083a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	4619      	mov	r1, r3
 80083ae:	f7fe fd20 	bl	8006df2 <USBD_LL_DataOutStage>
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	440b      	add	r3, r1
 80083da:	3340      	adds	r3, #64	; 0x40
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	4619      	mov	r1, r3
 80083e2:	f7fe fd69 	bl	8006eb8 <USBD_LL_DataInStage>
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fe7d 	bl	80070fc <USBD_LL_SOF>
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008412:	2301      	movs	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d001      	beq.n	8008422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800841e:	f7f8 fddb 	bl	8000fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008428:	7bfa      	ldrb	r2, [r7, #15]
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fe27 	bl	8007080 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe fdd3 	bl	8006fe4 <USBD_LL_Reset>
}
 800843e:	bf00      	nop
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fe22 	bl	80070a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008464:	4b04      	ldr	r3, [pc, #16]	; (8008478 <HAL_PCD_SuspendCallback+0x30>)
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	4a03      	ldr	r2, [pc, #12]	; (8008478 <HAL_PCD_SuspendCallback+0x30>)
 800846a:	f043 0306 	orr.w	r3, r3, #6
 800846e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	e000ed00 	.word	0xe000ed00

0800847c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d007      	beq.n	800849c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800848c:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <HAL_PCD_ResumeCallback+0x34>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <HAL_PCD_ResumeCallback+0x34>)
 8008492:	f023 0306 	bic.w	r3, r3, #6
 8008496:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008498:	f000 fab6 	bl	8008a08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fe12 	bl	80070cc <USBD_LL_Resume>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	e000ed00 	.word	0xe000ed00

080084b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80084bc:	f7fa fe62 	bl	8003184 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084c0:	4a2b      	ldr	r2, [pc, #172]	; (8008570 <USBD_LL_Init+0xbc>)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a29      	ldr	r2, [pc, #164]	; (8008570 <USBD_LL_Init+0xbc>)
 80084cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80084d0:	4b27      	ldr	r3, [pc, #156]	; (8008570 <USBD_LL_Init+0xbc>)
 80084d2:	4a28      	ldr	r2, [pc, #160]	; (8008574 <USBD_LL_Init+0xc0>)
 80084d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084d6:	4b26      	ldr	r3, [pc, #152]	; (8008570 <USBD_LL_Init+0xbc>)
 80084d8:	2208      	movs	r2, #8
 80084da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084dc:	4b24      	ldr	r3, [pc, #144]	; (8008570 <USBD_LL_Init+0xbc>)
 80084de:	2202      	movs	r2, #2
 80084e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <USBD_LL_Init+0xbc>)
 80084e4:	2202      	movs	r2, #2
 80084e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80084e8:	4b21      	ldr	r3, [pc, #132]	; (8008570 <USBD_LL_Init+0xbc>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084ee:	4b20      	ldr	r3, [pc, #128]	; (8008570 <USBD_LL_Init+0xbc>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084f4:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <USBD_LL_Init+0xbc>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084fa:	4b1d      	ldr	r3, [pc, #116]	; (8008570 <USBD_LL_Init+0xbc>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008500:	481b      	ldr	r0, [pc, #108]	; (8008570 <USBD_LL_Init+0xbc>)
 8008502:	f7f9 f84e 	bl	80015a2 <HAL_PCD_Init>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800850c:	f7f8 fd64 	bl	8000fd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008516:	2318      	movs	r3, #24
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	f7fa fd5e 	bl	8002fdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008526:	2358      	movs	r3, #88	; 0x58
 8008528:	2200      	movs	r2, #0
 800852a:	2180      	movs	r1, #128	; 0x80
 800852c:	f7fa fd56 	bl	8002fdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008536:	23c0      	movs	r3, #192	; 0xc0
 8008538:	2200      	movs	r2, #0
 800853a:	2181      	movs	r1, #129	; 0x81
 800853c:	f7fa fd4e 	bl	8002fdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008546:	f44f 7388 	mov.w	r3, #272	; 0x110
 800854a:	2200      	movs	r2, #0
 800854c:	2101      	movs	r1, #1
 800854e:	f7fa fd45 	bl	8002fdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855c:	2200      	movs	r2, #0
 800855e:	2182      	movs	r1, #130	; 0x82
 8008560:	f7fa fd3c 	bl	8002fdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20001308 	.word	0x20001308
 8008574:	40006800 	.word	0x40006800

08008578 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 f91e 	bl	80017d0 <HAL_PCD_Start>
 8008594:	4603      	mov	r3, r0
 8008596:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d816      	bhi.n	80085cc <USBD_LL_Start+0x54>
 800859e:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <USBD_LL_Start+0x2c>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085b5 	.word	0x080085b5
 80085a8:	080085bb 	.word	0x080085bb
 80085ac:	080085c1 	.word	0x080085c1
 80085b0:	080085c7 	.word	0x080085c7
    case HAL_OK :
      usb_status = USBD_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	e00b      	b.n	80085d2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085ba:	2303      	movs	r3, #3
 80085bc:	73fb      	strb	r3, [r7, #15]
    break;
 80085be:	e008      	b.n	80085d2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
    break;
 80085c4:	e005      	b.n	80085d2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085c6:	2303      	movs	r3, #3
 80085c8:	73fb      	strb	r3, [r7, #15]
    break;
 80085ca:	e002      	b.n	80085d2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80085cc:	2303      	movs	r3, #3
 80085ce:	73fb      	strb	r3, [r7, #15]
    break;
 80085d0:	bf00      	nop
  }
  return usb_status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	70fb      	strb	r3, [r7, #3]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70bb      	strb	r3, [r7, #2]
 80085f2:	4613      	mov	r3, r2
 80085f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008604:	78bb      	ldrb	r3, [r7, #2]
 8008606:	883a      	ldrh	r2, [r7, #0]
 8008608:	78f9      	ldrb	r1, [r7, #3]
 800860a:	f7f9 fa4f 	bl	8001aac <HAL_PCD_EP_Open>
 800860e:	4603      	mov	r3, r0
 8008610:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d817      	bhi.n	8008648 <USBD_LL_OpenEP+0x6c>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USBD_LL_OpenEP+0x44>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008631 	.word	0x08008631
 8008624:	08008637 	.word	0x08008637
 8008628:	0800863d 	.word	0x0800863d
 800862c:	08008643 	.word	0x08008643
    case HAL_OK :
      usb_status = USBD_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
    break;
 8008634:	e00b      	b.n	800864e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008636:	2303      	movs	r3, #3
 8008638:	73fb      	strb	r3, [r7, #15]
    break;
 800863a:	e008      	b.n	800864e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
    break;
 8008640:	e005      	b.n	800864e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	73fb      	strb	r3, [r7, #15]
    break;
 8008646:	e002      	b.n	800864e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	bf00      	nop
  }
  return usb_status;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 fa80 	bl	8001b7c <HAL_PCD_EP_Close>
 800867c:	4603      	mov	r3, r0
 800867e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d816      	bhi.n	80086b4 <USBD_LL_CloseEP+0x5c>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_LL_CloseEP+0x34>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086a3 	.word	0x080086a3
 8008694:	080086a9 	.word	0x080086a9
 8008698:	080086af 	.word	0x080086af
    case HAL_OK :
      usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e00b      	b.n	80086ba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086a2:	2303      	movs	r3, #3
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	e008      	b.n	80086ba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e005      	b.n	80086ba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
    break;
 80086b2:	e002      	b.n	80086ba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	bf00      	nop
  }
  return usb_status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f9 fb2e 	bl	8001d44 <HAL_PCD_EP_SetStall>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d816      	bhi.n	8008720 <USBD_LL_StallEP+0x5c>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <USBD_LL_StallEP+0x34>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008709 	.word	0x08008709
 80086fc:	0800870f 	.word	0x0800870f
 8008700:	08008715 	.word	0x08008715
 8008704:	0800871b 	.word	0x0800871b
    case HAL_OK :
      usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	e00b      	b.n	8008726 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	73fb      	strb	r3, [r7, #15]
    break;
 8008712:	e008      	b.n	8008726 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
    break;
 8008718:	e005      	b.n	8008726 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800871a:	2303      	movs	r3, #3
 800871c:	73fb      	strb	r3, [r7, #15]
    break;
 800871e:	e002      	b.n	8008726 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	73fb      	strb	r3, [r7, #15]
    break;
 8008724:	bf00      	nop
  }
  return usb_status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800874a:	78fa      	ldrb	r2, [r7, #3]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7f9 fb5a 	bl	8001e08 <HAL_PCD_EP_ClrStall>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b03      	cmp	r3, #3
 800875c:	d816      	bhi.n	800878c <USBD_LL_ClearStallEP+0x5c>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBD_LL_ClearStallEP+0x34>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008775 	.word	0x08008775
 8008768:	0800877b 	.word	0x0800877b
 800876c:	08008781 	.word	0x08008781
 8008770:	08008787 	.word	0x08008787
    case HAL_OK :
      usb_status = USBD_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
    break;
 8008778:	e00b      	b.n	8008792 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800877a:	2303      	movs	r3, #3
 800877c:	73fb      	strb	r3, [r7, #15]
    break;
 800877e:	e008      	b.n	8008792 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
    break;
 8008784:	e005      	b.n	8008792 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008786:	2303      	movs	r3, #3
 8008788:	73fb      	strb	r3, [r7, #15]
    break;
 800878a:	e002      	b.n	8008792 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]
    break;
 8008790:	bf00      	nop
  }
  return usb_status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da0c      	bge.n	80087d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	3306      	adds	r3, #6
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	e00b      	b.n	80087ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80087e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
	...

080087f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7f9 f923 	bl	8001a62 <HAL_PCD_SetAddress>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d816      	bhi.n	8008854 <USBD_LL_SetUSBAddress+0x5c>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <USBD_LL_SetUSBAddress+0x34>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	0800883d 	.word	0x0800883d
 8008830:	08008843 	.word	0x08008843
 8008834:	08008849 	.word	0x08008849
 8008838:	0800884f 	.word	0x0800884f
    case HAL_OK :
      usb_status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
    break;
 8008840:	e00b      	b.n	800885a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008842:	2303      	movs	r3, #3
 8008844:	73fb      	strb	r3, [r7, #15]
    break;
 8008846:	e008      	b.n	800885a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
    break;
 800884c:	e005      	b.n	800885a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	73fb      	strb	r3, [r7, #15]
    break;
 8008852:	e002      	b.n	800885a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008854:	2303      	movs	r3, #3
 8008856:	73fb      	strb	r3, [r7, #15]
    break;
 8008858:	bf00      	nop
  }
  return usb_status;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	607a      	str	r2, [r7, #4]
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	460b      	mov	r3, r1
 8008872:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008882:	7af9      	ldrb	r1, [r7, #11]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	f7f9 fa18 	bl	8001cbc <HAL_PCD_EP_Transmit>
 800888c:	4603      	mov	r3, r0
 800888e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008890:	7dbb      	ldrb	r3, [r7, #22]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d816      	bhi.n	80088c4 <USBD_LL_Transmit+0x60>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <USBD_LL_Transmit+0x38>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088ad 	.word	0x080088ad
 80088a0:	080088b3 	.word	0x080088b3
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088bf 	.word	0x080088bf
    case HAL_OK :
      usb_status = USBD_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]
    break;
 80088b0:	e00b      	b.n	80088ca <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	75fb      	strb	r3, [r7, #23]
    break;
 80088b6:	e008      	b.n	80088ca <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
    break;
 80088bc:	e005      	b.n	80088ca <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088be:	2303      	movs	r3, #3
 80088c0:	75fb      	strb	r3, [r7, #23]
    break;
 80088c2:	e002      	b.n	80088ca <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80088c4:	2303      	movs	r3, #3
 80088c6:	75fb      	strb	r3, [r7, #23]
    break;
 80088c8:	bf00      	nop
  }
  return usb_status;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	460b      	mov	r3, r1
 80088e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80088f2:	7af9      	ldrb	r1, [r7, #11]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	f7f9 f98a 	bl	8001c10 <HAL_PCD_EP_Receive>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008900:	7dbb      	ldrb	r3, [r7, #22]
 8008902:	2b03      	cmp	r3, #3
 8008904:	d816      	bhi.n	8008934 <USBD_LL_PrepareReceive+0x60>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <USBD_LL_PrepareReceive+0x38>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	0800891d 	.word	0x0800891d
 8008910:	08008923 	.word	0x08008923
 8008914:	08008929 	.word	0x08008929
 8008918:	0800892f 	.word	0x0800892f
    case HAL_OK :
      usb_status = USBD_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	75fb      	strb	r3, [r7, #23]
    break;
 8008920:	e00b      	b.n	800893a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008922:	2303      	movs	r3, #3
 8008924:	75fb      	strb	r3, [r7, #23]
    break;
 8008926:	e008      	b.n	800893a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
    break;
 800892c:	e005      	b.n	800893a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800892e:	2303      	movs	r3, #3
 8008930:	75fb      	strb	r3, [r7, #23]
    break;
 8008932:	e002      	b.n	800893a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008934:	2303      	movs	r3, #3
 8008936:	75fb      	strb	r3, [r7, #23]
    break;
 8008938:	bf00      	nop
  }
  return usb_status;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008956:	78fa      	ldrb	r2, [r7, #3]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7f9 f996 	bl	8001c8c <HAL_PCD_EP_GetRxCount>
 8008960:	4603      	mov	r3, r0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_PCDEx_LPM_Callback+0x18>
 800897e:	2b01      	cmp	r3, #1
 8008980:	d013      	beq.n	80089aa <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008982:	e023      	b.n	80089cc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d007      	beq.n	800899c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800898c:	f000 f83c 	bl	8008a08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008990:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008996:	f023 0306 	bic.w	r3, r3, #6
 800899a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fb92 	bl	80070cc <USBD_LL_Resume>
    break;
 80089a8:	e010      	b.n	80089cc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fb75 	bl	80070a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <HAL_PCDEx_LPM_Callback+0x68>)
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	4a04      	ldr	r2, [pc, #16]	; (80089d4 <HAL_PCDEx_LPM_Callback+0x68>)
 80089c4:	f043 0306 	orr.w	r3, r3, #6
 80089c8:	6113      	str	r3, [r2, #16]
    break;
 80089ca:	bf00      	nop
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	e000ed00 	.word	0xe000ed00

080089d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089e0:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <USBD_static_malloc+0x18>)
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000384 	.word	0x20000384

080089f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008a0c:	f7f8 fa92 	bl	8000f34 <SystemClock_Config>
}
 8008a10:	bf00      	nop
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <__errno>:
 8008a14:	4b01      	ldr	r3, [pc, #4]	; (8008a1c <__errno+0x8>)
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	20000190 	.word	0x20000190

08008a20 <__libc_init_array>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4d0d      	ldr	r5, [pc, #52]	; (8008a58 <__libc_init_array+0x38>)
 8008a24:	4c0d      	ldr	r4, [pc, #52]	; (8008a5c <__libc_init_array+0x3c>)
 8008a26:	1b64      	subs	r4, r4, r5
 8008a28:	10a4      	asrs	r4, r4, #2
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	42a6      	cmp	r6, r4
 8008a2e:	d109      	bne.n	8008a44 <__libc_init_array+0x24>
 8008a30:	4d0b      	ldr	r5, [pc, #44]	; (8008a60 <__libc_init_array+0x40>)
 8008a32:	4c0c      	ldr	r4, [pc, #48]	; (8008a64 <__libc_init_array+0x44>)
 8008a34:	f002 fedc 	bl	800b7f0 <_init>
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	d105      	bne.n	8008a4e <__libc_init_array+0x2e>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	4798      	blx	r3
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7ee      	b.n	8008a2c <__libc_init_array+0xc>
 8008a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a52:	4798      	blx	r3
 8008a54:	3601      	adds	r6, #1
 8008a56:	e7f2      	b.n	8008a3e <__libc_init_array+0x1e>
 8008a58:	0800bd44 	.word	0x0800bd44
 8008a5c:	0800bd44 	.word	0x0800bd44
 8008a60:	0800bd44 	.word	0x0800bd44
 8008a64:	0800bd48 	.word	0x0800bd48

08008a68 <memcpy>:
 8008a68:	440a      	add	r2, r1
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a70:	d100      	bne.n	8008a74 <memcpy+0xc>
 8008a72:	4770      	bx	lr
 8008a74:	b510      	push	{r4, lr}
 8008a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	d1f9      	bne.n	8008a76 <memcpy+0xe>
 8008a82:	bd10      	pop	{r4, pc}

08008a84 <memset>:
 8008a84:	4402      	add	r2, r0
 8008a86:	4603      	mov	r3, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <__cvt>:
 8008a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a98:	ec55 4b10 	vmov	r4, r5, d0
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	460e      	mov	r6, r1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	bfbb      	ittet	lt
 8008aa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008aaa:	461d      	movlt	r5, r3
 8008aac:	2300      	movge	r3, #0
 8008aae:	232d      	movlt	r3, #45	; 0x2d
 8008ab0:	700b      	strb	r3, [r1, #0]
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ab8:	4691      	mov	r9, r2
 8008aba:	f023 0820 	bic.w	r8, r3, #32
 8008abe:	bfbc      	itt	lt
 8008ac0:	4622      	movlt	r2, r4
 8008ac2:	4614      	movlt	r4, r2
 8008ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ac8:	d005      	beq.n	8008ad6 <__cvt+0x42>
 8008aca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ace:	d100      	bne.n	8008ad2 <__cvt+0x3e>
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	e000      	b.n	8008ad8 <__cvt+0x44>
 8008ad6:	2103      	movs	r1, #3
 8008ad8:	ab03      	add	r3, sp, #12
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	ab02      	add	r3, sp, #8
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	ec45 4b10 	vmov	d0, r4, r5
 8008ae4:	4653      	mov	r3, sl
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	f000 fd12 	bl	8009510 <_dtoa_r>
 8008aec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008af0:	4607      	mov	r7, r0
 8008af2:	d102      	bne.n	8008afa <__cvt+0x66>
 8008af4:	f019 0f01 	tst.w	r9, #1
 8008af8:	d022      	beq.n	8008b40 <__cvt+0xac>
 8008afa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008afe:	eb07 0906 	add.w	r9, r7, r6
 8008b02:	d110      	bne.n	8008b26 <__cvt+0x92>
 8008b04:	783b      	ldrb	r3, [r7, #0]
 8008b06:	2b30      	cmp	r3, #48	; 0x30
 8008b08:	d10a      	bne.n	8008b20 <__cvt+0x8c>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 ffe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b16:	b918      	cbnz	r0, 8008b20 <__cvt+0x8c>
 8008b18:	f1c6 0601 	rsb	r6, r6, #1
 8008b1c:	f8ca 6000 	str.w	r6, [sl]
 8008b20:	f8da 3000 	ldr.w	r3, [sl]
 8008b24:	4499      	add	r9, r3
 8008b26:	2200      	movs	r2, #0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f7f7 ffdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b32:	b108      	cbz	r0, 8008b38 <__cvt+0xa4>
 8008b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b38:	2230      	movs	r2, #48	; 0x30
 8008b3a:	9b03      	ldr	r3, [sp, #12]
 8008b3c:	454b      	cmp	r3, r9
 8008b3e:	d307      	bcc.n	8008b50 <__cvt+0xbc>
 8008b40:	9b03      	ldr	r3, [sp, #12]
 8008b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b44:	1bdb      	subs	r3, r3, r7
 8008b46:	4638      	mov	r0, r7
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	b004      	add	sp, #16
 8008b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b50:	1c59      	adds	r1, r3, #1
 8008b52:	9103      	str	r1, [sp, #12]
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	e7f0      	b.n	8008b3a <__cvt+0xa6>

08008b58 <__exponent>:
 8008b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	bfb8      	it	lt
 8008b60:	4249      	neglt	r1, r1
 8008b62:	f803 2b02 	strb.w	r2, [r3], #2
 8008b66:	bfb4      	ite	lt
 8008b68:	222d      	movlt	r2, #45	; 0x2d
 8008b6a:	222b      	movge	r2, #43	; 0x2b
 8008b6c:	2909      	cmp	r1, #9
 8008b6e:	7042      	strb	r2, [r0, #1]
 8008b70:	dd2a      	ble.n	8008bc8 <__exponent+0x70>
 8008b72:	f10d 0407 	add.w	r4, sp, #7
 8008b76:	46a4      	mov	ip, r4
 8008b78:	270a      	movs	r7, #10
 8008b7a:	46a6      	mov	lr, r4
 8008b7c:	460a      	mov	r2, r1
 8008b7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b82:	fb07 1516 	mls	r5, r7, r6, r1
 8008b86:	3530      	adds	r5, #48	; 0x30
 8008b88:	2a63      	cmp	r2, #99	; 0x63
 8008b8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b92:	4631      	mov	r1, r6
 8008b94:	dcf1      	bgt.n	8008b7a <__exponent+0x22>
 8008b96:	3130      	adds	r1, #48	; 0x30
 8008b98:	f1ae 0502 	sub.w	r5, lr, #2
 8008b9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ba0:	1c44      	adds	r4, r0, #1
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	4561      	cmp	r1, ip
 8008ba6:	d30a      	bcc.n	8008bbe <__exponent+0x66>
 8008ba8:	f10d 0209 	add.w	r2, sp, #9
 8008bac:	eba2 020e 	sub.w	r2, r2, lr
 8008bb0:	4565      	cmp	r5, ip
 8008bb2:	bf88      	it	hi
 8008bb4:	2200      	movhi	r2, #0
 8008bb6:	4413      	add	r3, r2
 8008bb8:	1a18      	subs	r0, r3, r0
 8008bba:	b003      	add	sp, #12
 8008bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bc6:	e7ed      	b.n	8008ba4 <__exponent+0x4c>
 8008bc8:	2330      	movs	r3, #48	; 0x30
 8008bca:	3130      	adds	r1, #48	; 0x30
 8008bcc:	7083      	strb	r3, [r0, #2]
 8008bce:	70c1      	strb	r1, [r0, #3]
 8008bd0:	1d03      	adds	r3, r0, #4
 8008bd2:	e7f1      	b.n	8008bb8 <__exponent+0x60>

08008bd4 <_printf_float>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	ed2d 8b02 	vpush	{d8}
 8008bdc:	b08d      	sub	sp, #52	; 0x34
 8008bde:	460c      	mov	r4, r1
 8008be0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008be4:	4616      	mov	r6, r2
 8008be6:	461f      	mov	r7, r3
 8008be8:	4605      	mov	r5, r0
 8008bea:	f001 fa7d 	bl	800a0e8 <_localeconv_r>
 8008bee:	f8d0 a000 	ldr.w	sl, [r0]
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	f7f7 faf6 	bl	80001e4 <strlen>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	f8d8 3000 	ldr.w	r3, [r8]
 8008c04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c08:	3307      	adds	r3, #7
 8008c0a:	f023 0307 	bic.w	r3, r3, #7
 8008c0e:	f103 0208 	add.w	r2, r3, #8
 8008c12:	f8c8 2000 	str.w	r2, [r8]
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c2c:	ee08 0a10 	vmov	s16, r0
 8008c30:	4b9f      	ldr	r3, [pc, #636]	; (8008eb0 <_printf_float+0x2dc>)
 8008c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c36:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3a:	f7f7 ff87 	bl	8000b4c <__aeabi_dcmpun>
 8008c3e:	bb88      	cbnz	r0, 8008ca4 <_printf_float+0xd0>
 8008c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c44:	4b9a      	ldr	r3, [pc, #616]	; (8008eb0 <_printf_float+0x2dc>)
 8008c46:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4a:	f7f7 ff61 	bl	8000b10 <__aeabi_dcmple>
 8008c4e:	bb48      	cbnz	r0, 8008ca4 <_printf_float+0xd0>
 8008c50:	2200      	movs	r2, #0
 8008c52:	2300      	movs	r3, #0
 8008c54:	4640      	mov	r0, r8
 8008c56:	4649      	mov	r1, r9
 8008c58:	f7f7 ff50 	bl	8000afc <__aeabi_dcmplt>
 8008c5c:	b110      	cbz	r0, 8008c64 <_printf_float+0x90>
 8008c5e:	232d      	movs	r3, #45	; 0x2d
 8008c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c64:	4b93      	ldr	r3, [pc, #588]	; (8008eb4 <_printf_float+0x2e0>)
 8008c66:	4894      	ldr	r0, [pc, #592]	; (8008eb8 <_printf_float+0x2e4>)
 8008c68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c6c:	bf94      	ite	ls
 8008c6e:	4698      	movls	r8, r3
 8008c70:	4680      	movhi	r8, r0
 8008c72:	2303      	movs	r3, #3
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	9b05      	ldr	r3, [sp, #20]
 8008c78:	f023 0204 	bic.w	r2, r3, #4
 8008c7c:	6022      	str	r2, [r4, #0]
 8008c7e:	f04f 0900 	mov.w	r9, #0
 8008c82:	9700      	str	r7, [sp, #0]
 8008c84:	4633      	mov	r3, r6
 8008c86:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f9d8 	bl	8009040 <_printf_common>
 8008c90:	3001      	adds	r0, #1
 8008c92:	f040 8090 	bne.w	8008db6 <_printf_float+0x1e2>
 8008c96:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9a:	b00d      	add	sp, #52	; 0x34
 8008c9c:	ecbd 8b02 	vpop	{d8}
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	4640      	mov	r0, r8
 8008caa:	4649      	mov	r1, r9
 8008cac:	f7f7 ff4e 	bl	8000b4c <__aeabi_dcmpun>
 8008cb0:	b140      	cbz	r0, 8008cc4 <_printf_float+0xf0>
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bfbc      	itt	lt
 8008cb8:	232d      	movlt	r3, #45	; 0x2d
 8008cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cbe:	487f      	ldr	r0, [pc, #508]	; (8008ebc <_printf_float+0x2e8>)
 8008cc0:	4b7f      	ldr	r3, [pc, #508]	; (8008ec0 <_printf_float+0x2ec>)
 8008cc2:	e7d1      	b.n	8008c68 <_printf_float+0x94>
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cca:	9206      	str	r2, [sp, #24]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	d13f      	bne.n	8008d50 <_printf_float+0x17c>
 8008cd0:	2306      	movs	r3, #6
 8008cd2:	6063      	str	r3, [r4, #4]
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	6861      	ldr	r1, [r4, #4]
 8008cd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	ab0a      	add	r3, sp, #40	; 0x28
 8008ce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ce6:	ab09      	add	r3, sp, #36	; 0x24
 8008ce8:	ec49 8b10 	vmov	d0, r8, r9
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7ff fecd 	bl	8008a94 <__cvt>
 8008cfa:	9b06      	ldr	r3, [sp, #24]
 8008cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cfe:	2b47      	cmp	r3, #71	; 0x47
 8008d00:	4680      	mov	r8, r0
 8008d02:	d108      	bne.n	8008d16 <_printf_float+0x142>
 8008d04:	1cc8      	adds	r0, r1, #3
 8008d06:	db02      	blt.n	8008d0e <_printf_float+0x13a>
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	4299      	cmp	r1, r3
 8008d0c:	dd41      	ble.n	8008d92 <_printf_float+0x1be>
 8008d0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d12:	fa5f fb8b 	uxtb.w	fp, fp
 8008d16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d1a:	d820      	bhi.n	8008d5e <_printf_float+0x18a>
 8008d1c:	3901      	subs	r1, #1
 8008d1e:	465a      	mov	r2, fp
 8008d20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d24:	9109      	str	r1, [sp, #36]	; 0x24
 8008d26:	f7ff ff17 	bl	8008b58 <__exponent>
 8008d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d2c:	1813      	adds	r3, r2, r0
 8008d2e:	2a01      	cmp	r2, #1
 8008d30:	4681      	mov	r9, r0
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	dc02      	bgt.n	8008d3c <_printf_float+0x168>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	07d2      	lsls	r2, r2, #31
 8008d3a:	d501      	bpl.n	8008d40 <_printf_float+0x16c>
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d09c      	beq.n	8008c82 <_printf_float+0xae>
 8008d48:	232d      	movs	r3, #45	; 0x2d
 8008d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d4e:	e798      	b.n	8008c82 <_printf_float+0xae>
 8008d50:	9a06      	ldr	r2, [sp, #24]
 8008d52:	2a47      	cmp	r2, #71	; 0x47
 8008d54:	d1be      	bne.n	8008cd4 <_printf_float+0x100>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1bc      	bne.n	8008cd4 <_printf_float+0x100>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e7b9      	b.n	8008cd2 <_printf_float+0xfe>
 8008d5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d62:	d118      	bne.n	8008d96 <_printf_float+0x1c2>
 8008d64:	2900      	cmp	r1, #0
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	dd0b      	ble.n	8008d82 <_printf_float+0x1ae>
 8008d6a:	6121      	str	r1, [r4, #16]
 8008d6c:	b913      	cbnz	r3, 8008d74 <_printf_float+0x1a0>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	07d0      	lsls	r0, r2, #31
 8008d72:	d502      	bpl.n	8008d7a <_printf_float+0x1a6>
 8008d74:	3301      	adds	r3, #1
 8008d76:	440b      	add	r3, r1
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d7c:	f04f 0900 	mov.w	r9, #0
 8008d80:	e7de      	b.n	8008d40 <_printf_float+0x16c>
 8008d82:	b913      	cbnz	r3, 8008d8a <_printf_float+0x1b6>
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	07d2      	lsls	r2, r2, #31
 8008d88:	d501      	bpl.n	8008d8e <_printf_float+0x1ba>
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	e7f4      	b.n	8008d78 <_printf_float+0x1a4>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e7f2      	b.n	8008d78 <_printf_float+0x1a4>
 8008d92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	db05      	blt.n	8008da8 <_printf_float+0x1d4>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	6121      	str	r1, [r4, #16]
 8008da0:	07d8      	lsls	r0, r3, #31
 8008da2:	d5ea      	bpl.n	8008d7a <_printf_float+0x1a6>
 8008da4:	1c4b      	adds	r3, r1, #1
 8008da6:	e7e7      	b.n	8008d78 <_printf_float+0x1a4>
 8008da8:	2900      	cmp	r1, #0
 8008daa:	bfd4      	ite	le
 8008dac:	f1c1 0202 	rsble	r2, r1, #2
 8008db0:	2201      	movgt	r2, #1
 8008db2:	4413      	add	r3, r2
 8008db4:	e7e0      	b.n	8008d78 <_printf_float+0x1a4>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	055a      	lsls	r2, r3, #21
 8008dba:	d407      	bmi.n	8008dcc <_printf_float+0x1f8>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	4642      	mov	r2, r8
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d12c      	bne.n	8008e24 <_printf_float+0x250>
 8008dca:	e764      	b.n	8008c96 <_printf_float+0xc2>
 8008dcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dd0:	f240 80e0 	bls.w	8008f94 <_printf_float+0x3c0>
 8008dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f7f7 fe84 	bl	8000ae8 <__aeabi_dcmpeq>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d034      	beq.n	8008e4e <_printf_float+0x27a>
 8008de4:	4a37      	ldr	r2, [pc, #220]	; (8008ec4 <_printf_float+0x2f0>)
 8008de6:	2301      	movs	r3, #1
 8008de8:	4631      	mov	r1, r6
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b8      	blx	r7
 8008dee:	3001      	adds	r0, #1
 8008df0:	f43f af51 	beq.w	8008c96 <_printf_float+0xc2>
 8008df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	db02      	blt.n	8008e02 <_printf_float+0x22e>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	07d8      	lsls	r0, r3, #31
 8008e00:	d510      	bpl.n	8008e24 <_printf_float+0x250>
 8008e02:	ee18 3a10 	vmov	r3, s16
 8008e06:	4652      	mov	r2, sl
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f af41 	beq.w	8008c96 <_printf_float+0xc2>
 8008e14:	f04f 0800 	mov.w	r8, #0
 8008e18:	f104 091a 	add.w	r9, r4, #26
 8008e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	4543      	cmp	r3, r8
 8008e22:	dc09      	bgt.n	8008e38 <_printf_float+0x264>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	079b      	lsls	r3, r3, #30
 8008e28:	f100 8105 	bmi.w	8009036 <_printf_float+0x462>
 8008e2c:	68e0      	ldr	r0, [r4, #12]
 8008e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e30:	4298      	cmp	r0, r3
 8008e32:	bfb8      	it	lt
 8008e34:	4618      	movlt	r0, r3
 8008e36:	e730      	b.n	8008c9a <_printf_float+0xc6>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	464a      	mov	r2, r9
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	47b8      	blx	r7
 8008e42:	3001      	adds	r0, #1
 8008e44:	f43f af27 	beq.w	8008c96 <_printf_float+0xc2>
 8008e48:	f108 0801 	add.w	r8, r8, #1
 8008e4c:	e7e6      	b.n	8008e1c <_printf_float+0x248>
 8008e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dc39      	bgt.n	8008ec8 <_printf_float+0x2f4>
 8008e54:	4a1b      	ldr	r2, [pc, #108]	; (8008ec4 <_printf_float+0x2f0>)
 8008e56:	2301      	movs	r3, #1
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f43f af19 	beq.w	8008c96 <_printf_float+0xc2>
 8008e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	d102      	bne.n	8008e72 <_printf_float+0x29e>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d5d8      	bpl.n	8008e24 <_printf_float+0x250>
 8008e72:	ee18 3a10 	vmov	r3, s16
 8008e76:	4652      	mov	r2, sl
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af09 	beq.w	8008c96 <_printf_float+0xc2>
 8008e84:	f04f 0900 	mov.w	r9, #0
 8008e88:	f104 0a1a 	add.w	sl, r4, #26
 8008e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8e:	425b      	negs	r3, r3
 8008e90:	454b      	cmp	r3, r9
 8008e92:	dc01      	bgt.n	8008e98 <_printf_float+0x2c4>
 8008e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e96:	e792      	b.n	8008dbe <_printf_float+0x1ea>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f43f aef7 	beq.w	8008c96 <_printf_float+0xc2>
 8008ea8:	f109 0901 	add.w	r9, r9, #1
 8008eac:	e7ee      	b.n	8008e8c <_printf_float+0x2b8>
 8008eae:	bf00      	nop
 8008eb0:	7fefffff 	.word	0x7fefffff
 8008eb4:	0800b964 	.word	0x0800b964
 8008eb8:	0800b968 	.word	0x0800b968
 8008ebc:	0800b970 	.word	0x0800b970
 8008ec0:	0800b96c 	.word	0x0800b96c
 8008ec4:	0800b974 	.word	0x0800b974
 8008ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	bfa8      	it	ge
 8008ed0:	461a      	movge	r2, r3
 8008ed2:	2a00      	cmp	r2, #0
 8008ed4:	4691      	mov	r9, r2
 8008ed6:	dc37      	bgt.n	8008f48 <_printf_float+0x374>
 8008ed8:	f04f 0b00 	mov.w	fp, #0
 8008edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ee0:	f104 021a 	add.w	r2, r4, #26
 8008ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ee6:	9305      	str	r3, [sp, #20]
 8008ee8:	eba3 0309 	sub.w	r3, r3, r9
 8008eec:	455b      	cmp	r3, fp
 8008eee:	dc33      	bgt.n	8008f58 <_printf_float+0x384>
 8008ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	db3b      	blt.n	8008f70 <_printf_float+0x39c>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	07da      	lsls	r2, r3, #31
 8008efc:	d438      	bmi.n	8008f70 <_printf_float+0x39c>
 8008efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f00:	9b05      	ldr	r3, [sp, #20]
 8008f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	eba2 0901 	sub.w	r9, r2, r1
 8008f0a:	4599      	cmp	r9, r3
 8008f0c:	bfa8      	it	ge
 8008f0e:	4699      	movge	r9, r3
 8008f10:	f1b9 0f00 	cmp.w	r9, #0
 8008f14:	dc35      	bgt.n	8008f82 <_printf_float+0x3ae>
 8008f16:	f04f 0800 	mov.w	r8, #0
 8008f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f1e:	f104 0a1a 	add.w	sl, r4, #26
 8008f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	eba3 0309 	sub.w	r3, r3, r9
 8008f2c:	4543      	cmp	r3, r8
 8008f2e:	f77f af79 	ble.w	8008e24 <_printf_float+0x250>
 8008f32:	2301      	movs	r3, #1
 8008f34:	4652      	mov	r2, sl
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f aeaa 	beq.w	8008c96 <_printf_float+0xc2>
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	e7ec      	b.n	8008f22 <_printf_float+0x34e>
 8008f48:	4613      	mov	r3, r2
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	d1c0      	bne.n	8008ed8 <_printf_float+0x304>
 8008f56:	e69e      	b.n	8008c96 <_printf_float+0xc2>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	9205      	str	r2, [sp, #20]
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f ae97 	beq.w	8008c96 <_printf_float+0xc2>
 8008f68:	9a05      	ldr	r2, [sp, #20]
 8008f6a:	f10b 0b01 	add.w	fp, fp, #1
 8008f6e:	e7b9      	b.n	8008ee4 <_printf_float+0x310>
 8008f70:	ee18 3a10 	vmov	r3, s16
 8008f74:	4652      	mov	r2, sl
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d1be      	bne.n	8008efe <_printf_float+0x32a>
 8008f80:	e689      	b.n	8008c96 <_printf_float+0xc2>
 8008f82:	9a05      	ldr	r2, [sp, #20]
 8008f84:	464b      	mov	r3, r9
 8008f86:	4442      	add	r2, r8
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	47b8      	blx	r7
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d1c1      	bne.n	8008f16 <_printf_float+0x342>
 8008f92:	e680      	b.n	8008c96 <_printf_float+0xc2>
 8008f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f96:	2a01      	cmp	r2, #1
 8008f98:	dc01      	bgt.n	8008f9e <_printf_float+0x3ca>
 8008f9a:	07db      	lsls	r3, r3, #31
 8008f9c:	d538      	bpl.n	8009010 <_printf_float+0x43c>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	f43f ae74 	beq.w	8008c96 <_printf_float+0xc2>
 8008fae:	ee18 3a10 	vmov	r3, s16
 8008fb2:	4652      	mov	r2, sl
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f ae6b 	beq.w	8008c96 <_printf_float+0xc2>
 8008fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f7f7 fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fcc:	b9d8      	cbnz	r0, 8009006 <_printf_float+0x432>
 8008fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd0:	f108 0201 	add.w	r2, r8, #1
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d10e      	bne.n	8008ffe <_printf_float+0x42a>
 8008fe0:	e659      	b.n	8008c96 <_printf_float+0xc2>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f ae52 	beq.w	8008c96 <_printf_float+0xc2>
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	4543      	cmp	r3, r8
 8008ffc:	dcf1      	bgt.n	8008fe2 <_printf_float+0x40e>
 8008ffe:	464b      	mov	r3, r9
 8009000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009004:	e6dc      	b.n	8008dc0 <_printf_float+0x1ec>
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	f104 0a1a 	add.w	sl, r4, #26
 800900e:	e7f2      	b.n	8008ff6 <_printf_float+0x422>
 8009010:	2301      	movs	r3, #1
 8009012:	4642      	mov	r2, r8
 8009014:	e7df      	b.n	8008fd6 <_printf_float+0x402>
 8009016:	2301      	movs	r3, #1
 8009018:	464a      	mov	r2, r9
 800901a:	4631      	mov	r1, r6
 800901c:	4628      	mov	r0, r5
 800901e:	47b8      	blx	r7
 8009020:	3001      	adds	r0, #1
 8009022:	f43f ae38 	beq.w	8008c96 <_printf_float+0xc2>
 8009026:	f108 0801 	add.w	r8, r8, #1
 800902a:	68e3      	ldr	r3, [r4, #12]
 800902c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800902e:	1a5b      	subs	r3, r3, r1
 8009030:	4543      	cmp	r3, r8
 8009032:	dcf0      	bgt.n	8009016 <_printf_float+0x442>
 8009034:	e6fa      	b.n	8008e2c <_printf_float+0x258>
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	f104 0919 	add.w	r9, r4, #25
 800903e:	e7f4      	b.n	800902a <_printf_float+0x456>

08009040 <_printf_common>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	4616      	mov	r6, r2
 8009046:	4699      	mov	r9, r3
 8009048:	688a      	ldr	r2, [r1, #8]
 800904a:	690b      	ldr	r3, [r1, #16]
 800904c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009050:	4293      	cmp	r3, r2
 8009052:	bfb8      	it	lt
 8009054:	4613      	movlt	r3, r2
 8009056:	6033      	str	r3, [r6, #0]
 8009058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800905c:	4607      	mov	r7, r0
 800905e:	460c      	mov	r4, r1
 8009060:	b10a      	cbz	r2, 8009066 <_printf_common+0x26>
 8009062:	3301      	adds	r3, #1
 8009064:	6033      	str	r3, [r6, #0]
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	0699      	lsls	r1, r3, #26
 800906a:	bf42      	ittt	mi
 800906c:	6833      	ldrmi	r3, [r6, #0]
 800906e:	3302      	addmi	r3, #2
 8009070:	6033      	strmi	r3, [r6, #0]
 8009072:	6825      	ldr	r5, [r4, #0]
 8009074:	f015 0506 	ands.w	r5, r5, #6
 8009078:	d106      	bne.n	8009088 <_printf_common+0x48>
 800907a:	f104 0a19 	add.w	sl, r4, #25
 800907e:	68e3      	ldr	r3, [r4, #12]
 8009080:	6832      	ldr	r2, [r6, #0]
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	42ab      	cmp	r3, r5
 8009086:	dc26      	bgt.n	80090d6 <_printf_common+0x96>
 8009088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800908c:	1e13      	subs	r3, r2, #0
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	2301      	movne	r3, #1
 8009094:	0692      	lsls	r2, r2, #26
 8009096:	d42b      	bmi.n	80090f0 <_printf_common+0xb0>
 8009098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800909c:	4649      	mov	r1, r9
 800909e:	4638      	mov	r0, r7
 80090a0:	47c0      	blx	r8
 80090a2:	3001      	adds	r0, #1
 80090a4:	d01e      	beq.n	80090e4 <_printf_common+0xa4>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	68e5      	ldr	r5, [r4, #12]
 80090aa:	6832      	ldr	r2, [r6, #0]
 80090ac:	f003 0306 	and.w	r3, r3, #6
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	bf08      	it	eq
 80090b4:	1aad      	subeq	r5, r5, r2
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	6922      	ldr	r2, [r4, #16]
 80090ba:	bf0c      	ite	eq
 80090bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c0:	2500      	movne	r5, #0
 80090c2:	4293      	cmp	r3, r2
 80090c4:	bfc4      	itt	gt
 80090c6:	1a9b      	subgt	r3, r3, r2
 80090c8:	18ed      	addgt	r5, r5, r3
 80090ca:	2600      	movs	r6, #0
 80090cc:	341a      	adds	r4, #26
 80090ce:	42b5      	cmp	r5, r6
 80090d0:	d11a      	bne.n	8009108 <_printf_common+0xc8>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e008      	b.n	80090e8 <_printf_common+0xa8>
 80090d6:	2301      	movs	r3, #1
 80090d8:	4652      	mov	r2, sl
 80090da:	4649      	mov	r1, r9
 80090dc:	4638      	mov	r0, r7
 80090de:	47c0      	blx	r8
 80090e0:	3001      	adds	r0, #1
 80090e2:	d103      	bne.n	80090ec <_printf_common+0xac>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	3501      	adds	r5, #1
 80090ee:	e7c6      	b.n	800907e <_printf_common+0x3e>
 80090f0:	18e1      	adds	r1, r4, r3
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	2030      	movs	r0, #48	; 0x30
 80090f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090fa:	4422      	add	r2, r4
 80090fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009104:	3302      	adds	r3, #2
 8009106:	e7c7      	b.n	8009098 <_printf_common+0x58>
 8009108:	2301      	movs	r3, #1
 800910a:	4622      	mov	r2, r4
 800910c:	4649      	mov	r1, r9
 800910e:	4638      	mov	r0, r7
 8009110:	47c0      	blx	r8
 8009112:	3001      	adds	r0, #1
 8009114:	d0e6      	beq.n	80090e4 <_printf_common+0xa4>
 8009116:	3601      	adds	r6, #1
 8009118:	e7d9      	b.n	80090ce <_printf_common+0x8e>
	...

0800911c <_printf_i>:
 800911c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	4691      	mov	r9, r2
 8009124:	7e27      	ldrb	r7, [r4, #24]
 8009126:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009128:	2f78      	cmp	r7, #120	; 0x78
 800912a:	4680      	mov	r8, r0
 800912c:	469a      	mov	sl, r3
 800912e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009132:	d807      	bhi.n	8009144 <_printf_i+0x28>
 8009134:	2f62      	cmp	r7, #98	; 0x62
 8009136:	d80a      	bhi.n	800914e <_printf_i+0x32>
 8009138:	2f00      	cmp	r7, #0
 800913a:	f000 80d8 	beq.w	80092ee <_printf_i+0x1d2>
 800913e:	2f58      	cmp	r7, #88	; 0x58
 8009140:	f000 80a3 	beq.w	800928a <_printf_i+0x16e>
 8009144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800914c:	e03a      	b.n	80091c4 <_printf_i+0xa8>
 800914e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009152:	2b15      	cmp	r3, #21
 8009154:	d8f6      	bhi.n	8009144 <_printf_i+0x28>
 8009156:	a001      	add	r0, pc, #4	; (adr r0, 800915c <_printf_i+0x40>)
 8009158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800915c:	080091b5 	.word	0x080091b5
 8009160:	080091c9 	.word	0x080091c9
 8009164:	08009145 	.word	0x08009145
 8009168:	08009145 	.word	0x08009145
 800916c:	08009145 	.word	0x08009145
 8009170:	08009145 	.word	0x08009145
 8009174:	080091c9 	.word	0x080091c9
 8009178:	08009145 	.word	0x08009145
 800917c:	08009145 	.word	0x08009145
 8009180:	08009145 	.word	0x08009145
 8009184:	08009145 	.word	0x08009145
 8009188:	080092d5 	.word	0x080092d5
 800918c:	080091f9 	.word	0x080091f9
 8009190:	080092b7 	.word	0x080092b7
 8009194:	08009145 	.word	0x08009145
 8009198:	08009145 	.word	0x08009145
 800919c:	080092f7 	.word	0x080092f7
 80091a0:	08009145 	.word	0x08009145
 80091a4:	080091f9 	.word	0x080091f9
 80091a8:	08009145 	.word	0x08009145
 80091ac:	08009145 	.word	0x08009145
 80091b0:	080092bf 	.word	0x080092bf
 80091b4:	680b      	ldr	r3, [r1, #0]
 80091b6:	1d1a      	adds	r2, r3, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	600a      	str	r2, [r1, #0]
 80091bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091c4:	2301      	movs	r3, #1
 80091c6:	e0a3      	b.n	8009310 <_printf_i+0x1f4>
 80091c8:	6825      	ldr	r5, [r4, #0]
 80091ca:	6808      	ldr	r0, [r1, #0]
 80091cc:	062e      	lsls	r6, r5, #24
 80091ce:	f100 0304 	add.w	r3, r0, #4
 80091d2:	d50a      	bpl.n	80091ea <_printf_i+0xce>
 80091d4:	6805      	ldr	r5, [r0, #0]
 80091d6:	600b      	str	r3, [r1, #0]
 80091d8:	2d00      	cmp	r5, #0
 80091da:	da03      	bge.n	80091e4 <_printf_i+0xc8>
 80091dc:	232d      	movs	r3, #45	; 0x2d
 80091de:	426d      	negs	r5, r5
 80091e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e4:	485e      	ldr	r0, [pc, #376]	; (8009360 <_printf_i+0x244>)
 80091e6:	230a      	movs	r3, #10
 80091e8:	e019      	b.n	800921e <_printf_i+0x102>
 80091ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091ee:	6805      	ldr	r5, [r0, #0]
 80091f0:	600b      	str	r3, [r1, #0]
 80091f2:	bf18      	it	ne
 80091f4:	b22d      	sxthne	r5, r5
 80091f6:	e7ef      	b.n	80091d8 <_printf_i+0xbc>
 80091f8:	680b      	ldr	r3, [r1, #0]
 80091fa:	6825      	ldr	r5, [r4, #0]
 80091fc:	1d18      	adds	r0, r3, #4
 80091fe:	6008      	str	r0, [r1, #0]
 8009200:	0628      	lsls	r0, r5, #24
 8009202:	d501      	bpl.n	8009208 <_printf_i+0xec>
 8009204:	681d      	ldr	r5, [r3, #0]
 8009206:	e002      	b.n	800920e <_printf_i+0xf2>
 8009208:	0669      	lsls	r1, r5, #25
 800920a:	d5fb      	bpl.n	8009204 <_printf_i+0xe8>
 800920c:	881d      	ldrh	r5, [r3, #0]
 800920e:	4854      	ldr	r0, [pc, #336]	; (8009360 <_printf_i+0x244>)
 8009210:	2f6f      	cmp	r7, #111	; 0x6f
 8009212:	bf0c      	ite	eq
 8009214:	2308      	moveq	r3, #8
 8009216:	230a      	movne	r3, #10
 8009218:	2100      	movs	r1, #0
 800921a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800921e:	6866      	ldr	r6, [r4, #4]
 8009220:	60a6      	str	r6, [r4, #8]
 8009222:	2e00      	cmp	r6, #0
 8009224:	bfa2      	ittt	ge
 8009226:	6821      	ldrge	r1, [r4, #0]
 8009228:	f021 0104 	bicge.w	r1, r1, #4
 800922c:	6021      	strge	r1, [r4, #0]
 800922e:	b90d      	cbnz	r5, 8009234 <_printf_i+0x118>
 8009230:	2e00      	cmp	r6, #0
 8009232:	d04d      	beq.n	80092d0 <_printf_i+0x1b4>
 8009234:	4616      	mov	r6, r2
 8009236:	fbb5 f1f3 	udiv	r1, r5, r3
 800923a:	fb03 5711 	mls	r7, r3, r1, r5
 800923e:	5dc7      	ldrb	r7, [r0, r7]
 8009240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009244:	462f      	mov	r7, r5
 8009246:	42bb      	cmp	r3, r7
 8009248:	460d      	mov	r5, r1
 800924a:	d9f4      	bls.n	8009236 <_printf_i+0x11a>
 800924c:	2b08      	cmp	r3, #8
 800924e:	d10b      	bne.n	8009268 <_printf_i+0x14c>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	07df      	lsls	r7, r3, #31
 8009254:	d508      	bpl.n	8009268 <_printf_i+0x14c>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	6861      	ldr	r1, [r4, #4]
 800925a:	4299      	cmp	r1, r3
 800925c:	bfde      	ittt	le
 800925e:	2330      	movle	r3, #48	; 0x30
 8009260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009268:	1b92      	subs	r2, r2, r6
 800926a:	6122      	str	r2, [r4, #16]
 800926c:	f8cd a000 	str.w	sl, [sp]
 8009270:	464b      	mov	r3, r9
 8009272:	aa03      	add	r2, sp, #12
 8009274:	4621      	mov	r1, r4
 8009276:	4640      	mov	r0, r8
 8009278:	f7ff fee2 	bl	8009040 <_printf_common>
 800927c:	3001      	adds	r0, #1
 800927e:	d14c      	bne.n	800931a <_printf_i+0x1fe>
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	b004      	add	sp, #16
 8009286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928a:	4835      	ldr	r0, [pc, #212]	; (8009360 <_printf_i+0x244>)
 800928c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	680e      	ldr	r6, [r1, #0]
 8009294:	061f      	lsls	r7, r3, #24
 8009296:	f856 5b04 	ldr.w	r5, [r6], #4
 800929a:	600e      	str	r6, [r1, #0]
 800929c:	d514      	bpl.n	80092c8 <_printf_i+0x1ac>
 800929e:	07d9      	lsls	r1, r3, #31
 80092a0:	bf44      	itt	mi
 80092a2:	f043 0320 	orrmi.w	r3, r3, #32
 80092a6:	6023      	strmi	r3, [r4, #0]
 80092a8:	b91d      	cbnz	r5, 80092b2 <_printf_i+0x196>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	f023 0320 	bic.w	r3, r3, #32
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	2310      	movs	r3, #16
 80092b4:	e7b0      	b.n	8009218 <_printf_i+0xfc>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	f043 0320 	orr.w	r3, r3, #32
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	2378      	movs	r3, #120	; 0x78
 80092c0:	4828      	ldr	r0, [pc, #160]	; (8009364 <_printf_i+0x248>)
 80092c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092c6:	e7e3      	b.n	8009290 <_printf_i+0x174>
 80092c8:	065e      	lsls	r6, r3, #25
 80092ca:	bf48      	it	mi
 80092cc:	b2ad      	uxthmi	r5, r5
 80092ce:	e7e6      	b.n	800929e <_printf_i+0x182>
 80092d0:	4616      	mov	r6, r2
 80092d2:	e7bb      	b.n	800924c <_printf_i+0x130>
 80092d4:	680b      	ldr	r3, [r1, #0]
 80092d6:	6826      	ldr	r6, [r4, #0]
 80092d8:	6960      	ldr	r0, [r4, #20]
 80092da:	1d1d      	adds	r5, r3, #4
 80092dc:	600d      	str	r5, [r1, #0]
 80092de:	0635      	lsls	r5, r6, #24
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	d501      	bpl.n	80092e8 <_printf_i+0x1cc>
 80092e4:	6018      	str	r0, [r3, #0]
 80092e6:	e002      	b.n	80092ee <_printf_i+0x1d2>
 80092e8:	0671      	lsls	r1, r6, #25
 80092ea:	d5fb      	bpl.n	80092e4 <_printf_i+0x1c8>
 80092ec:	8018      	strh	r0, [r3, #0]
 80092ee:	2300      	movs	r3, #0
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	4616      	mov	r6, r2
 80092f4:	e7ba      	b.n	800926c <_printf_i+0x150>
 80092f6:	680b      	ldr	r3, [r1, #0]
 80092f8:	1d1a      	adds	r2, r3, #4
 80092fa:	600a      	str	r2, [r1, #0]
 80092fc:	681e      	ldr	r6, [r3, #0]
 80092fe:	6862      	ldr	r2, [r4, #4]
 8009300:	2100      	movs	r1, #0
 8009302:	4630      	mov	r0, r6
 8009304:	f7f6 ff7c 	bl	8000200 <memchr>
 8009308:	b108      	cbz	r0, 800930e <_printf_i+0x1f2>
 800930a:	1b80      	subs	r0, r0, r6
 800930c:	6060      	str	r0, [r4, #4]
 800930e:	6863      	ldr	r3, [r4, #4]
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	2300      	movs	r3, #0
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009318:	e7a8      	b.n	800926c <_printf_i+0x150>
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	4632      	mov	r2, r6
 800931e:	4649      	mov	r1, r9
 8009320:	4640      	mov	r0, r8
 8009322:	47d0      	blx	sl
 8009324:	3001      	adds	r0, #1
 8009326:	d0ab      	beq.n	8009280 <_printf_i+0x164>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	079b      	lsls	r3, r3, #30
 800932c:	d413      	bmi.n	8009356 <_printf_i+0x23a>
 800932e:	68e0      	ldr	r0, [r4, #12]
 8009330:	9b03      	ldr	r3, [sp, #12]
 8009332:	4298      	cmp	r0, r3
 8009334:	bfb8      	it	lt
 8009336:	4618      	movlt	r0, r3
 8009338:	e7a4      	b.n	8009284 <_printf_i+0x168>
 800933a:	2301      	movs	r3, #1
 800933c:	4632      	mov	r2, r6
 800933e:	4649      	mov	r1, r9
 8009340:	4640      	mov	r0, r8
 8009342:	47d0      	blx	sl
 8009344:	3001      	adds	r0, #1
 8009346:	d09b      	beq.n	8009280 <_printf_i+0x164>
 8009348:	3501      	adds	r5, #1
 800934a:	68e3      	ldr	r3, [r4, #12]
 800934c:	9903      	ldr	r1, [sp, #12]
 800934e:	1a5b      	subs	r3, r3, r1
 8009350:	42ab      	cmp	r3, r5
 8009352:	dcf2      	bgt.n	800933a <_printf_i+0x21e>
 8009354:	e7eb      	b.n	800932e <_printf_i+0x212>
 8009356:	2500      	movs	r5, #0
 8009358:	f104 0619 	add.w	r6, r4, #25
 800935c:	e7f5      	b.n	800934a <_printf_i+0x22e>
 800935e:	bf00      	nop
 8009360:	0800b976 	.word	0x0800b976
 8009364:	0800b987 	.word	0x0800b987

08009368 <sniprintf>:
 8009368:	b40c      	push	{r2, r3}
 800936a:	b530      	push	{r4, r5, lr}
 800936c:	4b17      	ldr	r3, [pc, #92]	; (80093cc <sniprintf+0x64>)
 800936e:	1e0c      	subs	r4, r1, #0
 8009370:	681d      	ldr	r5, [r3, #0]
 8009372:	b09d      	sub	sp, #116	; 0x74
 8009374:	da08      	bge.n	8009388 <sniprintf+0x20>
 8009376:	238b      	movs	r3, #139	; 0x8b
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	f04f 30ff 	mov.w	r0, #4294967295
 800937e:	b01d      	add	sp, #116	; 0x74
 8009380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009384:	b002      	add	sp, #8
 8009386:	4770      	bx	lr
 8009388:	f44f 7302 	mov.w	r3, #520	; 0x208
 800938c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009390:	bf14      	ite	ne
 8009392:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009396:	4623      	moveq	r3, r4
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	9307      	str	r3, [sp, #28]
 800939c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093a0:	9002      	str	r0, [sp, #8]
 80093a2:	9006      	str	r0, [sp, #24]
 80093a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093aa:	ab21      	add	r3, sp, #132	; 0x84
 80093ac:	a902      	add	r1, sp, #8
 80093ae:	4628      	mov	r0, r5
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	f001 fb39 	bl	800aa28 <_svfiprintf_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	bfbc      	itt	lt
 80093ba:	238b      	movlt	r3, #139	; 0x8b
 80093bc:	602b      	strlt	r3, [r5, #0]
 80093be:	2c00      	cmp	r4, #0
 80093c0:	d0dd      	beq.n	800937e <sniprintf+0x16>
 80093c2:	9b02      	ldr	r3, [sp, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	e7d9      	b.n	800937e <sniprintf+0x16>
 80093ca:	bf00      	nop
 80093cc:	20000190 	.word	0x20000190

080093d0 <strncmp>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	b16a      	cbz	r2, 80093f0 <strncmp+0x20>
 80093d4:	3901      	subs	r1, #1
 80093d6:	1884      	adds	r4, r0, r2
 80093d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80093dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d103      	bne.n	80093ec <strncmp+0x1c>
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d001      	beq.n	80093ec <strncmp+0x1c>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f5      	bne.n	80093d8 <strncmp+0x8>
 80093ec:	1a98      	subs	r0, r3, r2
 80093ee:	bd10      	pop	{r4, pc}
 80093f0:	4610      	mov	r0, r2
 80093f2:	e7fc      	b.n	80093ee <strncmp+0x1e>

080093f4 <quorem>:
 80093f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	6903      	ldr	r3, [r0, #16]
 80093fa:	690c      	ldr	r4, [r1, #16]
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	4607      	mov	r7, r0
 8009400:	f2c0 8081 	blt.w	8009506 <quorem+0x112>
 8009404:	3c01      	subs	r4, #1
 8009406:	f101 0814 	add.w	r8, r1, #20
 800940a:	f100 0514 	add.w	r5, r0, #20
 800940e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800941c:	3301      	adds	r3, #1
 800941e:	429a      	cmp	r2, r3
 8009420:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009424:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009428:	fbb2 f6f3 	udiv	r6, r2, r3
 800942c:	d331      	bcc.n	8009492 <quorem+0x9e>
 800942e:	f04f 0e00 	mov.w	lr, #0
 8009432:	4640      	mov	r0, r8
 8009434:	46ac      	mov	ip, r5
 8009436:	46f2      	mov	sl, lr
 8009438:	f850 2b04 	ldr.w	r2, [r0], #4
 800943c:	b293      	uxth	r3, r2
 800943e:	fb06 e303 	mla	r3, r6, r3, lr
 8009442:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009446:	b29b      	uxth	r3, r3
 8009448:	ebaa 0303 	sub.w	r3, sl, r3
 800944c:	0c12      	lsrs	r2, r2, #16
 800944e:	f8dc a000 	ldr.w	sl, [ip]
 8009452:	fb06 e202 	mla	r2, r6, r2, lr
 8009456:	fa13 f38a 	uxtah	r3, r3, sl
 800945a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800945e:	fa1f fa82 	uxth.w	sl, r2
 8009462:	f8dc 2000 	ldr.w	r2, [ip]
 8009466:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800946a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800946e:	b29b      	uxth	r3, r3
 8009470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009474:	4581      	cmp	r9, r0
 8009476:	f84c 3b04 	str.w	r3, [ip], #4
 800947a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800947e:	d2db      	bcs.n	8009438 <quorem+0x44>
 8009480:	f855 300b 	ldr.w	r3, [r5, fp]
 8009484:	b92b      	cbnz	r3, 8009492 <quorem+0x9e>
 8009486:	9b01      	ldr	r3, [sp, #4]
 8009488:	3b04      	subs	r3, #4
 800948a:	429d      	cmp	r5, r3
 800948c:	461a      	mov	r2, r3
 800948e:	d32e      	bcc.n	80094ee <quorem+0xfa>
 8009490:	613c      	str	r4, [r7, #16]
 8009492:	4638      	mov	r0, r7
 8009494:	f001 f8b2 	bl	800a5fc <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	db24      	blt.n	80094e6 <quorem+0xf2>
 800949c:	3601      	adds	r6, #1
 800949e:	4628      	mov	r0, r5
 80094a0:	f04f 0c00 	mov.w	ip, #0
 80094a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80094a8:	f8d0 e000 	ldr.w	lr, [r0]
 80094ac:	b293      	uxth	r3, r2
 80094ae:	ebac 0303 	sub.w	r3, ip, r3
 80094b2:	0c12      	lsrs	r2, r2, #16
 80094b4:	fa13 f38e 	uxtah	r3, r3, lr
 80094b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094c6:	45c1      	cmp	r9, r8
 80094c8:	f840 3b04 	str.w	r3, [r0], #4
 80094cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094d0:	d2e8      	bcs.n	80094a4 <quorem+0xb0>
 80094d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094da:	b922      	cbnz	r2, 80094e6 <quorem+0xf2>
 80094dc:	3b04      	subs	r3, #4
 80094de:	429d      	cmp	r5, r3
 80094e0:	461a      	mov	r2, r3
 80094e2:	d30a      	bcc.n	80094fa <quorem+0x106>
 80094e4:	613c      	str	r4, [r7, #16]
 80094e6:	4630      	mov	r0, r6
 80094e8:	b003      	add	sp, #12
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	6812      	ldr	r2, [r2, #0]
 80094f0:	3b04      	subs	r3, #4
 80094f2:	2a00      	cmp	r2, #0
 80094f4:	d1cc      	bne.n	8009490 <quorem+0x9c>
 80094f6:	3c01      	subs	r4, #1
 80094f8:	e7c7      	b.n	800948a <quorem+0x96>
 80094fa:	6812      	ldr	r2, [r2, #0]
 80094fc:	3b04      	subs	r3, #4
 80094fe:	2a00      	cmp	r2, #0
 8009500:	d1f0      	bne.n	80094e4 <quorem+0xf0>
 8009502:	3c01      	subs	r4, #1
 8009504:	e7eb      	b.n	80094de <quorem+0xea>
 8009506:	2000      	movs	r0, #0
 8009508:	e7ee      	b.n	80094e8 <quorem+0xf4>
 800950a:	0000      	movs	r0, r0
 800950c:	0000      	movs	r0, r0
	...

08009510 <_dtoa_r>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	ed2d 8b02 	vpush	{d8}
 8009518:	ec57 6b10 	vmov	r6, r7, d0
 800951c:	b095      	sub	sp, #84	; 0x54
 800951e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009520:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800952a:	4604      	mov	r4, r0
 800952c:	9209      	str	r2, [sp, #36]	; 0x24
 800952e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009530:	b975      	cbnz	r5, 8009550 <_dtoa_r+0x40>
 8009532:	2010      	movs	r0, #16
 8009534:	f000 fddc 	bl	800a0f0 <malloc>
 8009538:	4602      	mov	r2, r0
 800953a:	6260      	str	r0, [r4, #36]	; 0x24
 800953c:	b920      	cbnz	r0, 8009548 <_dtoa_r+0x38>
 800953e:	4bb2      	ldr	r3, [pc, #712]	; (8009808 <_dtoa_r+0x2f8>)
 8009540:	21ea      	movs	r1, #234	; 0xea
 8009542:	48b2      	ldr	r0, [pc, #712]	; (800980c <_dtoa_r+0x2fc>)
 8009544:	f001 fb80 	bl	800ac48 <__assert_func>
 8009548:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800954c:	6005      	str	r5, [r0, #0]
 800954e:	60c5      	str	r5, [r0, #12]
 8009550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	b151      	cbz	r1, 800956c <_dtoa_r+0x5c>
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	604a      	str	r2, [r1, #4]
 800955a:	2301      	movs	r3, #1
 800955c:	4093      	lsls	r3, r2
 800955e:	608b      	str	r3, [r1, #8]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fe0d 	bl	800a180 <_Bfree>
 8009566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	1e3b      	subs	r3, r7, #0
 800956e:	bfb9      	ittee	lt
 8009570:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009574:	9303      	strlt	r3, [sp, #12]
 8009576:	2300      	movge	r3, #0
 8009578:	f8c8 3000 	strge.w	r3, [r8]
 800957c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009580:	4ba3      	ldr	r3, [pc, #652]	; (8009810 <_dtoa_r+0x300>)
 8009582:	bfbc      	itt	lt
 8009584:	2201      	movlt	r2, #1
 8009586:	f8c8 2000 	strlt.w	r2, [r8]
 800958a:	ea33 0309 	bics.w	r3, r3, r9
 800958e:	d11b      	bne.n	80095c8 <_dtoa_r+0xb8>
 8009590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009592:	f242 730f 	movw	r3, #9999	; 0x270f
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800959c:	4333      	orrs	r3, r6
 800959e:	f000 857a 	beq.w	800a096 <_dtoa_r+0xb86>
 80095a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095a4:	b963      	cbnz	r3, 80095c0 <_dtoa_r+0xb0>
 80095a6:	4b9b      	ldr	r3, [pc, #620]	; (8009814 <_dtoa_r+0x304>)
 80095a8:	e024      	b.n	80095f4 <_dtoa_r+0xe4>
 80095aa:	4b9b      	ldr	r3, [pc, #620]	; (8009818 <_dtoa_r+0x308>)
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	9800      	ldr	r0, [sp, #0]
 80095b6:	b015      	add	sp, #84	; 0x54
 80095b8:	ecbd 8b02 	vpop	{d8}
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	4b94      	ldr	r3, [pc, #592]	; (8009814 <_dtoa_r+0x304>)
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	3303      	adds	r3, #3
 80095c6:	e7f3      	b.n	80095b0 <_dtoa_r+0xa0>
 80095c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095cc:	2200      	movs	r2, #0
 80095ce:	ec51 0b17 	vmov	r0, r1, d7
 80095d2:	2300      	movs	r3, #0
 80095d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095d8:	f7f7 fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 80095dc:	4680      	mov	r8, r0
 80095de:	b158      	cbz	r0, 80095f8 <_dtoa_r+0xe8>
 80095e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095e2:	2301      	movs	r3, #1
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 8551 	beq.w	800a090 <_dtoa_r+0xb80>
 80095ee:	488b      	ldr	r0, [pc, #556]	; (800981c <_dtoa_r+0x30c>)
 80095f0:	6018      	str	r0, [r3, #0]
 80095f2:	1e43      	subs	r3, r0, #1
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	e7dd      	b.n	80095b4 <_dtoa_r+0xa4>
 80095f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80095fc:	aa12      	add	r2, sp, #72	; 0x48
 80095fe:	a913      	add	r1, sp, #76	; 0x4c
 8009600:	4620      	mov	r0, r4
 8009602:	f001 f89f 	bl	800a744 <__d2b>
 8009606:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800960a:	4683      	mov	fp, r0
 800960c:	2d00      	cmp	r5, #0
 800960e:	d07c      	beq.n	800970a <_dtoa_r+0x1fa>
 8009610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009612:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800961a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800961e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009622:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800962a:	4b7d      	ldr	r3, [pc, #500]	; (8009820 <_dtoa_r+0x310>)
 800962c:	2200      	movs	r2, #0
 800962e:	4630      	mov	r0, r6
 8009630:	4639      	mov	r1, r7
 8009632:	f7f6 fe39 	bl	80002a8 <__aeabi_dsub>
 8009636:	a36e      	add	r3, pc, #440	; (adr r3, 80097f0 <_dtoa_r+0x2e0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 ffec 	bl	8000618 <__aeabi_dmul>
 8009640:	a36d      	add	r3, pc, #436	; (adr r3, 80097f8 <_dtoa_r+0x2e8>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 fe31 	bl	80002ac <__adddf3>
 800964a:	4606      	mov	r6, r0
 800964c:	4628      	mov	r0, r5
 800964e:	460f      	mov	r7, r1
 8009650:	f7f6 ff78 	bl	8000544 <__aeabi_i2d>
 8009654:	a36a      	add	r3, pc, #424	; (adr r3, 8009800 <_dtoa_r+0x2f0>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 ffdd 	bl	8000618 <__aeabi_dmul>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	f7f6 fe21 	bl	80002ac <__adddf3>
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	f7f7 fa83 	bl	8000b78 <__aeabi_d2iz>
 8009672:	2200      	movs	r2, #0
 8009674:	4682      	mov	sl, r0
 8009676:	2300      	movs	r3, #0
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fa3e 	bl	8000afc <__aeabi_dcmplt>
 8009680:	b148      	cbz	r0, 8009696 <_dtoa_r+0x186>
 8009682:	4650      	mov	r0, sl
 8009684:	f7f6 ff5e 	bl	8000544 <__aeabi_i2d>
 8009688:	4632      	mov	r2, r6
 800968a:	463b      	mov	r3, r7
 800968c:	f7f7 fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009690:	b908      	cbnz	r0, 8009696 <_dtoa_r+0x186>
 8009692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009696:	f1ba 0f16 	cmp.w	sl, #22
 800969a:	d854      	bhi.n	8009746 <_dtoa_r+0x236>
 800969c:	4b61      	ldr	r3, [pc, #388]	; (8009824 <_dtoa_r+0x314>)
 800969e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096aa:	f7f7 fa27 	bl	8000afc <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d04b      	beq.n	800974a <_dtoa_r+0x23a>
 80096b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096b6:	2300      	movs	r3, #0
 80096b8:	930e      	str	r3, [sp, #56]	; 0x38
 80096ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096bc:	1b5d      	subs	r5, r3, r5
 80096be:	1e6b      	subs	r3, r5, #1
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	bf43      	ittte	mi
 80096c4:	2300      	movmi	r3, #0
 80096c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80096ca:	9304      	strmi	r3, [sp, #16]
 80096cc:	f04f 0800 	movpl.w	r8, #0
 80096d0:	f1ba 0f00 	cmp.w	sl, #0
 80096d4:	db3b      	blt.n	800974e <_dtoa_r+0x23e>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80096dc:	4453      	add	r3, sl
 80096de:	9304      	str	r3, [sp, #16]
 80096e0:	2300      	movs	r3, #0
 80096e2:	9306      	str	r3, [sp, #24]
 80096e4:	9b05      	ldr	r3, [sp, #20]
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d869      	bhi.n	80097be <_dtoa_r+0x2ae>
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	bfc4      	itt	gt
 80096ee:	3b04      	subgt	r3, #4
 80096f0:	9305      	strgt	r3, [sp, #20]
 80096f2:	9b05      	ldr	r3, [sp, #20]
 80096f4:	f1a3 0302 	sub.w	r3, r3, #2
 80096f8:	bfcc      	ite	gt
 80096fa:	2500      	movgt	r5, #0
 80096fc:	2501      	movle	r5, #1
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d869      	bhi.n	80097d6 <_dtoa_r+0x2c6>
 8009702:	e8df f003 	tbb	[pc, r3]
 8009706:	4e2c      	.short	0x4e2c
 8009708:	5a4c      	.short	0x5a4c
 800970a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800970e:	441d      	add	r5, r3
 8009710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009714:	2b20      	cmp	r3, #32
 8009716:	bfc1      	itttt	gt
 8009718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800971c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009720:	fa09 f303 	lslgt.w	r3, r9, r3
 8009724:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009728:	bfda      	itte	le
 800972a:	f1c3 0320 	rsble	r3, r3, #32
 800972e:	fa06 f003 	lslle.w	r0, r6, r3
 8009732:	4318      	orrgt	r0, r3
 8009734:	f7f6 fef6 	bl	8000524 <__aeabi_ui2d>
 8009738:	2301      	movs	r3, #1
 800973a:	4606      	mov	r6, r0
 800973c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009740:	3d01      	subs	r5, #1
 8009742:	9310      	str	r3, [sp, #64]	; 0x40
 8009744:	e771      	b.n	800962a <_dtoa_r+0x11a>
 8009746:	2301      	movs	r3, #1
 8009748:	e7b6      	b.n	80096b8 <_dtoa_r+0x1a8>
 800974a:	900e      	str	r0, [sp, #56]	; 0x38
 800974c:	e7b5      	b.n	80096ba <_dtoa_r+0x1aa>
 800974e:	f1ca 0300 	rsb	r3, sl, #0
 8009752:	9306      	str	r3, [sp, #24]
 8009754:	2300      	movs	r3, #0
 8009756:	eba8 080a 	sub.w	r8, r8, sl
 800975a:	930d      	str	r3, [sp, #52]	; 0x34
 800975c:	e7c2      	b.n	80096e4 <_dtoa_r+0x1d4>
 800975e:	2300      	movs	r3, #0
 8009760:	9308      	str	r3, [sp, #32]
 8009762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	dc39      	bgt.n	80097dc <_dtoa_r+0x2cc>
 8009768:	f04f 0901 	mov.w	r9, #1
 800976c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009770:	464b      	mov	r3, r9
 8009772:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009776:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009778:	2200      	movs	r2, #0
 800977a:	6042      	str	r2, [r0, #4]
 800977c:	2204      	movs	r2, #4
 800977e:	f102 0614 	add.w	r6, r2, #20
 8009782:	429e      	cmp	r6, r3
 8009784:	6841      	ldr	r1, [r0, #4]
 8009786:	d92f      	bls.n	80097e8 <_dtoa_r+0x2d8>
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fcb9 	bl	800a100 <_Balloc>
 800978e:	9000      	str	r0, [sp, #0]
 8009790:	2800      	cmp	r0, #0
 8009792:	d14b      	bne.n	800982c <_dtoa_r+0x31c>
 8009794:	4b24      	ldr	r3, [pc, #144]	; (8009828 <_dtoa_r+0x318>)
 8009796:	4602      	mov	r2, r0
 8009798:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800979c:	e6d1      	b.n	8009542 <_dtoa_r+0x32>
 800979e:	2301      	movs	r3, #1
 80097a0:	e7de      	b.n	8009760 <_dtoa_r+0x250>
 80097a2:	2300      	movs	r3, #0
 80097a4:	9308      	str	r3, [sp, #32]
 80097a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a8:	eb0a 0903 	add.w	r9, sl, r3
 80097ac:	f109 0301 	add.w	r3, r9, #1
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	bfb8      	it	lt
 80097b6:	2301      	movlt	r3, #1
 80097b8:	e7dd      	b.n	8009776 <_dtoa_r+0x266>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e7f2      	b.n	80097a4 <_dtoa_r+0x294>
 80097be:	2501      	movs	r5, #1
 80097c0:	2300      	movs	r3, #0
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	9508      	str	r5, [sp, #32]
 80097c6:	f04f 39ff 	mov.w	r9, #4294967295
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80097d0:	2312      	movs	r3, #18
 80097d2:	9209      	str	r2, [sp, #36]	; 0x24
 80097d4:	e7cf      	b.n	8009776 <_dtoa_r+0x266>
 80097d6:	2301      	movs	r3, #1
 80097d8:	9308      	str	r3, [sp, #32]
 80097da:	e7f4      	b.n	80097c6 <_dtoa_r+0x2b6>
 80097dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80097e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80097e4:	464b      	mov	r3, r9
 80097e6:	e7c6      	b.n	8009776 <_dtoa_r+0x266>
 80097e8:	3101      	adds	r1, #1
 80097ea:	6041      	str	r1, [r0, #4]
 80097ec:	0052      	lsls	r2, r2, #1
 80097ee:	e7c6      	b.n	800977e <_dtoa_r+0x26e>
 80097f0:	636f4361 	.word	0x636f4361
 80097f4:	3fd287a7 	.word	0x3fd287a7
 80097f8:	8b60c8b3 	.word	0x8b60c8b3
 80097fc:	3fc68a28 	.word	0x3fc68a28
 8009800:	509f79fb 	.word	0x509f79fb
 8009804:	3fd34413 	.word	0x3fd34413
 8009808:	0800b9a5 	.word	0x0800b9a5
 800980c:	0800b9bc 	.word	0x0800b9bc
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800b9a1 	.word	0x0800b9a1
 8009818:	0800b998 	.word	0x0800b998
 800981c:	0800b975 	.word	0x0800b975
 8009820:	3ff80000 	.word	0x3ff80000
 8009824:	0800bab8 	.word	0x0800bab8
 8009828:	0800ba1b 	.word	0x0800ba1b
 800982c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982e:	9a00      	ldr	r2, [sp, #0]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	2b0e      	cmp	r3, #14
 8009836:	f200 80ad 	bhi.w	8009994 <_dtoa_r+0x484>
 800983a:	2d00      	cmp	r5, #0
 800983c:	f000 80aa 	beq.w	8009994 <_dtoa_r+0x484>
 8009840:	f1ba 0f00 	cmp.w	sl, #0
 8009844:	dd36      	ble.n	80098b4 <_dtoa_r+0x3a4>
 8009846:	4ac3      	ldr	r2, [pc, #780]	; (8009b54 <_dtoa_r+0x644>)
 8009848:	f00a 030f 	and.w	r3, sl, #15
 800984c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009850:	ed93 7b00 	vldr	d7, [r3]
 8009854:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009858:	ea4f 172a 	mov.w	r7, sl, asr #4
 800985c:	eeb0 8a47 	vmov.f32	s16, s14
 8009860:	eef0 8a67 	vmov.f32	s17, s15
 8009864:	d016      	beq.n	8009894 <_dtoa_r+0x384>
 8009866:	4bbc      	ldr	r3, [pc, #752]	; (8009b58 <_dtoa_r+0x648>)
 8009868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800986c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009870:	f7f6 fffc 	bl	800086c <__aeabi_ddiv>
 8009874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009878:	f007 070f 	and.w	r7, r7, #15
 800987c:	2503      	movs	r5, #3
 800987e:	4eb6      	ldr	r6, [pc, #728]	; (8009b58 <_dtoa_r+0x648>)
 8009880:	b957      	cbnz	r7, 8009898 <_dtoa_r+0x388>
 8009882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009886:	ec53 2b18 	vmov	r2, r3, d8
 800988a:	f7f6 ffef 	bl	800086c <__aeabi_ddiv>
 800988e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009892:	e029      	b.n	80098e8 <_dtoa_r+0x3d8>
 8009894:	2502      	movs	r5, #2
 8009896:	e7f2      	b.n	800987e <_dtoa_r+0x36e>
 8009898:	07f9      	lsls	r1, r7, #31
 800989a:	d508      	bpl.n	80098ae <_dtoa_r+0x39e>
 800989c:	ec51 0b18 	vmov	r0, r1, d8
 80098a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098a4:	f7f6 feb8 	bl	8000618 <__aeabi_dmul>
 80098a8:	ec41 0b18 	vmov	d8, r0, r1
 80098ac:	3501      	adds	r5, #1
 80098ae:	107f      	asrs	r7, r7, #1
 80098b0:	3608      	adds	r6, #8
 80098b2:	e7e5      	b.n	8009880 <_dtoa_r+0x370>
 80098b4:	f000 80a6 	beq.w	8009a04 <_dtoa_r+0x4f4>
 80098b8:	f1ca 0600 	rsb	r6, sl, #0
 80098bc:	4ba5      	ldr	r3, [pc, #660]	; (8009b54 <_dtoa_r+0x644>)
 80098be:	4fa6      	ldr	r7, [pc, #664]	; (8009b58 <_dtoa_r+0x648>)
 80098c0:	f006 020f 	and.w	r2, r6, #15
 80098c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098d0:	f7f6 fea2 	bl	8000618 <__aeabi_dmul>
 80098d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098d8:	1136      	asrs	r6, r6, #4
 80098da:	2300      	movs	r3, #0
 80098dc:	2502      	movs	r5, #2
 80098de:	2e00      	cmp	r6, #0
 80098e0:	f040 8085 	bne.w	80099ee <_dtoa_r+0x4de>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1d2      	bne.n	800988e <_dtoa_r+0x37e>
 80098e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 808c 	beq.w	8009a08 <_dtoa_r+0x4f8>
 80098f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098f4:	4b99      	ldr	r3, [pc, #612]	; (8009b5c <_dtoa_r+0x64c>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	4630      	mov	r0, r6
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f7 f8fe 	bl	8000afc <__aeabi_dcmplt>
 8009900:	2800      	cmp	r0, #0
 8009902:	f000 8081 	beq.w	8009a08 <_dtoa_r+0x4f8>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d07d      	beq.n	8009a08 <_dtoa_r+0x4f8>
 800990c:	f1b9 0f00 	cmp.w	r9, #0
 8009910:	dd3c      	ble.n	800998c <_dtoa_r+0x47c>
 8009912:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009916:	9307      	str	r3, [sp, #28]
 8009918:	2200      	movs	r2, #0
 800991a:	4b91      	ldr	r3, [pc, #580]	; (8009b60 <_dtoa_r+0x650>)
 800991c:	4630      	mov	r0, r6
 800991e:	4639      	mov	r1, r7
 8009920:	f7f6 fe7a 	bl	8000618 <__aeabi_dmul>
 8009924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009928:	3501      	adds	r5, #1
 800992a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800992e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009932:	4628      	mov	r0, r5
 8009934:	f7f6 fe06 	bl	8000544 <__aeabi_i2d>
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	f7f6 fe6c 	bl	8000618 <__aeabi_dmul>
 8009940:	4b88      	ldr	r3, [pc, #544]	; (8009b64 <_dtoa_r+0x654>)
 8009942:	2200      	movs	r2, #0
 8009944:	f7f6 fcb2 	bl	80002ac <__adddf3>
 8009948:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800994c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009950:	9303      	str	r3, [sp, #12]
 8009952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009954:	2b00      	cmp	r3, #0
 8009956:	d15c      	bne.n	8009a12 <_dtoa_r+0x502>
 8009958:	4b83      	ldr	r3, [pc, #524]	; (8009b68 <_dtoa_r+0x658>)
 800995a:	2200      	movs	r2, #0
 800995c:	4630      	mov	r0, r6
 800995e:	4639      	mov	r1, r7
 8009960:	f7f6 fca2 	bl	80002a8 <__aeabi_dsub>
 8009964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009968:	4606      	mov	r6, r0
 800996a:	460f      	mov	r7, r1
 800996c:	f7f7 f8e4 	bl	8000b38 <__aeabi_dcmpgt>
 8009970:	2800      	cmp	r0, #0
 8009972:	f040 8296 	bne.w	8009ea2 <_dtoa_r+0x992>
 8009976:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800997a:	4630      	mov	r0, r6
 800997c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009980:	4639      	mov	r1, r7
 8009982:	f7f7 f8bb 	bl	8000afc <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	f040 8288 	bne.w	8009e9c <_dtoa_r+0x98c>
 800998c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009996:	2b00      	cmp	r3, #0
 8009998:	f2c0 8158 	blt.w	8009c4c <_dtoa_r+0x73c>
 800999c:	f1ba 0f0e 	cmp.w	sl, #14
 80099a0:	f300 8154 	bgt.w	8009c4c <_dtoa_r+0x73c>
 80099a4:	4b6b      	ldr	r3, [pc, #428]	; (8009b54 <_dtoa_r+0x644>)
 80099a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f280 80e3 	bge.w	8009b7c <_dtoa_r+0x66c>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f300 80df 	bgt.w	8009b7c <_dtoa_r+0x66c>
 80099be:	f040 826d 	bne.w	8009e9c <_dtoa_r+0x98c>
 80099c2:	4b69      	ldr	r3, [pc, #420]	; (8009b68 <_dtoa_r+0x658>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	4640      	mov	r0, r8
 80099c8:	4649      	mov	r1, r9
 80099ca:	f7f6 fe25 	bl	8000618 <__aeabi_dmul>
 80099ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099d2:	f7f7 f8a7 	bl	8000b24 <__aeabi_dcmpge>
 80099d6:	9e01      	ldr	r6, [sp, #4]
 80099d8:	4637      	mov	r7, r6
 80099da:	2800      	cmp	r0, #0
 80099dc:	f040 8243 	bne.w	8009e66 <_dtoa_r+0x956>
 80099e0:	9d00      	ldr	r5, [sp, #0]
 80099e2:	2331      	movs	r3, #49	; 0x31
 80099e4:	f805 3b01 	strb.w	r3, [r5], #1
 80099e8:	f10a 0a01 	add.w	sl, sl, #1
 80099ec:	e23f      	b.n	8009e6e <_dtoa_r+0x95e>
 80099ee:	07f2      	lsls	r2, r6, #31
 80099f0:	d505      	bpl.n	80099fe <_dtoa_r+0x4ee>
 80099f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099f6:	f7f6 fe0f 	bl	8000618 <__aeabi_dmul>
 80099fa:	3501      	adds	r5, #1
 80099fc:	2301      	movs	r3, #1
 80099fe:	1076      	asrs	r6, r6, #1
 8009a00:	3708      	adds	r7, #8
 8009a02:	e76c      	b.n	80098de <_dtoa_r+0x3ce>
 8009a04:	2502      	movs	r5, #2
 8009a06:	e76f      	b.n	80098e8 <_dtoa_r+0x3d8>
 8009a08:	9b01      	ldr	r3, [sp, #4]
 8009a0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a10:	e78d      	b.n	800992e <_dtoa_r+0x41e>
 8009a12:	9900      	ldr	r1, [sp, #0]
 8009a14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a18:	4b4e      	ldr	r3, [pc, #312]	; (8009b54 <_dtoa_r+0x644>)
 8009a1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a1e:	4401      	add	r1, r0
 8009a20:	9102      	str	r1, [sp, #8]
 8009a22:	9908      	ldr	r1, [sp, #32]
 8009a24:	eeb0 8a47 	vmov.f32	s16, s14
 8009a28:	eef0 8a67 	vmov.f32	s17, s15
 8009a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d045      	beq.n	8009ac4 <_dtoa_r+0x5b4>
 8009a38:	494c      	ldr	r1, [pc, #304]	; (8009b6c <_dtoa_r+0x65c>)
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f7f6 ff16 	bl	800086c <__aeabi_ddiv>
 8009a40:	ec53 2b18 	vmov	r2, r3, d8
 8009a44:	f7f6 fc30 	bl	80002a8 <__aeabi_dsub>
 8009a48:	9d00      	ldr	r5, [sp, #0]
 8009a4a:	ec41 0b18 	vmov	d8, r0, r1
 8009a4e:	4639      	mov	r1, r7
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7f7 f891 	bl	8000b78 <__aeabi_d2iz>
 8009a56:	900c      	str	r0, [sp, #48]	; 0x30
 8009a58:	f7f6 fd74 	bl	8000544 <__aeabi_i2d>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f7f6 fc20 	bl	80002a8 <__aeabi_dsub>
 8009a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a6a:	3330      	adds	r3, #48	; 0x30
 8009a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8009a70:	ec53 2b18 	vmov	r2, r3, d8
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	f7f7 f840 	bl	8000afc <__aeabi_dcmplt>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d165      	bne.n	8009b4c <_dtoa_r+0x63c>
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	4935      	ldr	r1, [pc, #212]	; (8009b5c <_dtoa_r+0x64c>)
 8009a86:	2000      	movs	r0, #0
 8009a88:	f7f6 fc0e 	bl	80002a8 <__aeabi_dsub>
 8009a8c:	ec53 2b18 	vmov	r2, r3, d8
 8009a90:	f7f7 f834 	bl	8000afc <__aeabi_dcmplt>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f040 80b9 	bne.w	8009c0c <_dtoa_r+0x6fc>
 8009a9a:	9b02      	ldr	r3, [sp, #8]
 8009a9c:	429d      	cmp	r5, r3
 8009a9e:	f43f af75 	beq.w	800998c <_dtoa_r+0x47c>
 8009aa2:	4b2f      	ldr	r3, [pc, #188]	; (8009b60 <_dtoa_r+0x650>)
 8009aa4:	ec51 0b18 	vmov	r0, r1, d8
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f7f6 fdb5 	bl	8000618 <__aeabi_dmul>
 8009aae:	4b2c      	ldr	r3, [pc, #176]	; (8009b60 <_dtoa_r+0x650>)
 8009ab0:	ec41 0b18 	vmov	d8, r0, r1
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	f7f6 fdad 	bl	8000618 <__aeabi_dmul>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	e7c4      	b.n	8009a4e <_dtoa_r+0x53e>
 8009ac4:	ec51 0b17 	vmov	r0, r1, d7
 8009ac8:	f7f6 fda6 	bl	8000618 <__aeabi_dmul>
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	9d00      	ldr	r5, [sp, #0]
 8009ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ad2:	ec41 0b18 	vmov	d8, r0, r1
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7f7 f84d 	bl	8000b78 <__aeabi_d2iz>
 8009ade:	9011      	str	r0, [sp, #68]	; 0x44
 8009ae0:	f7f6 fd30 	bl	8000544 <__aeabi_i2d>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 fbdc 	bl	80002a8 <__aeabi_dsub>
 8009af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009af2:	3330      	adds	r3, #48	; 0x30
 8009af4:	f805 3b01 	strb.w	r3, [r5], #1
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	429d      	cmp	r5, r3
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	f04f 0200 	mov.w	r2, #0
 8009b04:	d134      	bne.n	8009b70 <_dtoa_r+0x660>
 8009b06:	4b19      	ldr	r3, [pc, #100]	; (8009b6c <_dtoa_r+0x65c>)
 8009b08:	ec51 0b18 	vmov	r0, r1, d8
 8009b0c:	f7f6 fbce 	bl	80002ac <__adddf3>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4630      	mov	r0, r6
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f7 f80e 	bl	8000b38 <__aeabi_dcmpgt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d175      	bne.n	8009c0c <_dtoa_r+0x6fc>
 8009b20:	ec53 2b18 	vmov	r2, r3, d8
 8009b24:	4911      	ldr	r1, [pc, #68]	; (8009b6c <_dtoa_r+0x65c>)
 8009b26:	2000      	movs	r0, #0
 8009b28:	f7f6 fbbe 	bl	80002a8 <__aeabi_dsub>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 ffe2 	bl	8000afc <__aeabi_dcmplt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f43f af27 	beq.w	800998c <_dtoa_r+0x47c>
 8009b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b40:	1e6b      	subs	r3, r5, #1
 8009b42:	930c      	str	r3, [sp, #48]	; 0x30
 8009b44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b48:	2b30      	cmp	r3, #48	; 0x30
 8009b4a:	d0f8      	beq.n	8009b3e <_dtoa_r+0x62e>
 8009b4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b50:	e04a      	b.n	8009be8 <_dtoa_r+0x6d8>
 8009b52:	bf00      	nop
 8009b54:	0800bab8 	.word	0x0800bab8
 8009b58:	0800ba90 	.word	0x0800ba90
 8009b5c:	3ff00000 	.word	0x3ff00000
 8009b60:	40240000 	.word	0x40240000
 8009b64:	401c0000 	.word	0x401c0000
 8009b68:	40140000 	.word	0x40140000
 8009b6c:	3fe00000 	.word	0x3fe00000
 8009b70:	4baf      	ldr	r3, [pc, #700]	; (8009e30 <_dtoa_r+0x920>)
 8009b72:	f7f6 fd51 	bl	8000618 <__aeabi_dmul>
 8009b76:	4606      	mov	r6, r0
 8009b78:	460f      	mov	r7, r1
 8009b7a:	e7ac      	b.n	8009ad6 <_dtoa_r+0x5c6>
 8009b7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b80:	9d00      	ldr	r5, [sp, #0]
 8009b82:	4642      	mov	r2, r8
 8009b84:	464b      	mov	r3, r9
 8009b86:	4630      	mov	r0, r6
 8009b88:	4639      	mov	r1, r7
 8009b8a:	f7f6 fe6f 	bl	800086c <__aeabi_ddiv>
 8009b8e:	f7f6 fff3 	bl	8000b78 <__aeabi_d2iz>
 8009b92:	9002      	str	r0, [sp, #8]
 8009b94:	f7f6 fcd6 	bl	8000544 <__aeabi_i2d>
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	f7f6 fd3c 	bl	8000618 <__aeabi_dmul>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 fb7e 	bl	80002a8 <__aeabi_dsub>
 8009bac:	9e02      	ldr	r6, [sp, #8]
 8009bae:	9f01      	ldr	r7, [sp, #4]
 8009bb0:	3630      	adds	r6, #48	; 0x30
 8009bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8009bb6:	9e00      	ldr	r6, [sp, #0]
 8009bb8:	1bae      	subs	r6, r5, r6
 8009bba:	42b7      	cmp	r7, r6
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	d137      	bne.n	8009c32 <_dtoa_r+0x722>
 8009bc2:	f7f6 fb73 	bl	80002ac <__adddf3>
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	464b      	mov	r3, r9
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	f7f6 ffb3 	bl	8000b38 <__aeabi_dcmpgt>
 8009bd2:	b9c8      	cbnz	r0, 8009c08 <_dtoa_r+0x6f8>
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4639      	mov	r1, r7
 8009bdc:	f7f6 ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 8009be0:	b110      	cbz	r0, 8009be8 <_dtoa_r+0x6d8>
 8009be2:	9b02      	ldr	r3, [sp, #8]
 8009be4:	07d9      	lsls	r1, r3, #31
 8009be6:	d40f      	bmi.n	8009c08 <_dtoa_r+0x6f8>
 8009be8:	4620      	mov	r0, r4
 8009bea:	4659      	mov	r1, fp
 8009bec:	f000 fac8 	bl	800a180 <_Bfree>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	702b      	strb	r3, [r5, #0]
 8009bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf6:	f10a 0001 	add.w	r0, sl, #1
 8009bfa:	6018      	str	r0, [r3, #0]
 8009bfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f43f acd8 	beq.w	80095b4 <_dtoa_r+0xa4>
 8009c04:	601d      	str	r5, [r3, #0]
 8009c06:	e4d5      	b.n	80095b4 <_dtoa_r+0xa4>
 8009c08:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	461d      	mov	r5, r3
 8009c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c14:	2a39      	cmp	r2, #57	; 0x39
 8009c16:	d108      	bne.n	8009c2a <_dtoa_r+0x71a>
 8009c18:	9a00      	ldr	r2, [sp, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d1f7      	bne.n	8009c0e <_dtoa_r+0x6fe>
 8009c1e:	9a07      	ldr	r2, [sp, #28]
 8009c20:	9900      	ldr	r1, [sp, #0]
 8009c22:	3201      	adds	r2, #1
 8009c24:	9207      	str	r2, [sp, #28]
 8009c26:	2230      	movs	r2, #48	; 0x30
 8009c28:	700a      	strb	r2, [r1, #0]
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	3201      	adds	r2, #1
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e78c      	b.n	8009b4c <_dtoa_r+0x63c>
 8009c32:	4b7f      	ldr	r3, [pc, #508]	; (8009e30 <_dtoa_r+0x920>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7f6 fcef 	bl	8000618 <__aeabi_dmul>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	f7f6 ff51 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d09b      	beq.n	8009b82 <_dtoa_r+0x672>
 8009c4a:	e7cd      	b.n	8009be8 <_dtoa_r+0x6d8>
 8009c4c:	9a08      	ldr	r2, [sp, #32]
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	f000 80c4 	beq.w	8009ddc <_dtoa_r+0x8cc>
 8009c54:	9a05      	ldr	r2, [sp, #20]
 8009c56:	2a01      	cmp	r2, #1
 8009c58:	f300 80a8 	bgt.w	8009dac <_dtoa_r+0x89c>
 8009c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	f000 80a0 	beq.w	8009da4 <_dtoa_r+0x894>
 8009c64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c68:	9e06      	ldr	r6, [sp, #24]
 8009c6a:	4645      	mov	r5, r8
 8009c6c:	9a04      	ldr	r2, [sp, #16]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	441a      	add	r2, r3
 8009c72:	4620      	mov	r0, r4
 8009c74:	4498      	add	r8, r3
 8009c76:	9204      	str	r2, [sp, #16]
 8009c78:	f000 fb3e 	bl	800a2f8 <__i2b>
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	dd0b      	ble.n	8009c9a <_dtoa_r+0x78a>
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dd08      	ble.n	8009c9a <_dtoa_r+0x78a>
 8009c88:	42ab      	cmp	r3, r5
 8009c8a:	9a04      	ldr	r2, [sp, #16]
 8009c8c:	bfa8      	it	ge
 8009c8e:	462b      	movge	r3, r5
 8009c90:	eba8 0803 	sub.w	r8, r8, r3
 8009c94:	1aed      	subs	r5, r5, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	b1fb      	cbz	r3, 8009cde <_dtoa_r+0x7ce>
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 809f 	beq.w	8009de4 <_dtoa_r+0x8d4>
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	dd11      	ble.n	8009cce <_dtoa_r+0x7be>
 8009caa:	4639      	mov	r1, r7
 8009cac:	4632      	mov	r2, r6
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fbde 	bl	800a470 <__pow5mult>
 8009cb4:	465a      	mov	r2, fp
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4607      	mov	r7, r0
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 fb32 	bl	800a324 <__multiply>
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	9007      	str	r0, [sp, #28]
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fa5b 	bl	800a180 <_Bfree>
 8009cca:	9b07      	ldr	r3, [sp, #28]
 8009ccc:	469b      	mov	fp, r3
 8009cce:	9b06      	ldr	r3, [sp, #24]
 8009cd0:	1b9a      	subs	r2, r3, r6
 8009cd2:	d004      	beq.n	8009cde <_dtoa_r+0x7ce>
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 fbca 	bl	800a470 <__pow5mult>
 8009cdc:	4683      	mov	fp, r0
 8009cde:	2101      	movs	r1, #1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fb09 	bl	800a2f8 <__i2b>
 8009ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	4606      	mov	r6, r0
 8009cec:	dd7c      	ble.n	8009de8 <_dtoa_r+0x8d8>
 8009cee:	461a      	mov	r2, r3
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 fbbc 	bl	800a470 <__pow5mult>
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	dd76      	ble.n	8009dee <_dtoa_r+0x8de>
 8009d00:	2300      	movs	r3, #0
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	6933      	ldr	r3, [r6, #16]
 8009d06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d0a:	6918      	ldr	r0, [r3, #16]
 8009d0c:	f000 faa4 	bl	800a258 <__hi0bits>
 8009d10:	f1c0 0020 	rsb	r0, r0, #32
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	4418      	add	r0, r3
 8009d18:	f010 001f 	ands.w	r0, r0, #31
 8009d1c:	f000 8086 	beq.w	8009e2c <_dtoa_r+0x91c>
 8009d20:	f1c0 0320 	rsb	r3, r0, #32
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	dd7f      	ble.n	8009e28 <_dtoa_r+0x918>
 8009d28:	f1c0 001c 	rsb	r0, r0, #28
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	4403      	add	r3, r0
 8009d30:	4480      	add	r8, r0
 8009d32:	4405      	add	r5, r0
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	f1b8 0f00 	cmp.w	r8, #0
 8009d3a:	dd05      	ble.n	8009d48 <_dtoa_r+0x838>
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	4642      	mov	r2, r8
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fbef 	bl	800a524 <__lshift>
 8009d46:	4683      	mov	fp, r0
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dd05      	ble.n	8009d5a <_dtoa_r+0x84a>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	461a      	mov	r2, r3
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fbe6 	bl	800a524 <__lshift>
 8009d58:	4606      	mov	r6, r0
 8009d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d069      	beq.n	8009e34 <_dtoa_r+0x924>
 8009d60:	4631      	mov	r1, r6
 8009d62:	4658      	mov	r0, fp
 8009d64:	f000 fc4a 	bl	800a5fc <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	da63      	bge.n	8009e34 <_dtoa_r+0x924>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4659      	mov	r1, fp
 8009d70:	220a      	movs	r2, #10
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 fa26 	bl	800a1c4 <__multadd>
 8009d78:	9b08      	ldr	r3, [sp, #32]
 8009d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d7e:	4683      	mov	fp, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 818f 	beq.w	800a0a4 <_dtoa_r+0xb94>
 8009d86:	4639      	mov	r1, r7
 8009d88:	2300      	movs	r3, #0
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 fa19 	bl	800a1c4 <__multadd>
 8009d92:	f1b9 0f00 	cmp.w	r9, #0
 8009d96:	4607      	mov	r7, r0
 8009d98:	f300 808e 	bgt.w	8009eb8 <_dtoa_r+0x9a8>
 8009d9c:	9b05      	ldr	r3, [sp, #20]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	dc50      	bgt.n	8009e44 <_dtoa_r+0x934>
 8009da2:	e089      	b.n	8009eb8 <_dtoa_r+0x9a8>
 8009da4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009daa:	e75d      	b.n	8009c68 <_dtoa_r+0x758>
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	1e5e      	subs	r6, r3, #1
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	42b3      	cmp	r3, r6
 8009db4:	bfbf      	itttt	lt
 8009db6:	9b06      	ldrlt	r3, [sp, #24]
 8009db8:	9606      	strlt	r6, [sp, #24]
 8009dba:	1af2      	sublt	r2, r6, r3
 8009dbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009dbe:	bfb6      	itet	lt
 8009dc0:	189b      	addlt	r3, r3, r2
 8009dc2:	1b9e      	subge	r6, r3, r6
 8009dc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	bfb8      	it	lt
 8009dca:	2600      	movlt	r6, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfb5      	itete	lt
 8009dd0:	eba8 0503 	sublt.w	r5, r8, r3
 8009dd4:	9b01      	ldrge	r3, [sp, #4]
 8009dd6:	2300      	movlt	r3, #0
 8009dd8:	4645      	movge	r5, r8
 8009dda:	e747      	b.n	8009c6c <_dtoa_r+0x75c>
 8009ddc:	9e06      	ldr	r6, [sp, #24]
 8009dde:	9f08      	ldr	r7, [sp, #32]
 8009de0:	4645      	mov	r5, r8
 8009de2:	e74c      	b.n	8009c7e <_dtoa_r+0x76e>
 8009de4:	9a06      	ldr	r2, [sp, #24]
 8009de6:	e775      	b.n	8009cd4 <_dtoa_r+0x7c4>
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	dc18      	bgt.n	8009e20 <_dtoa_r+0x910>
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	b9b3      	cbnz	r3, 8009e20 <_dtoa_r+0x910>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df8:	b9a3      	cbnz	r3, 8009e24 <_dtoa_r+0x914>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e00:	0d1b      	lsrs	r3, r3, #20
 8009e02:	051b      	lsls	r3, r3, #20
 8009e04:	b12b      	cbz	r3, 8009e12 <_dtoa_r+0x902>
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	f108 0801 	add.w	r8, r8, #1
 8009e10:	2301      	movs	r3, #1
 8009e12:	9306      	str	r3, [sp, #24]
 8009e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f47f af74 	bne.w	8009d04 <_dtoa_r+0x7f4>
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e779      	b.n	8009d14 <_dtoa_r+0x804>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e7f6      	b.n	8009e12 <_dtoa_r+0x902>
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	e7f4      	b.n	8009e12 <_dtoa_r+0x902>
 8009e28:	d085      	beq.n	8009d36 <_dtoa_r+0x826>
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	301c      	adds	r0, #28
 8009e2e:	e77d      	b.n	8009d2c <_dtoa_r+0x81c>
 8009e30:	40240000 	.word	0x40240000
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dc38      	bgt.n	8009eac <_dtoa_r+0x99c>
 8009e3a:	9b05      	ldr	r3, [sp, #20]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	dd35      	ble.n	8009eac <_dtoa_r+0x99c>
 8009e40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e44:	f1b9 0f00 	cmp.w	r9, #0
 8009e48:	d10d      	bne.n	8009e66 <_dtoa_r+0x956>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	2205      	movs	r2, #5
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 f9b7 	bl	800a1c4 <__multadd>
 8009e56:	4601      	mov	r1, r0
 8009e58:	4606      	mov	r6, r0
 8009e5a:	4658      	mov	r0, fp
 8009e5c:	f000 fbce 	bl	800a5fc <__mcmp>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	f73f adbd 	bgt.w	80099e0 <_dtoa_r+0x4d0>
 8009e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e68:	9d00      	ldr	r5, [sp, #0]
 8009e6a:	ea6f 0a03 	mvn.w	sl, r3
 8009e6e:	f04f 0800 	mov.w	r8, #0
 8009e72:	4631      	mov	r1, r6
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 f983 	bl	800a180 <_Bfree>
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	f43f aeb4 	beq.w	8009be8 <_dtoa_r+0x6d8>
 8009e80:	f1b8 0f00 	cmp.w	r8, #0
 8009e84:	d005      	beq.n	8009e92 <_dtoa_r+0x982>
 8009e86:	45b8      	cmp	r8, r7
 8009e88:	d003      	beq.n	8009e92 <_dtoa_r+0x982>
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 f977 	bl	800a180 <_Bfree>
 8009e92:	4639      	mov	r1, r7
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 f973 	bl	800a180 <_Bfree>
 8009e9a:	e6a5      	b.n	8009be8 <_dtoa_r+0x6d8>
 8009e9c:	2600      	movs	r6, #0
 8009e9e:	4637      	mov	r7, r6
 8009ea0:	e7e1      	b.n	8009e66 <_dtoa_r+0x956>
 8009ea2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009ea4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009ea8:	4637      	mov	r7, r6
 8009eaa:	e599      	b.n	80099e0 <_dtoa_r+0x4d0>
 8009eac:	9b08      	ldr	r3, [sp, #32]
 8009eae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 80fd 	beq.w	800a0b2 <_dtoa_r+0xba2>
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	dd05      	ble.n	8009ec8 <_dtoa_r+0x9b8>
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fb2f 	bl	800a524 <__lshift>
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	9b06      	ldr	r3, [sp, #24]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d05c      	beq.n	8009f88 <_dtoa_r+0xa78>
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 f915 	bl	800a100 <_Balloc>
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	b928      	cbnz	r0, 8009ee6 <_dtoa_r+0x9d6>
 8009eda:	4b80      	ldr	r3, [pc, #512]	; (800a0dc <_dtoa_r+0xbcc>)
 8009edc:	4602      	mov	r2, r0
 8009ede:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ee2:	f7ff bb2e 	b.w	8009542 <_dtoa_r+0x32>
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	3202      	adds	r2, #2
 8009eea:	0092      	lsls	r2, r2, #2
 8009eec:	f107 010c 	add.w	r1, r7, #12
 8009ef0:	300c      	adds	r0, #12
 8009ef2:	f7fe fdb9 	bl	8008a68 <memcpy>
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4620      	mov	r0, r4
 8009efc:	f000 fb12 	bl	800a524 <__lshift>
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	9b00      	ldr	r3, [sp, #0]
 8009f08:	444b      	add	r3, r9
 8009f0a:	9307      	str	r3, [sp, #28]
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	46b8      	mov	r8, r7
 8009f14:	9306      	str	r3, [sp, #24]
 8009f16:	4607      	mov	r7, r0
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	4658      	mov	r0, fp
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	f7ff fa67 	bl	80093f4 <quorem>
 8009f26:	4603      	mov	r3, r0
 8009f28:	3330      	adds	r3, #48	; 0x30
 8009f2a:	9004      	str	r0, [sp, #16]
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	4658      	mov	r0, fp
 8009f30:	9308      	str	r3, [sp, #32]
 8009f32:	f000 fb63 	bl	800a5fc <__mcmp>
 8009f36:	463a      	mov	r2, r7
 8009f38:	4681      	mov	r9, r0
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fb79 	bl	800a634 <__mdiff>
 8009f42:	68c2      	ldr	r2, [r0, #12]
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	4605      	mov	r5, r0
 8009f48:	bb02      	cbnz	r2, 8009f8c <_dtoa_r+0xa7c>
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	f000 fb55 	bl	800a5fc <__mcmp>
 8009f52:	9b08      	ldr	r3, [sp, #32]
 8009f54:	4602      	mov	r2, r0
 8009f56:	4629      	mov	r1, r5
 8009f58:	4620      	mov	r0, r4
 8009f5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009f5e:	f000 f90f 	bl	800a180 <_Bfree>
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f66:	9d01      	ldr	r5, [sp, #4]
 8009f68:	ea43 0102 	orr.w	r1, r3, r2
 8009f6c:	9b06      	ldr	r3, [sp, #24]
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	9b08      	ldr	r3, [sp, #32]
 8009f72:	d10d      	bne.n	8009f90 <_dtoa_r+0xa80>
 8009f74:	2b39      	cmp	r3, #57	; 0x39
 8009f76:	d029      	beq.n	8009fcc <_dtoa_r+0xabc>
 8009f78:	f1b9 0f00 	cmp.w	r9, #0
 8009f7c:	dd01      	ble.n	8009f82 <_dtoa_r+0xa72>
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	3331      	adds	r3, #49	; 0x31
 8009f82:	9a02      	ldr	r2, [sp, #8]
 8009f84:	7013      	strb	r3, [r2, #0]
 8009f86:	e774      	b.n	8009e72 <_dtoa_r+0x962>
 8009f88:	4638      	mov	r0, r7
 8009f8a:	e7b9      	b.n	8009f00 <_dtoa_r+0x9f0>
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	e7e2      	b.n	8009f56 <_dtoa_r+0xa46>
 8009f90:	f1b9 0f00 	cmp.w	r9, #0
 8009f94:	db06      	blt.n	8009fa4 <_dtoa_r+0xa94>
 8009f96:	9905      	ldr	r1, [sp, #20]
 8009f98:	ea41 0909 	orr.w	r9, r1, r9
 8009f9c:	9906      	ldr	r1, [sp, #24]
 8009f9e:	ea59 0101 	orrs.w	r1, r9, r1
 8009fa2:	d120      	bne.n	8009fe6 <_dtoa_r+0xad6>
 8009fa4:	2a00      	cmp	r2, #0
 8009fa6:	ddec      	ble.n	8009f82 <_dtoa_r+0xa72>
 8009fa8:	4659      	mov	r1, fp
 8009faa:	2201      	movs	r2, #1
 8009fac:	4620      	mov	r0, r4
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	f000 fab8 	bl	800a524 <__lshift>
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4683      	mov	fp, r0
 8009fb8:	f000 fb20 	bl	800a5fc <__mcmp>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	9b01      	ldr	r3, [sp, #4]
 8009fc0:	dc02      	bgt.n	8009fc8 <_dtoa_r+0xab8>
 8009fc2:	d1de      	bne.n	8009f82 <_dtoa_r+0xa72>
 8009fc4:	07da      	lsls	r2, r3, #31
 8009fc6:	d5dc      	bpl.n	8009f82 <_dtoa_r+0xa72>
 8009fc8:	2b39      	cmp	r3, #57	; 0x39
 8009fca:	d1d8      	bne.n	8009f7e <_dtoa_r+0xa6e>
 8009fcc:	9a02      	ldr	r2, [sp, #8]
 8009fce:	2339      	movs	r3, #57	; 0x39
 8009fd0:	7013      	strb	r3, [r2, #0]
 8009fd2:	462b      	mov	r3, r5
 8009fd4:	461d      	mov	r5, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fdc:	2a39      	cmp	r2, #57	; 0x39
 8009fde:	d050      	beq.n	800a082 <_dtoa_r+0xb72>
 8009fe0:	3201      	adds	r2, #1
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	e745      	b.n	8009e72 <_dtoa_r+0x962>
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	dd03      	ble.n	8009ff2 <_dtoa_r+0xae2>
 8009fea:	2b39      	cmp	r3, #57	; 0x39
 8009fec:	d0ee      	beq.n	8009fcc <_dtoa_r+0xabc>
 8009fee:	3301      	adds	r3, #1
 8009ff0:	e7c7      	b.n	8009f82 <_dtoa_r+0xa72>
 8009ff2:	9a01      	ldr	r2, [sp, #4]
 8009ff4:	9907      	ldr	r1, [sp, #28]
 8009ff6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ffa:	428a      	cmp	r2, r1
 8009ffc:	d02a      	beq.n	800a054 <_dtoa_r+0xb44>
 8009ffe:	4659      	mov	r1, fp
 800a000:	2300      	movs	r3, #0
 800a002:	220a      	movs	r2, #10
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f8dd 	bl	800a1c4 <__multadd>
 800a00a:	45b8      	cmp	r8, r7
 800a00c:	4683      	mov	fp, r0
 800a00e:	f04f 0300 	mov.w	r3, #0
 800a012:	f04f 020a 	mov.w	r2, #10
 800a016:	4641      	mov	r1, r8
 800a018:	4620      	mov	r0, r4
 800a01a:	d107      	bne.n	800a02c <_dtoa_r+0xb1c>
 800a01c:	f000 f8d2 	bl	800a1c4 <__multadd>
 800a020:	4680      	mov	r8, r0
 800a022:	4607      	mov	r7, r0
 800a024:	9b01      	ldr	r3, [sp, #4]
 800a026:	3301      	adds	r3, #1
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	e775      	b.n	8009f18 <_dtoa_r+0xa08>
 800a02c:	f000 f8ca 	bl	800a1c4 <__multadd>
 800a030:	4639      	mov	r1, r7
 800a032:	4680      	mov	r8, r0
 800a034:	2300      	movs	r3, #0
 800a036:	220a      	movs	r2, #10
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 f8c3 	bl	800a1c4 <__multadd>
 800a03e:	4607      	mov	r7, r0
 800a040:	e7f0      	b.n	800a024 <_dtoa_r+0xb14>
 800a042:	f1b9 0f00 	cmp.w	r9, #0
 800a046:	9a00      	ldr	r2, [sp, #0]
 800a048:	bfcc      	ite	gt
 800a04a:	464d      	movgt	r5, r9
 800a04c:	2501      	movle	r5, #1
 800a04e:	4415      	add	r5, r2
 800a050:	f04f 0800 	mov.w	r8, #0
 800a054:	4659      	mov	r1, fp
 800a056:	2201      	movs	r2, #1
 800a058:	4620      	mov	r0, r4
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	f000 fa62 	bl	800a524 <__lshift>
 800a060:	4631      	mov	r1, r6
 800a062:	4683      	mov	fp, r0
 800a064:	f000 faca 	bl	800a5fc <__mcmp>
 800a068:	2800      	cmp	r0, #0
 800a06a:	dcb2      	bgt.n	8009fd2 <_dtoa_r+0xac2>
 800a06c:	d102      	bne.n	800a074 <_dtoa_r+0xb64>
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	07db      	lsls	r3, r3, #31
 800a072:	d4ae      	bmi.n	8009fd2 <_dtoa_r+0xac2>
 800a074:	462b      	mov	r3, r5
 800a076:	461d      	mov	r5, r3
 800a078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a07c:	2a30      	cmp	r2, #48	; 0x30
 800a07e:	d0fa      	beq.n	800a076 <_dtoa_r+0xb66>
 800a080:	e6f7      	b.n	8009e72 <_dtoa_r+0x962>
 800a082:	9a00      	ldr	r2, [sp, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d1a5      	bne.n	8009fd4 <_dtoa_r+0xac4>
 800a088:	f10a 0a01 	add.w	sl, sl, #1
 800a08c:	2331      	movs	r3, #49	; 0x31
 800a08e:	e779      	b.n	8009f84 <_dtoa_r+0xa74>
 800a090:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <_dtoa_r+0xbd0>)
 800a092:	f7ff baaf 	b.w	80095f4 <_dtoa_r+0xe4>
 800a096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f47f aa86 	bne.w	80095aa <_dtoa_r+0x9a>
 800a09e:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <_dtoa_r+0xbd4>)
 800a0a0:	f7ff baa8 	b.w	80095f4 <_dtoa_r+0xe4>
 800a0a4:	f1b9 0f00 	cmp.w	r9, #0
 800a0a8:	dc03      	bgt.n	800a0b2 <_dtoa_r+0xba2>
 800a0aa:	9b05      	ldr	r3, [sp, #20]
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	f73f aec9 	bgt.w	8009e44 <_dtoa_r+0x934>
 800a0b2:	9d00      	ldr	r5, [sp, #0]
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	f7ff f99c 	bl	80093f4 <quorem>
 800a0bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0c0:	f805 3b01 	strb.w	r3, [r5], #1
 800a0c4:	9a00      	ldr	r2, [sp, #0]
 800a0c6:	1aaa      	subs	r2, r5, r2
 800a0c8:	4591      	cmp	r9, r2
 800a0ca:	ddba      	ble.n	800a042 <_dtoa_r+0xb32>
 800a0cc:	4659      	mov	r1, fp
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 f876 	bl	800a1c4 <__multadd>
 800a0d8:	4683      	mov	fp, r0
 800a0da:	e7eb      	b.n	800a0b4 <_dtoa_r+0xba4>
 800a0dc:	0800ba1b 	.word	0x0800ba1b
 800a0e0:	0800b974 	.word	0x0800b974
 800a0e4:	0800b998 	.word	0x0800b998

0800a0e8 <_localeconv_r>:
 800a0e8:	4800      	ldr	r0, [pc, #0]	; (800a0ec <_localeconv_r+0x4>)
 800a0ea:	4770      	bx	lr
 800a0ec:	200002e4 	.word	0x200002e4

0800a0f0 <malloc>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <malloc+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f000 bbe1 	b.w	800a8bc <_malloc_r>
 800a0fa:	bf00      	nop
 800a0fc:	20000190 	.word	0x20000190

0800a100 <_Balloc>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a104:	4604      	mov	r4, r0
 800a106:	460d      	mov	r5, r1
 800a108:	b976      	cbnz	r6, 800a128 <_Balloc+0x28>
 800a10a:	2010      	movs	r0, #16
 800a10c:	f7ff fff0 	bl	800a0f0 <malloc>
 800a110:	4602      	mov	r2, r0
 800a112:	6260      	str	r0, [r4, #36]	; 0x24
 800a114:	b920      	cbnz	r0, 800a120 <_Balloc+0x20>
 800a116:	4b18      	ldr	r3, [pc, #96]	; (800a178 <_Balloc+0x78>)
 800a118:	4818      	ldr	r0, [pc, #96]	; (800a17c <_Balloc+0x7c>)
 800a11a:	2166      	movs	r1, #102	; 0x66
 800a11c:	f000 fd94 	bl	800ac48 <__assert_func>
 800a120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a124:	6006      	str	r6, [r0, #0]
 800a126:	60c6      	str	r6, [r0, #12]
 800a128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a12a:	68f3      	ldr	r3, [r6, #12]
 800a12c:	b183      	cbz	r3, 800a150 <_Balloc+0x50>
 800a12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a136:	b9b8      	cbnz	r0, 800a168 <_Balloc+0x68>
 800a138:	2101      	movs	r1, #1
 800a13a:	fa01 f605 	lsl.w	r6, r1, r5
 800a13e:	1d72      	adds	r2, r6, #5
 800a140:	0092      	lsls	r2, r2, #2
 800a142:	4620      	mov	r0, r4
 800a144:	f000 fb5a 	bl	800a7fc <_calloc_r>
 800a148:	b160      	cbz	r0, 800a164 <_Balloc+0x64>
 800a14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a14e:	e00e      	b.n	800a16e <_Balloc+0x6e>
 800a150:	2221      	movs	r2, #33	; 0x21
 800a152:	2104      	movs	r1, #4
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fb51 	bl	800a7fc <_calloc_r>
 800a15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a15c:	60f0      	str	r0, [r6, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e4      	bne.n	800a12e <_Balloc+0x2e>
 800a164:	2000      	movs	r0, #0
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	6802      	ldr	r2, [r0, #0]
 800a16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a16e:	2300      	movs	r3, #0
 800a170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a174:	e7f7      	b.n	800a166 <_Balloc+0x66>
 800a176:	bf00      	nop
 800a178:	0800b9a5 	.word	0x0800b9a5
 800a17c:	0800ba2c 	.word	0x0800ba2c

0800a180 <_Bfree>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	b976      	cbnz	r6, 800a1a8 <_Bfree+0x28>
 800a18a:	2010      	movs	r0, #16
 800a18c:	f7ff ffb0 	bl	800a0f0 <malloc>
 800a190:	4602      	mov	r2, r0
 800a192:	6268      	str	r0, [r5, #36]	; 0x24
 800a194:	b920      	cbnz	r0, 800a1a0 <_Bfree+0x20>
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <_Bfree+0x3c>)
 800a198:	4809      	ldr	r0, [pc, #36]	; (800a1c0 <_Bfree+0x40>)
 800a19a:	218a      	movs	r1, #138	; 0x8a
 800a19c:	f000 fd54 	bl	800ac48 <__assert_func>
 800a1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a4:	6006      	str	r6, [r0, #0]
 800a1a6:	60c6      	str	r6, [r0, #12]
 800a1a8:	b13c      	cbz	r4, 800a1ba <_Bfree+0x3a>
 800a1aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1ac:	6862      	ldr	r2, [r4, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1b4:	6021      	str	r1, [r4, #0]
 800a1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	0800b9a5 	.word	0x0800b9a5
 800a1c0:	0800ba2c 	.word	0x0800ba2c

0800a1c4 <__multadd>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	690e      	ldr	r6, [r1, #16]
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	4698      	mov	r8, r3
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	f101 0014 	add.w	r0, r1, #20
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6805      	ldr	r5, [r0, #0]
 800a1d8:	b2a9      	uxth	r1, r5
 800a1da:	fb02 8101 	mla	r1, r2, r1, r8
 800a1de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a1e2:	0c2d      	lsrs	r5, r5, #16
 800a1e4:	fb02 c505 	mla	r5, r2, r5, ip
 800a1e8:	b289      	uxth	r1, r1
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a1f0:	429e      	cmp	r6, r3
 800a1f2:	f840 1b04 	str.w	r1, [r0], #4
 800a1f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a1fa:	dcec      	bgt.n	800a1d6 <__multadd+0x12>
 800a1fc:	f1b8 0f00 	cmp.w	r8, #0
 800a200:	d022      	beq.n	800a248 <__multadd+0x84>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	42b3      	cmp	r3, r6
 800a206:	dc19      	bgt.n	800a23c <__multadd+0x78>
 800a208:	6861      	ldr	r1, [r4, #4]
 800a20a:	4638      	mov	r0, r7
 800a20c:	3101      	adds	r1, #1
 800a20e:	f7ff ff77 	bl	800a100 <_Balloc>
 800a212:	4605      	mov	r5, r0
 800a214:	b928      	cbnz	r0, 800a222 <__multadd+0x5e>
 800a216:	4602      	mov	r2, r0
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <__multadd+0x8c>)
 800a21a:	480e      	ldr	r0, [pc, #56]	; (800a254 <__multadd+0x90>)
 800a21c:	21b5      	movs	r1, #181	; 0xb5
 800a21e:	f000 fd13 	bl	800ac48 <__assert_func>
 800a222:	6922      	ldr	r2, [r4, #16]
 800a224:	3202      	adds	r2, #2
 800a226:	f104 010c 	add.w	r1, r4, #12
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	300c      	adds	r0, #12
 800a22e:	f7fe fc1b 	bl	8008a68 <memcpy>
 800a232:	4621      	mov	r1, r4
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa3 	bl	800a180 <_Bfree>
 800a23a:	462c      	mov	r4, r5
 800a23c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a240:	3601      	adds	r6, #1
 800a242:	f8c3 8014 	str.w	r8, [r3, #20]
 800a246:	6126      	str	r6, [r4, #16]
 800a248:	4620      	mov	r0, r4
 800a24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24e:	bf00      	nop
 800a250:	0800ba1b 	.word	0x0800ba1b
 800a254:	0800ba2c 	.word	0x0800ba2c

0800a258 <__hi0bits>:
 800a258:	0c03      	lsrs	r3, r0, #16
 800a25a:	041b      	lsls	r3, r3, #16
 800a25c:	b9d3      	cbnz	r3, 800a294 <__hi0bits+0x3c>
 800a25e:	0400      	lsls	r0, r0, #16
 800a260:	2310      	movs	r3, #16
 800a262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a266:	bf04      	itt	eq
 800a268:	0200      	lsleq	r0, r0, #8
 800a26a:	3308      	addeq	r3, #8
 800a26c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a270:	bf04      	itt	eq
 800a272:	0100      	lsleq	r0, r0, #4
 800a274:	3304      	addeq	r3, #4
 800a276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a27a:	bf04      	itt	eq
 800a27c:	0080      	lsleq	r0, r0, #2
 800a27e:	3302      	addeq	r3, #2
 800a280:	2800      	cmp	r0, #0
 800a282:	db05      	blt.n	800a290 <__hi0bits+0x38>
 800a284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a288:	f103 0301 	add.w	r3, r3, #1
 800a28c:	bf08      	it	eq
 800a28e:	2320      	moveq	r3, #32
 800a290:	4618      	mov	r0, r3
 800a292:	4770      	bx	lr
 800a294:	2300      	movs	r3, #0
 800a296:	e7e4      	b.n	800a262 <__hi0bits+0xa>

0800a298 <__lo0bits>:
 800a298:	6803      	ldr	r3, [r0, #0]
 800a29a:	f013 0207 	ands.w	r2, r3, #7
 800a29e:	4601      	mov	r1, r0
 800a2a0:	d00b      	beq.n	800a2ba <__lo0bits+0x22>
 800a2a2:	07da      	lsls	r2, r3, #31
 800a2a4:	d424      	bmi.n	800a2f0 <__lo0bits+0x58>
 800a2a6:	0798      	lsls	r0, r3, #30
 800a2a8:	bf49      	itett	mi
 800a2aa:	085b      	lsrmi	r3, r3, #1
 800a2ac:	089b      	lsrpl	r3, r3, #2
 800a2ae:	2001      	movmi	r0, #1
 800a2b0:	600b      	strmi	r3, [r1, #0]
 800a2b2:	bf5c      	itt	pl
 800a2b4:	600b      	strpl	r3, [r1, #0]
 800a2b6:	2002      	movpl	r0, #2
 800a2b8:	4770      	bx	lr
 800a2ba:	b298      	uxth	r0, r3
 800a2bc:	b9b0      	cbnz	r0, 800a2ec <__lo0bits+0x54>
 800a2be:	0c1b      	lsrs	r3, r3, #16
 800a2c0:	2010      	movs	r0, #16
 800a2c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2c6:	bf04      	itt	eq
 800a2c8:	0a1b      	lsreq	r3, r3, #8
 800a2ca:	3008      	addeq	r0, #8
 800a2cc:	071a      	lsls	r2, r3, #28
 800a2ce:	bf04      	itt	eq
 800a2d0:	091b      	lsreq	r3, r3, #4
 800a2d2:	3004      	addeq	r0, #4
 800a2d4:	079a      	lsls	r2, r3, #30
 800a2d6:	bf04      	itt	eq
 800a2d8:	089b      	lsreq	r3, r3, #2
 800a2da:	3002      	addeq	r0, #2
 800a2dc:	07da      	lsls	r2, r3, #31
 800a2de:	d403      	bmi.n	800a2e8 <__lo0bits+0x50>
 800a2e0:	085b      	lsrs	r3, r3, #1
 800a2e2:	f100 0001 	add.w	r0, r0, #1
 800a2e6:	d005      	beq.n	800a2f4 <__lo0bits+0x5c>
 800a2e8:	600b      	str	r3, [r1, #0]
 800a2ea:	4770      	bx	lr
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	e7e8      	b.n	800a2c2 <__lo0bits+0x2a>
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	4770      	bx	lr
 800a2f4:	2020      	movs	r0, #32
 800a2f6:	4770      	bx	lr

0800a2f8 <__i2b>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	f7ff feff 	bl	800a100 <_Balloc>
 800a302:	4602      	mov	r2, r0
 800a304:	b928      	cbnz	r0, 800a312 <__i2b+0x1a>
 800a306:	4b05      	ldr	r3, [pc, #20]	; (800a31c <__i2b+0x24>)
 800a308:	4805      	ldr	r0, [pc, #20]	; (800a320 <__i2b+0x28>)
 800a30a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a30e:	f000 fc9b 	bl	800ac48 <__assert_func>
 800a312:	2301      	movs	r3, #1
 800a314:	6144      	str	r4, [r0, #20]
 800a316:	6103      	str	r3, [r0, #16]
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	bf00      	nop
 800a31c:	0800ba1b 	.word	0x0800ba1b
 800a320:	0800ba2c 	.word	0x0800ba2c

0800a324 <__multiply>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	4614      	mov	r4, r2
 800a32a:	690a      	ldr	r2, [r1, #16]
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	429a      	cmp	r2, r3
 800a330:	bfb8      	it	lt
 800a332:	460b      	movlt	r3, r1
 800a334:	460d      	mov	r5, r1
 800a336:	bfbc      	itt	lt
 800a338:	4625      	movlt	r5, r4
 800a33a:	461c      	movlt	r4, r3
 800a33c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a340:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a344:	68ab      	ldr	r3, [r5, #8]
 800a346:	6869      	ldr	r1, [r5, #4]
 800a348:	eb0a 0709 	add.w	r7, sl, r9
 800a34c:	42bb      	cmp	r3, r7
 800a34e:	b085      	sub	sp, #20
 800a350:	bfb8      	it	lt
 800a352:	3101      	addlt	r1, #1
 800a354:	f7ff fed4 	bl	800a100 <_Balloc>
 800a358:	b930      	cbnz	r0, 800a368 <__multiply+0x44>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b42      	ldr	r3, [pc, #264]	; (800a468 <__multiply+0x144>)
 800a35e:	4843      	ldr	r0, [pc, #268]	; (800a46c <__multiply+0x148>)
 800a360:	f240 115d 	movw	r1, #349	; 0x15d
 800a364:	f000 fc70 	bl	800ac48 <__assert_func>
 800a368:	f100 0614 	add.w	r6, r0, #20
 800a36c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a370:	4633      	mov	r3, r6
 800a372:	2200      	movs	r2, #0
 800a374:	4543      	cmp	r3, r8
 800a376:	d31e      	bcc.n	800a3b6 <__multiply+0x92>
 800a378:	f105 0c14 	add.w	ip, r5, #20
 800a37c:	f104 0314 	add.w	r3, r4, #20
 800a380:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a384:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a388:	9202      	str	r2, [sp, #8]
 800a38a:	ebac 0205 	sub.w	r2, ip, r5
 800a38e:	3a15      	subs	r2, #21
 800a390:	f022 0203 	bic.w	r2, r2, #3
 800a394:	3204      	adds	r2, #4
 800a396:	f105 0115 	add.w	r1, r5, #21
 800a39a:	458c      	cmp	ip, r1
 800a39c:	bf38      	it	cc
 800a39e:	2204      	movcc	r2, #4
 800a3a0:	9201      	str	r2, [sp, #4]
 800a3a2:	9a02      	ldr	r2, [sp, #8]
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d808      	bhi.n	800a3bc <__multiply+0x98>
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	dc55      	bgt.n	800a45a <__multiply+0x136>
 800a3ae:	6107      	str	r7, [r0, #16]
 800a3b0:	b005      	add	sp, #20
 800a3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b6:	f843 2b04 	str.w	r2, [r3], #4
 800a3ba:	e7db      	b.n	800a374 <__multiply+0x50>
 800a3bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3c0:	f1ba 0f00 	cmp.w	sl, #0
 800a3c4:	d020      	beq.n	800a408 <__multiply+0xe4>
 800a3c6:	f105 0e14 	add.w	lr, r5, #20
 800a3ca:	46b1      	mov	r9, r6
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a3d2:	f8d9 b000 	ldr.w	fp, [r9]
 800a3d6:	b2a1      	uxth	r1, r4
 800a3d8:	fa1f fb8b 	uxth.w	fp, fp
 800a3dc:	fb0a b101 	mla	r1, sl, r1, fp
 800a3e0:	4411      	add	r1, r2
 800a3e2:	f8d9 2000 	ldr.w	r2, [r9]
 800a3e6:	0c24      	lsrs	r4, r4, #16
 800a3e8:	0c12      	lsrs	r2, r2, #16
 800a3ea:	fb0a 2404 	mla	r4, sl, r4, r2
 800a3ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a3f8:	45f4      	cmp	ip, lr
 800a3fa:	f849 1b04 	str.w	r1, [r9], #4
 800a3fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a402:	d8e4      	bhi.n	800a3ce <__multiply+0xaa>
 800a404:	9901      	ldr	r1, [sp, #4]
 800a406:	5072      	str	r2, [r6, r1]
 800a408:	9a03      	ldr	r2, [sp, #12]
 800a40a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a40e:	3304      	adds	r3, #4
 800a410:	f1b9 0f00 	cmp.w	r9, #0
 800a414:	d01f      	beq.n	800a456 <__multiply+0x132>
 800a416:	6834      	ldr	r4, [r6, #0]
 800a418:	f105 0114 	add.w	r1, r5, #20
 800a41c:	46b6      	mov	lr, r6
 800a41e:	f04f 0a00 	mov.w	sl, #0
 800a422:	880a      	ldrh	r2, [r1, #0]
 800a424:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a428:	fb09 b202 	mla	r2, r9, r2, fp
 800a42c:	4492      	add	sl, r2
 800a42e:	b2a4      	uxth	r4, r4
 800a430:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a434:	f84e 4b04 	str.w	r4, [lr], #4
 800a438:	f851 4b04 	ldr.w	r4, [r1], #4
 800a43c:	f8be 2000 	ldrh.w	r2, [lr]
 800a440:	0c24      	lsrs	r4, r4, #16
 800a442:	fb09 2404 	mla	r4, r9, r4, r2
 800a446:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a44a:	458c      	cmp	ip, r1
 800a44c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a450:	d8e7      	bhi.n	800a422 <__multiply+0xfe>
 800a452:	9a01      	ldr	r2, [sp, #4]
 800a454:	50b4      	str	r4, [r6, r2]
 800a456:	3604      	adds	r6, #4
 800a458:	e7a3      	b.n	800a3a2 <__multiply+0x7e>
 800a45a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1a5      	bne.n	800a3ae <__multiply+0x8a>
 800a462:	3f01      	subs	r7, #1
 800a464:	e7a1      	b.n	800a3aa <__multiply+0x86>
 800a466:	bf00      	nop
 800a468:	0800ba1b 	.word	0x0800ba1b
 800a46c:	0800ba2c 	.word	0x0800ba2c

0800a470 <__pow5mult>:
 800a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a474:	4615      	mov	r5, r2
 800a476:	f012 0203 	ands.w	r2, r2, #3
 800a47a:	4606      	mov	r6, r0
 800a47c:	460f      	mov	r7, r1
 800a47e:	d007      	beq.n	800a490 <__pow5mult+0x20>
 800a480:	4c25      	ldr	r4, [pc, #148]	; (800a518 <__pow5mult+0xa8>)
 800a482:	3a01      	subs	r2, #1
 800a484:	2300      	movs	r3, #0
 800a486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a48a:	f7ff fe9b 	bl	800a1c4 <__multadd>
 800a48e:	4607      	mov	r7, r0
 800a490:	10ad      	asrs	r5, r5, #2
 800a492:	d03d      	beq.n	800a510 <__pow5mult+0xa0>
 800a494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a496:	b97c      	cbnz	r4, 800a4b8 <__pow5mult+0x48>
 800a498:	2010      	movs	r0, #16
 800a49a:	f7ff fe29 	bl	800a0f0 <malloc>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a4a2:	b928      	cbnz	r0, 800a4b0 <__pow5mult+0x40>
 800a4a4:	4b1d      	ldr	r3, [pc, #116]	; (800a51c <__pow5mult+0xac>)
 800a4a6:	481e      	ldr	r0, [pc, #120]	; (800a520 <__pow5mult+0xb0>)
 800a4a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4ac:	f000 fbcc 	bl	800ac48 <__assert_func>
 800a4b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4b4:	6004      	str	r4, [r0, #0]
 800a4b6:	60c4      	str	r4, [r0, #12]
 800a4b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4c0:	b94c      	cbnz	r4, 800a4d6 <__pow5mult+0x66>
 800a4c2:	f240 2171 	movw	r1, #625	; 0x271
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ff16 	bl	800a2f8 <__i2b>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	6003      	str	r3, [r0, #0]
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	07eb      	lsls	r3, r5, #31
 800a4dc:	d50a      	bpl.n	800a4f4 <__pow5mult+0x84>
 800a4de:	4639      	mov	r1, r7
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff ff1e 	bl	800a324 <__multiply>
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff fe47 	bl	800a180 <_Bfree>
 800a4f2:	4647      	mov	r7, r8
 800a4f4:	106d      	asrs	r5, r5, #1
 800a4f6:	d00b      	beq.n	800a510 <__pow5mult+0xa0>
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	b938      	cbnz	r0, 800a50c <__pow5mult+0x9c>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4621      	mov	r1, r4
 800a500:	4630      	mov	r0, r6
 800a502:	f7ff ff0f 	bl	800a324 <__multiply>
 800a506:	6020      	str	r0, [r4, #0]
 800a508:	f8c0 9000 	str.w	r9, [r0]
 800a50c:	4604      	mov	r4, r0
 800a50e:	e7e4      	b.n	800a4da <__pow5mult+0x6a>
 800a510:	4638      	mov	r0, r7
 800a512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a516:	bf00      	nop
 800a518:	0800bb80 	.word	0x0800bb80
 800a51c:	0800b9a5 	.word	0x0800b9a5
 800a520:	0800ba2c 	.word	0x0800ba2c

0800a524 <__lshift>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	460c      	mov	r4, r1
 800a52a:	6849      	ldr	r1, [r1, #4]
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	4607      	mov	r7, r0
 800a536:	4691      	mov	r9, r2
 800a538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a53c:	f108 0601 	add.w	r6, r8, #1
 800a540:	42b3      	cmp	r3, r6
 800a542:	db0b      	blt.n	800a55c <__lshift+0x38>
 800a544:	4638      	mov	r0, r7
 800a546:	f7ff fddb 	bl	800a100 <_Balloc>
 800a54a:	4605      	mov	r5, r0
 800a54c:	b948      	cbnz	r0, 800a562 <__lshift+0x3e>
 800a54e:	4602      	mov	r2, r0
 800a550:	4b28      	ldr	r3, [pc, #160]	; (800a5f4 <__lshift+0xd0>)
 800a552:	4829      	ldr	r0, [pc, #164]	; (800a5f8 <__lshift+0xd4>)
 800a554:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a558:	f000 fb76 	bl	800ac48 <__assert_func>
 800a55c:	3101      	adds	r1, #1
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	e7ee      	b.n	800a540 <__lshift+0x1c>
 800a562:	2300      	movs	r3, #0
 800a564:	f100 0114 	add.w	r1, r0, #20
 800a568:	f100 0210 	add.w	r2, r0, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	4553      	cmp	r3, sl
 800a570:	db33      	blt.n	800a5da <__lshift+0xb6>
 800a572:	6920      	ldr	r0, [r4, #16]
 800a574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a578:	f104 0314 	add.w	r3, r4, #20
 800a57c:	f019 091f 	ands.w	r9, r9, #31
 800a580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a584:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a588:	d02b      	beq.n	800a5e2 <__lshift+0xbe>
 800a58a:	f1c9 0e20 	rsb	lr, r9, #32
 800a58e:	468a      	mov	sl, r1
 800a590:	2200      	movs	r2, #0
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	fa00 f009 	lsl.w	r0, r0, r9
 800a598:	4302      	orrs	r2, r0
 800a59a:	f84a 2b04 	str.w	r2, [sl], #4
 800a59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a2:	459c      	cmp	ip, r3
 800a5a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5a8:	d8f3      	bhi.n	800a592 <__lshift+0x6e>
 800a5aa:	ebac 0304 	sub.w	r3, ip, r4
 800a5ae:	3b15      	subs	r3, #21
 800a5b0:	f023 0303 	bic.w	r3, r3, #3
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	f104 0015 	add.w	r0, r4, #21
 800a5ba:	4584      	cmp	ip, r0
 800a5bc:	bf38      	it	cc
 800a5be:	2304      	movcc	r3, #4
 800a5c0:	50ca      	str	r2, [r1, r3]
 800a5c2:	b10a      	cbz	r2, 800a5c8 <__lshift+0xa4>
 800a5c4:	f108 0602 	add.w	r6, r8, #2
 800a5c8:	3e01      	subs	r6, #1
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	612e      	str	r6, [r5, #16]
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	f7ff fdd6 	bl	800a180 <_Bfree>
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5de:	3301      	adds	r3, #1
 800a5e0:	e7c5      	b.n	800a56e <__lshift+0x4a>
 800a5e2:	3904      	subs	r1, #4
 800a5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5ec:	459c      	cmp	ip, r3
 800a5ee:	d8f9      	bhi.n	800a5e4 <__lshift+0xc0>
 800a5f0:	e7ea      	b.n	800a5c8 <__lshift+0xa4>
 800a5f2:	bf00      	nop
 800a5f4:	0800ba1b 	.word	0x0800ba1b
 800a5f8:	0800ba2c 	.word	0x0800ba2c

0800a5fc <__mcmp>:
 800a5fc:	b530      	push	{r4, r5, lr}
 800a5fe:	6902      	ldr	r2, [r0, #16]
 800a600:	690c      	ldr	r4, [r1, #16]
 800a602:	1b12      	subs	r2, r2, r4
 800a604:	d10e      	bne.n	800a624 <__mcmp+0x28>
 800a606:	f100 0314 	add.w	r3, r0, #20
 800a60a:	3114      	adds	r1, #20
 800a60c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a61c:	42a5      	cmp	r5, r4
 800a61e:	d003      	beq.n	800a628 <__mcmp+0x2c>
 800a620:	d305      	bcc.n	800a62e <__mcmp+0x32>
 800a622:	2201      	movs	r2, #1
 800a624:	4610      	mov	r0, r2
 800a626:	bd30      	pop	{r4, r5, pc}
 800a628:	4283      	cmp	r3, r0
 800a62a:	d3f3      	bcc.n	800a614 <__mcmp+0x18>
 800a62c:	e7fa      	b.n	800a624 <__mcmp+0x28>
 800a62e:	f04f 32ff 	mov.w	r2, #4294967295
 800a632:	e7f7      	b.n	800a624 <__mcmp+0x28>

0800a634 <__mdiff>:
 800a634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	460c      	mov	r4, r1
 800a63a:	4606      	mov	r6, r0
 800a63c:	4611      	mov	r1, r2
 800a63e:	4620      	mov	r0, r4
 800a640:	4617      	mov	r7, r2
 800a642:	f7ff ffdb 	bl	800a5fc <__mcmp>
 800a646:	1e05      	subs	r5, r0, #0
 800a648:	d110      	bne.n	800a66c <__mdiff+0x38>
 800a64a:	4629      	mov	r1, r5
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7ff fd57 	bl	800a100 <_Balloc>
 800a652:	b930      	cbnz	r0, 800a662 <__mdiff+0x2e>
 800a654:	4b39      	ldr	r3, [pc, #228]	; (800a73c <__mdiff+0x108>)
 800a656:	4602      	mov	r2, r0
 800a658:	f240 2132 	movw	r1, #562	; 0x232
 800a65c:	4838      	ldr	r0, [pc, #224]	; (800a740 <__mdiff+0x10c>)
 800a65e:	f000 faf3 	bl	800ac48 <__assert_func>
 800a662:	2301      	movs	r3, #1
 800a664:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	bfa4      	itt	ge
 800a66e:	463b      	movge	r3, r7
 800a670:	4627      	movge	r7, r4
 800a672:	4630      	mov	r0, r6
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	bfa6      	itte	ge
 800a678:	461c      	movge	r4, r3
 800a67a:	2500      	movge	r5, #0
 800a67c:	2501      	movlt	r5, #1
 800a67e:	f7ff fd3f 	bl	800a100 <_Balloc>
 800a682:	b920      	cbnz	r0, 800a68e <__mdiff+0x5a>
 800a684:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <__mdiff+0x108>)
 800a686:	4602      	mov	r2, r0
 800a688:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a68c:	e7e6      	b.n	800a65c <__mdiff+0x28>
 800a68e:	693e      	ldr	r6, [r7, #16]
 800a690:	60c5      	str	r5, [r0, #12]
 800a692:	6925      	ldr	r5, [r4, #16]
 800a694:	f107 0114 	add.w	r1, r7, #20
 800a698:	f104 0914 	add.w	r9, r4, #20
 800a69c:	f100 0e14 	add.w	lr, r0, #20
 800a6a0:	f107 0210 	add.w	r2, r7, #16
 800a6a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6ac:	46f2      	mov	sl, lr
 800a6ae:	2700      	movs	r7, #0
 800a6b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6b8:	fa1f f883 	uxth.w	r8, r3
 800a6bc:	fa17 f78b 	uxtah	r7, r7, fp
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	eba7 0808 	sub.w	r8, r7, r8
 800a6c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6ce:	fa1f f888 	uxth.w	r8, r8
 800a6d2:	141f      	asrs	r7, r3, #16
 800a6d4:	454d      	cmp	r5, r9
 800a6d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6da:	f84a 3b04 	str.w	r3, [sl], #4
 800a6de:	d8e7      	bhi.n	800a6b0 <__mdiff+0x7c>
 800a6e0:	1b2b      	subs	r3, r5, r4
 800a6e2:	3b15      	subs	r3, #21
 800a6e4:	f023 0303 	bic.w	r3, r3, #3
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	3415      	adds	r4, #21
 800a6ec:	42a5      	cmp	r5, r4
 800a6ee:	bf38      	it	cc
 800a6f0:	2304      	movcc	r3, #4
 800a6f2:	4419      	add	r1, r3
 800a6f4:	4473      	add	r3, lr
 800a6f6:	469e      	mov	lr, r3
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	4565      	cmp	r5, ip
 800a6fc:	d30e      	bcc.n	800a71c <__mdiff+0xe8>
 800a6fe:	f10c 0203 	add.w	r2, ip, #3
 800a702:	1a52      	subs	r2, r2, r1
 800a704:	f022 0203 	bic.w	r2, r2, #3
 800a708:	3903      	subs	r1, #3
 800a70a:	458c      	cmp	ip, r1
 800a70c:	bf38      	it	cc
 800a70e:	2200      	movcc	r2, #0
 800a710:	441a      	add	r2, r3
 800a712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a716:	b17b      	cbz	r3, 800a738 <__mdiff+0x104>
 800a718:	6106      	str	r6, [r0, #16]
 800a71a:	e7a5      	b.n	800a668 <__mdiff+0x34>
 800a71c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a720:	fa17 f488 	uxtah	r4, r7, r8
 800a724:	1422      	asrs	r2, r4, #16
 800a726:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a72a:	b2a4      	uxth	r4, r4
 800a72c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a730:	f84e 4b04 	str.w	r4, [lr], #4
 800a734:	1417      	asrs	r7, r2, #16
 800a736:	e7e0      	b.n	800a6fa <__mdiff+0xc6>
 800a738:	3e01      	subs	r6, #1
 800a73a:	e7ea      	b.n	800a712 <__mdiff+0xde>
 800a73c:	0800ba1b 	.word	0x0800ba1b
 800a740:	0800ba2c 	.word	0x0800ba2c

0800a744 <__d2b>:
 800a744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a748:	4689      	mov	r9, r1
 800a74a:	2101      	movs	r1, #1
 800a74c:	ec57 6b10 	vmov	r6, r7, d0
 800a750:	4690      	mov	r8, r2
 800a752:	f7ff fcd5 	bl	800a100 <_Balloc>
 800a756:	4604      	mov	r4, r0
 800a758:	b930      	cbnz	r0, 800a768 <__d2b+0x24>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b25      	ldr	r3, [pc, #148]	; (800a7f4 <__d2b+0xb0>)
 800a75e:	4826      	ldr	r0, [pc, #152]	; (800a7f8 <__d2b+0xb4>)
 800a760:	f240 310a 	movw	r1, #778	; 0x30a
 800a764:	f000 fa70 	bl	800ac48 <__assert_func>
 800a768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a76c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a770:	bb35      	cbnz	r5, 800a7c0 <__d2b+0x7c>
 800a772:	2e00      	cmp	r6, #0
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	d028      	beq.n	800a7ca <__d2b+0x86>
 800a778:	4668      	mov	r0, sp
 800a77a:	9600      	str	r6, [sp, #0]
 800a77c:	f7ff fd8c 	bl	800a298 <__lo0bits>
 800a780:	9900      	ldr	r1, [sp, #0]
 800a782:	b300      	cbz	r0, 800a7c6 <__d2b+0x82>
 800a784:	9a01      	ldr	r2, [sp, #4]
 800a786:	f1c0 0320 	rsb	r3, r0, #32
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	430b      	orrs	r3, r1
 800a790:	40c2      	lsrs	r2, r0
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	9201      	str	r2, [sp, #4]
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	61a3      	str	r3, [r4, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bf14      	ite	ne
 800a79e:	2202      	movne	r2, #2
 800a7a0:	2201      	moveq	r2, #1
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	b1d5      	cbz	r5, 800a7dc <__d2b+0x98>
 800a7a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7aa:	4405      	add	r5, r0
 800a7ac:	f8c9 5000 	str.w	r5, [r9]
 800a7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7b4:	f8c8 0000 	str.w	r0, [r8]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7c4:	e7d5      	b.n	800a772 <__d2b+0x2e>
 800a7c6:	6161      	str	r1, [r4, #20]
 800a7c8:	e7e5      	b.n	800a796 <__d2b+0x52>
 800a7ca:	a801      	add	r0, sp, #4
 800a7cc:	f7ff fd64 	bl	800a298 <__lo0bits>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	6163      	str	r3, [r4, #20]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	6122      	str	r2, [r4, #16]
 800a7d8:	3020      	adds	r0, #32
 800a7da:	e7e3      	b.n	800a7a4 <__d2b+0x60>
 800a7dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7e4:	f8c9 0000 	str.w	r0, [r9]
 800a7e8:	6918      	ldr	r0, [r3, #16]
 800a7ea:	f7ff fd35 	bl	800a258 <__hi0bits>
 800a7ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7f2:	e7df      	b.n	800a7b4 <__d2b+0x70>
 800a7f4:	0800ba1b 	.word	0x0800ba1b
 800a7f8:	0800ba2c 	.word	0x0800ba2c

0800a7fc <_calloc_r>:
 800a7fc:	b513      	push	{r0, r1, r4, lr}
 800a7fe:	434a      	muls	r2, r1
 800a800:	4611      	mov	r1, r2
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	f000 f85a 	bl	800a8bc <_malloc_r>
 800a808:	4604      	mov	r4, r0
 800a80a:	b118      	cbz	r0, 800a814 <_calloc_r+0x18>
 800a80c:	9a01      	ldr	r2, [sp, #4]
 800a80e:	2100      	movs	r1, #0
 800a810:	f7fe f938 	bl	8008a84 <memset>
 800a814:	4620      	mov	r0, r4
 800a816:	b002      	add	sp, #8
 800a818:	bd10      	pop	{r4, pc}
	...

0800a81c <_free_r>:
 800a81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a81e:	2900      	cmp	r1, #0
 800a820:	d048      	beq.n	800a8b4 <_free_r+0x98>
 800a822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a826:	9001      	str	r0, [sp, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f1a1 0404 	sub.w	r4, r1, #4
 800a82e:	bfb8      	it	lt
 800a830:	18e4      	addlt	r4, r4, r3
 800a832:	f000 fa65 	bl	800ad00 <__malloc_lock>
 800a836:	4a20      	ldr	r2, [pc, #128]	; (800a8b8 <_free_r+0x9c>)
 800a838:	9801      	ldr	r0, [sp, #4]
 800a83a:	6813      	ldr	r3, [r2, #0]
 800a83c:	4615      	mov	r5, r2
 800a83e:	b933      	cbnz	r3, 800a84e <_free_r+0x32>
 800a840:	6063      	str	r3, [r4, #4]
 800a842:	6014      	str	r4, [r2, #0]
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a84a:	f000 ba5f 	b.w	800ad0c <__malloc_unlock>
 800a84e:	42a3      	cmp	r3, r4
 800a850:	d90b      	bls.n	800a86a <_free_r+0x4e>
 800a852:	6821      	ldr	r1, [r4, #0]
 800a854:	1862      	adds	r2, r4, r1
 800a856:	4293      	cmp	r3, r2
 800a858:	bf04      	itt	eq
 800a85a:	681a      	ldreq	r2, [r3, #0]
 800a85c:	685b      	ldreq	r3, [r3, #4]
 800a85e:	6063      	str	r3, [r4, #4]
 800a860:	bf04      	itt	eq
 800a862:	1852      	addeq	r2, r2, r1
 800a864:	6022      	streq	r2, [r4, #0]
 800a866:	602c      	str	r4, [r5, #0]
 800a868:	e7ec      	b.n	800a844 <_free_r+0x28>
 800a86a:	461a      	mov	r2, r3
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	b10b      	cbz	r3, 800a874 <_free_r+0x58>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d9fa      	bls.n	800a86a <_free_r+0x4e>
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	1855      	adds	r5, r2, r1
 800a878:	42a5      	cmp	r5, r4
 800a87a:	d10b      	bne.n	800a894 <_free_r+0x78>
 800a87c:	6824      	ldr	r4, [r4, #0]
 800a87e:	4421      	add	r1, r4
 800a880:	1854      	adds	r4, r2, r1
 800a882:	42a3      	cmp	r3, r4
 800a884:	6011      	str	r1, [r2, #0]
 800a886:	d1dd      	bne.n	800a844 <_free_r+0x28>
 800a888:	681c      	ldr	r4, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	6053      	str	r3, [r2, #4]
 800a88e:	4421      	add	r1, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	e7d7      	b.n	800a844 <_free_r+0x28>
 800a894:	d902      	bls.n	800a89c <_free_r+0x80>
 800a896:	230c      	movs	r3, #12
 800a898:	6003      	str	r3, [r0, #0]
 800a89a:	e7d3      	b.n	800a844 <_free_r+0x28>
 800a89c:	6825      	ldr	r5, [r4, #0]
 800a89e:	1961      	adds	r1, r4, r5
 800a8a0:	428b      	cmp	r3, r1
 800a8a2:	bf04      	itt	eq
 800a8a4:	6819      	ldreq	r1, [r3, #0]
 800a8a6:	685b      	ldreq	r3, [r3, #4]
 800a8a8:	6063      	str	r3, [r4, #4]
 800a8aa:	bf04      	itt	eq
 800a8ac:	1949      	addeq	r1, r1, r5
 800a8ae:	6021      	streq	r1, [r4, #0]
 800a8b0:	6054      	str	r4, [r2, #4]
 800a8b2:	e7c7      	b.n	800a844 <_free_r+0x28>
 800a8b4:	b003      	add	sp, #12
 800a8b6:	bd30      	pop	{r4, r5, pc}
 800a8b8:	200005a4 	.word	0x200005a4

0800a8bc <_malloc_r>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	1ccd      	adds	r5, r1, #3
 800a8c0:	f025 0503 	bic.w	r5, r5, #3
 800a8c4:	3508      	adds	r5, #8
 800a8c6:	2d0c      	cmp	r5, #12
 800a8c8:	bf38      	it	cc
 800a8ca:	250c      	movcc	r5, #12
 800a8cc:	2d00      	cmp	r5, #0
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	db01      	blt.n	800a8d6 <_malloc_r+0x1a>
 800a8d2:	42a9      	cmp	r1, r5
 800a8d4:	d903      	bls.n	800a8de <_malloc_r+0x22>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	6033      	str	r3, [r6, #0]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8de:	f000 fa0f 	bl	800ad00 <__malloc_lock>
 800a8e2:	4921      	ldr	r1, [pc, #132]	; (800a968 <_malloc_r+0xac>)
 800a8e4:	680a      	ldr	r2, [r1, #0]
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	b99c      	cbnz	r4, 800a912 <_malloc_r+0x56>
 800a8ea:	4f20      	ldr	r7, [pc, #128]	; (800a96c <_malloc_r+0xb0>)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b923      	cbnz	r3, 800a8fa <_malloc_r+0x3e>
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f000 f998 	bl	800ac28 <_sbrk_r>
 800a8f8:	6038      	str	r0, [r7, #0]
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f000 f993 	bl	800ac28 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d123      	bne.n	800a94e <_malloc_r+0x92>
 800a906:	230c      	movs	r3, #12
 800a908:	6033      	str	r3, [r6, #0]
 800a90a:	4630      	mov	r0, r6
 800a90c:	f000 f9fe 	bl	800ad0c <__malloc_unlock>
 800a910:	e7e3      	b.n	800a8da <_malloc_r+0x1e>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	1b5b      	subs	r3, r3, r5
 800a916:	d417      	bmi.n	800a948 <_malloc_r+0x8c>
 800a918:	2b0b      	cmp	r3, #11
 800a91a:	d903      	bls.n	800a924 <_malloc_r+0x68>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	441c      	add	r4, r3
 800a920:	6025      	str	r5, [r4, #0]
 800a922:	e004      	b.n	800a92e <_malloc_r+0x72>
 800a924:	6863      	ldr	r3, [r4, #4]
 800a926:	42a2      	cmp	r2, r4
 800a928:	bf0c      	ite	eq
 800a92a:	600b      	streq	r3, [r1, #0]
 800a92c:	6053      	strne	r3, [r2, #4]
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f9ec 	bl	800ad0c <__malloc_unlock>
 800a934:	f104 000b 	add.w	r0, r4, #11
 800a938:	1d23      	adds	r3, r4, #4
 800a93a:	f020 0007 	bic.w	r0, r0, #7
 800a93e:	1ac2      	subs	r2, r0, r3
 800a940:	d0cc      	beq.n	800a8dc <_malloc_r+0x20>
 800a942:	1a1b      	subs	r3, r3, r0
 800a944:	50a3      	str	r3, [r4, r2]
 800a946:	e7c9      	b.n	800a8dc <_malloc_r+0x20>
 800a948:	4622      	mov	r2, r4
 800a94a:	6864      	ldr	r4, [r4, #4]
 800a94c:	e7cc      	b.n	800a8e8 <_malloc_r+0x2c>
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d0e3      	beq.n	800a920 <_malloc_r+0x64>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f964 	bl	800ac28 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d1dd      	bne.n	800a920 <_malloc_r+0x64>
 800a964:	e7cf      	b.n	800a906 <_malloc_r+0x4a>
 800a966:	bf00      	nop
 800a968:	200005a4 	.word	0x200005a4
 800a96c:	200005a8 	.word	0x200005a8

0800a970 <__ssputs_r>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	688e      	ldr	r6, [r1, #8]
 800a976:	429e      	cmp	r6, r3
 800a978:	4682      	mov	sl, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	4690      	mov	r8, r2
 800a97e:	461f      	mov	r7, r3
 800a980:	d838      	bhi.n	800a9f4 <__ssputs_r+0x84>
 800a982:	898a      	ldrh	r2, [r1, #12]
 800a984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a988:	d032      	beq.n	800a9f0 <__ssputs_r+0x80>
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	6909      	ldr	r1, [r1, #16]
 800a98e:	eba5 0901 	sub.w	r9, r5, r1
 800a992:	6965      	ldr	r5, [r4, #20]
 800a994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a99c:	3301      	adds	r3, #1
 800a99e:	444b      	add	r3, r9
 800a9a0:	106d      	asrs	r5, r5, #1
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	bf38      	it	cc
 800a9a6:	461d      	movcc	r5, r3
 800a9a8:	0553      	lsls	r3, r2, #21
 800a9aa:	d531      	bpl.n	800aa10 <__ssputs_r+0xa0>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7ff ff85 	bl	800a8bc <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b950      	cbnz	r0, 800a9cc <__ssputs_r+0x5c>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	f8ca 3000 	str.w	r3, [sl]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9cc:	6921      	ldr	r1, [r4, #16]
 800a9ce:	464a      	mov	r2, r9
 800a9d0:	f7fe f84a 	bl	8008a68 <memcpy>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	6126      	str	r6, [r4, #16]
 800a9e2:	6165      	str	r5, [r4, #20]
 800a9e4:	444e      	add	r6, r9
 800a9e6:	eba5 0509 	sub.w	r5, r5, r9
 800a9ea:	6026      	str	r6, [r4, #0]
 800a9ec:	60a5      	str	r5, [r4, #8]
 800a9ee:	463e      	mov	r6, r7
 800a9f0:	42be      	cmp	r6, r7
 800a9f2:	d900      	bls.n	800a9f6 <__ssputs_r+0x86>
 800a9f4:	463e      	mov	r6, r7
 800a9f6:	4632      	mov	r2, r6
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	4641      	mov	r1, r8
 800a9fc:	f000 f966 	bl	800accc <memmove>
 800aa00:	68a3      	ldr	r3, [r4, #8]
 800aa02:	6822      	ldr	r2, [r4, #0]
 800aa04:	1b9b      	subs	r3, r3, r6
 800aa06:	4432      	add	r2, r6
 800aa08:	60a3      	str	r3, [r4, #8]
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e7db      	b.n	800a9c8 <__ssputs_r+0x58>
 800aa10:	462a      	mov	r2, r5
 800aa12:	f000 f981 	bl	800ad18 <_realloc_r>
 800aa16:	4606      	mov	r6, r0
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1e1      	bne.n	800a9e0 <__ssputs_r+0x70>
 800aa1c:	6921      	ldr	r1, [r4, #16]
 800aa1e:	4650      	mov	r0, sl
 800aa20:	f7ff fefc 	bl	800a81c <_free_r>
 800aa24:	e7c7      	b.n	800a9b6 <__ssputs_r+0x46>
	...

0800aa28 <_svfiprintf_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	4698      	mov	r8, r3
 800aa2e:	898b      	ldrh	r3, [r1, #12]
 800aa30:	061b      	lsls	r3, r3, #24
 800aa32:	b09d      	sub	sp, #116	; 0x74
 800aa34:	4607      	mov	r7, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	d50e      	bpl.n	800aa5a <_svfiprintf_r+0x32>
 800aa3c:	690b      	ldr	r3, [r1, #16]
 800aa3e:	b963      	cbnz	r3, 800aa5a <_svfiprintf_r+0x32>
 800aa40:	2140      	movs	r1, #64	; 0x40
 800aa42:	f7ff ff3b 	bl	800a8bc <_malloc_r>
 800aa46:	6028      	str	r0, [r5, #0]
 800aa48:	6128      	str	r0, [r5, #16]
 800aa4a:	b920      	cbnz	r0, 800aa56 <_svfiprintf_r+0x2e>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	e0d1      	b.n	800abfa <_svfiprintf_r+0x1d2>
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	616b      	str	r3, [r5, #20]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	2320      	movs	r3, #32
 800aa60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa64:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa68:	2330      	movs	r3, #48	; 0x30
 800aa6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac14 <_svfiprintf_r+0x1ec>
 800aa6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa72:	f04f 0901 	mov.w	r9, #1
 800aa76:	4623      	mov	r3, r4
 800aa78:	469a      	mov	sl, r3
 800aa7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa7e:	b10a      	cbz	r2, 800aa84 <_svfiprintf_r+0x5c>
 800aa80:	2a25      	cmp	r2, #37	; 0x25
 800aa82:	d1f9      	bne.n	800aa78 <_svfiprintf_r+0x50>
 800aa84:	ebba 0b04 	subs.w	fp, sl, r4
 800aa88:	d00b      	beq.n	800aaa2 <_svfiprintf_r+0x7a>
 800aa8a:	465b      	mov	r3, fp
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff6d 	bl	800a970 <__ssputs_r>
 800aa96:	3001      	adds	r0, #1
 800aa98:	f000 80aa 	beq.w	800abf0 <_svfiprintf_r+0x1c8>
 800aa9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa9e:	445a      	add	r2, fp
 800aaa0:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa2:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 80a2 	beq.w	800abf0 <_svfiprintf_r+0x1c8>
 800aaac:	2300      	movs	r3, #0
 800aaae:	f04f 32ff 	mov.w	r2, #4294967295
 800aab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aab6:	f10a 0a01 	add.w	sl, sl, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	9307      	str	r3, [sp, #28]
 800aabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aac2:	931a      	str	r3, [sp, #104]	; 0x68
 800aac4:	4654      	mov	r4, sl
 800aac6:	2205      	movs	r2, #5
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	4851      	ldr	r0, [pc, #324]	; (800ac14 <_svfiprintf_r+0x1ec>)
 800aace:	f7f5 fb97 	bl	8000200 <memchr>
 800aad2:	9a04      	ldr	r2, [sp, #16]
 800aad4:	b9d8      	cbnz	r0, 800ab0e <_svfiprintf_r+0xe6>
 800aad6:	06d0      	lsls	r0, r2, #27
 800aad8:	bf44      	itt	mi
 800aada:	2320      	movmi	r3, #32
 800aadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aae0:	0711      	lsls	r1, r2, #28
 800aae2:	bf44      	itt	mi
 800aae4:	232b      	movmi	r3, #43	; 0x2b
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaea:	f89a 3000 	ldrb.w	r3, [sl]
 800aaee:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf0:	d015      	beq.n	800ab1e <_svfiprintf_r+0xf6>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	4654      	mov	r4, sl
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4621      	mov	r1, r4
 800aafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab02:	3b30      	subs	r3, #48	; 0x30
 800ab04:	2b09      	cmp	r3, #9
 800ab06:	d94e      	bls.n	800aba6 <_svfiprintf_r+0x17e>
 800ab08:	b1b0      	cbz	r0, 800ab38 <_svfiprintf_r+0x110>
 800ab0a:	9207      	str	r2, [sp, #28]
 800ab0c:	e014      	b.n	800ab38 <_svfiprintf_r+0x110>
 800ab0e:	eba0 0308 	sub.w	r3, r0, r8
 800ab12:	fa09 f303 	lsl.w	r3, r9, r3
 800ab16:	4313      	orrs	r3, r2
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	46a2      	mov	sl, r4
 800ab1c:	e7d2      	b.n	800aac4 <_svfiprintf_r+0x9c>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d19      	adds	r1, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9103      	str	r1, [sp, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	bfbb      	ittet	lt
 800ab2a:	425b      	neglt	r3, r3
 800ab2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab30:	9307      	strge	r3, [sp, #28]
 800ab32:	9307      	strlt	r3, [sp, #28]
 800ab34:	bfb8      	it	lt
 800ab36:	9204      	strlt	r2, [sp, #16]
 800ab38:	7823      	ldrb	r3, [r4, #0]
 800ab3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab3c:	d10c      	bne.n	800ab58 <_svfiprintf_r+0x130>
 800ab3e:	7863      	ldrb	r3, [r4, #1]
 800ab40:	2b2a      	cmp	r3, #42	; 0x2a
 800ab42:	d135      	bne.n	800abb0 <_svfiprintf_r+0x188>
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	1d1a      	adds	r2, r3, #4
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	9203      	str	r2, [sp, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bfb8      	it	lt
 800ab50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab54:	3402      	adds	r4, #2
 800ab56:	9305      	str	r3, [sp, #20]
 800ab58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac24 <_svfiprintf_r+0x1fc>
 800ab5c:	7821      	ldrb	r1, [r4, #0]
 800ab5e:	2203      	movs	r2, #3
 800ab60:	4650      	mov	r0, sl
 800ab62:	f7f5 fb4d 	bl	8000200 <memchr>
 800ab66:	b140      	cbz	r0, 800ab7a <_svfiprintf_r+0x152>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	eba0 000a 	sub.w	r0, r0, sl
 800ab6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	4303      	orrs	r3, r0
 800ab76:	3401      	adds	r4, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7e:	4826      	ldr	r0, [pc, #152]	; (800ac18 <_svfiprintf_r+0x1f0>)
 800ab80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab84:	2206      	movs	r2, #6
 800ab86:	f7f5 fb3b 	bl	8000200 <memchr>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d038      	beq.n	800ac00 <_svfiprintf_r+0x1d8>
 800ab8e:	4b23      	ldr	r3, [pc, #140]	; (800ac1c <_svfiprintf_r+0x1f4>)
 800ab90:	bb1b      	cbnz	r3, 800abda <_svfiprintf_r+0x1b2>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	3307      	adds	r3, #7
 800ab96:	f023 0307 	bic.w	r3, r3, #7
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	9303      	str	r3, [sp, #12]
 800ab9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba0:	4433      	add	r3, r6
 800aba2:	9309      	str	r3, [sp, #36]	; 0x24
 800aba4:	e767      	b.n	800aa76 <_svfiprintf_r+0x4e>
 800aba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abaa:	460c      	mov	r4, r1
 800abac:	2001      	movs	r0, #1
 800abae:	e7a5      	b.n	800aafc <_svfiprintf_r+0xd4>
 800abb0:	2300      	movs	r3, #0
 800abb2:	3401      	adds	r4, #1
 800abb4:	9305      	str	r3, [sp, #20]
 800abb6:	4619      	mov	r1, r3
 800abb8:	f04f 0c0a 	mov.w	ip, #10
 800abbc:	4620      	mov	r0, r4
 800abbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc2:	3a30      	subs	r2, #48	; 0x30
 800abc4:	2a09      	cmp	r2, #9
 800abc6:	d903      	bls.n	800abd0 <_svfiprintf_r+0x1a8>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0c5      	beq.n	800ab58 <_svfiprintf_r+0x130>
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	e7c3      	b.n	800ab58 <_svfiprintf_r+0x130>
 800abd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd4:	4604      	mov	r4, r0
 800abd6:	2301      	movs	r3, #1
 800abd8:	e7f0      	b.n	800abbc <_svfiprintf_r+0x194>
 800abda:	ab03      	add	r3, sp, #12
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	462a      	mov	r2, r5
 800abe0:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <_svfiprintf_r+0x1f8>)
 800abe2:	a904      	add	r1, sp, #16
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7fd fff5 	bl	8008bd4 <_printf_float>
 800abea:	1c42      	adds	r2, r0, #1
 800abec:	4606      	mov	r6, r0
 800abee:	d1d6      	bne.n	800ab9e <_svfiprintf_r+0x176>
 800abf0:	89ab      	ldrh	r3, [r5, #12]
 800abf2:	065b      	lsls	r3, r3, #25
 800abf4:	f53f af2c 	bmi.w	800aa50 <_svfiprintf_r+0x28>
 800abf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abfa:	b01d      	add	sp, #116	; 0x74
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	ab03      	add	r3, sp, #12
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	462a      	mov	r2, r5
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <_svfiprintf_r+0x1f8>)
 800ac08:	a904      	add	r1, sp, #16
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	f7fe fa86 	bl	800911c <_printf_i>
 800ac10:	e7eb      	b.n	800abea <_svfiprintf_r+0x1c2>
 800ac12:	bf00      	nop
 800ac14:	0800bb8c 	.word	0x0800bb8c
 800ac18:	0800bb96 	.word	0x0800bb96
 800ac1c:	08008bd5 	.word	0x08008bd5
 800ac20:	0800a971 	.word	0x0800a971
 800ac24:	0800bb92 	.word	0x0800bb92

0800ac28 <_sbrk_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d06      	ldr	r5, [pc, #24]	; (800ac44 <_sbrk_r+0x1c>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	f7f6 fabe 	bl	80011b4 <_sbrk>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_sbrk_r+0x1a>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_sbrk_r+0x1a>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	20001604 	.word	0x20001604

0800ac48 <__assert_func>:
 800ac48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac4a:	4614      	mov	r4, r2
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <__assert_func+0x2c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4605      	mov	r5, r0
 800ac54:	68d8      	ldr	r0, [r3, #12]
 800ac56:	b14c      	cbz	r4, 800ac6c <__assert_func+0x24>
 800ac58:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <__assert_func+0x30>)
 800ac5a:	9100      	str	r1, [sp, #0]
 800ac5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac60:	4906      	ldr	r1, [pc, #24]	; (800ac7c <__assert_func+0x34>)
 800ac62:	462b      	mov	r3, r5
 800ac64:	f000 f80e 	bl	800ac84 <fiprintf>
 800ac68:	f000 faa4 	bl	800b1b4 <abort>
 800ac6c:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <__assert_func+0x38>)
 800ac6e:	461c      	mov	r4, r3
 800ac70:	e7f3      	b.n	800ac5a <__assert_func+0x12>
 800ac72:	bf00      	nop
 800ac74:	20000190 	.word	0x20000190
 800ac78:	0800bb9d 	.word	0x0800bb9d
 800ac7c:	0800bbaa 	.word	0x0800bbaa
 800ac80:	0800bbd8 	.word	0x0800bbd8

0800ac84 <fiprintf>:
 800ac84:	b40e      	push	{r1, r2, r3}
 800ac86:	b503      	push	{r0, r1, lr}
 800ac88:	4601      	mov	r1, r0
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	4805      	ldr	r0, [pc, #20]	; (800aca4 <fiprintf+0x20>)
 800ac8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac92:	6800      	ldr	r0, [r0, #0]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	f000 f88f 	bl	800adb8 <_vfiprintf_r>
 800ac9a:	b002      	add	sp, #8
 800ac9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca0:	b003      	add	sp, #12
 800aca2:	4770      	bx	lr
 800aca4:	20000190 	.word	0x20000190

0800aca8 <__ascii_mbtowc>:
 800aca8:	b082      	sub	sp, #8
 800acaa:	b901      	cbnz	r1, 800acae <__ascii_mbtowc+0x6>
 800acac:	a901      	add	r1, sp, #4
 800acae:	b142      	cbz	r2, 800acc2 <__ascii_mbtowc+0x1a>
 800acb0:	b14b      	cbz	r3, 800acc6 <__ascii_mbtowc+0x1e>
 800acb2:	7813      	ldrb	r3, [r2, #0]
 800acb4:	600b      	str	r3, [r1, #0]
 800acb6:	7812      	ldrb	r2, [r2, #0]
 800acb8:	1e10      	subs	r0, r2, #0
 800acba:	bf18      	it	ne
 800acbc:	2001      	movne	r0, #1
 800acbe:	b002      	add	sp, #8
 800acc0:	4770      	bx	lr
 800acc2:	4610      	mov	r0, r2
 800acc4:	e7fb      	b.n	800acbe <__ascii_mbtowc+0x16>
 800acc6:	f06f 0001 	mvn.w	r0, #1
 800acca:	e7f8      	b.n	800acbe <__ascii_mbtowc+0x16>

0800accc <memmove>:
 800accc:	4288      	cmp	r0, r1
 800acce:	b510      	push	{r4, lr}
 800acd0:	eb01 0402 	add.w	r4, r1, r2
 800acd4:	d902      	bls.n	800acdc <memmove+0x10>
 800acd6:	4284      	cmp	r4, r0
 800acd8:	4623      	mov	r3, r4
 800acda:	d807      	bhi.n	800acec <memmove+0x20>
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	42a1      	cmp	r1, r4
 800ace0:	d008      	beq.n	800acf4 <memmove+0x28>
 800ace2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acea:	e7f8      	b.n	800acde <memmove+0x12>
 800acec:	4402      	add	r2, r0
 800acee:	4601      	mov	r1, r0
 800acf0:	428a      	cmp	r2, r1
 800acf2:	d100      	bne.n	800acf6 <memmove+0x2a>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acfe:	e7f7      	b.n	800acf0 <memmove+0x24>

0800ad00 <__malloc_lock>:
 800ad00:	4801      	ldr	r0, [pc, #4]	; (800ad08 <__malloc_lock+0x8>)
 800ad02:	f000 bc17 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800ad06:	bf00      	nop
 800ad08:	2000160c 	.word	0x2000160c

0800ad0c <__malloc_unlock>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	; (800ad14 <__malloc_unlock+0x8>)
 800ad0e:	f000 bc12 	b.w	800b536 <__retarget_lock_release_recursive>
 800ad12:	bf00      	nop
 800ad14:	2000160c 	.word	0x2000160c

0800ad18 <_realloc_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	460e      	mov	r6, r1
 800ad20:	b921      	cbnz	r1, 800ad2c <_realloc_r+0x14>
 800ad22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad26:	4611      	mov	r1, r2
 800ad28:	f7ff bdc8 	b.w	800a8bc <_malloc_r>
 800ad2c:	b922      	cbnz	r2, 800ad38 <_realloc_r+0x20>
 800ad2e:	f7ff fd75 	bl	800a81c <_free_r>
 800ad32:	4625      	mov	r5, r4
 800ad34:	4628      	mov	r0, r5
 800ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad38:	f000 fc62 	bl	800b600 <_malloc_usable_size_r>
 800ad3c:	42a0      	cmp	r0, r4
 800ad3e:	d20f      	bcs.n	800ad60 <_realloc_r+0x48>
 800ad40:	4621      	mov	r1, r4
 800ad42:	4638      	mov	r0, r7
 800ad44:	f7ff fdba 	bl	800a8bc <_malloc_r>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d0f2      	beq.n	800ad34 <_realloc_r+0x1c>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4622      	mov	r2, r4
 800ad52:	f7fd fe89 	bl	8008a68 <memcpy>
 800ad56:	4631      	mov	r1, r6
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff fd5f 	bl	800a81c <_free_r>
 800ad5e:	e7e9      	b.n	800ad34 <_realloc_r+0x1c>
 800ad60:	4635      	mov	r5, r6
 800ad62:	e7e7      	b.n	800ad34 <_realloc_r+0x1c>

0800ad64 <__sfputc_r>:
 800ad64:	6893      	ldr	r3, [r2, #8]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	b410      	push	{r4}
 800ad6c:	6093      	str	r3, [r2, #8]
 800ad6e:	da08      	bge.n	800ad82 <__sfputc_r+0x1e>
 800ad70:	6994      	ldr	r4, [r2, #24]
 800ad72:	42a3      	cmp	r3, r4
 800ad74:	db01      	blt.n	800ad7a <__sfputc_r+0x16>
 800ad76:	290a      	cmp	r1, #10
 800ad78:	d103      	bne.n	800ad82 <__sfputc_r+0x1e>
 800ad7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7e:	f000 b94b 	b.w	800b018 <__swbuf_r>
 800ad82:	6813      	ldr	r3, [r2, #0]
 800ad84:	1c58      	adds	r0, r3, #1
 800ad86:	6010      	str	r0, [r2, #0]
 800ad88:	7019      	strb	r1, [r3, #0]
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <__sfputs_r>:
 800ad92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad94:	4606      	mov	r6, r0
 800ad96:	460f      	mov	r7, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	18d5      	adds	r5, r2, r3
 800ad9c:	42ac      	cmp	r4, r5
 800ad9e:	d101      	bne.n	800ada4 <__sfputs_r+0x12>
 800ada0:	2000      	movs	r0, #0
 800ada2:	e007      	b.n	800adb4 <__sfputs_r+0x22>
 800ada4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada8:	463a      	mov	r2, r7
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff ffda 	bl	800ad64 <__sfputc_r>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d1f3      	bne.n	800ad9c <__sfputs_r+0xa>
 800adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adb8 <_vfiprintf_r>:
 800adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	460d      	mov	r5, r1
 800adbe:	b09d      	sub	sp, #116	; 0x74
 800adc0:	4614      	mov	r4, r2
 800adc2:	4698      	mov	r8, r3
 800adc4:	4606      	mov	r6, r0
 800adc6:	b118      	cbz	r0, 800add0 <_vfiprintf_r+0x18>
 800adc8:	6983      	ldr	r3, [r0, #24]
 800adca:	b90b      	cbnz	r3, 800add0 <_vfiprintf_r+0x18>
 800adcc:	f000 fb14 	bl	800b3f8 <__sinit>
 800add0:	4b89      	ldr	r3, [pc, #548]	; (800aff8 <_vfiprintf_r+0x240>)
 800add2:	429d      	cmp	r5, r3
 800add4:	d11b      	bne.n	800ae0e <_vfiprintf_r+0x56>
 800add6:	6875      	ldr	r5, [r6, #4]
 800add8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adda:	07d9      	lsls	r1, r3, #31
 800addc:	d405      	bmi.n	800adea <_vfiprintf_r+0x32>
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	059a      	lsls	r2, r3, #22
 800ade2:	d402      	bmi.n	800adea <_vfiprintf_r+0x32>
 800ade4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ade6:	f000 fba5 	bl	800b534 <__retarget_lock_acquire_recursive>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	071b      	lsls	r3, r3, #28
 800adee:	d501      	bpl.n	800adf4 <_vfiprintf_r+0x3c>
 800adf0:	692b      	ldr	r3, [r5, #16]
 800adf2:	b9eb      	cbnz	r3, 800ae30 <_vfiprintf_r+0x78>
 800adf4:	4629      	mov	r1, r5
 800adf6:	4630      	mov	r0, r6
 800adf8:	f000 f96e 	bl	800b0d8 <__swsetup_r>
 800adfc:	b1c0      	cbz	r0, 800ae30 <_vfiprintf_r+0x78>
 800adfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae00:	07dc      	lsls	r4, r3, #31
 800ae02:	d50e      	bpl.n	800ae22 <_vfiprintf_r+0x6a>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	b01d      	add	sp, #116	; 0x74
 800ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0e:	4b7b      	ldr	r3, [pc, #492]	; (800affc <_vfiprintf_r+0x244>)
 800ae10:	429d      	cmp	r5, r3
 800ae12:	d101      	bne.n	800ae18 <_vfiprintf_r+0x60>
 800ae14:	68b5      	ldr	r5, [r6, #8]
 800ae16:	e7df      	b.n	800add8 <_vfiprintf_r+0x20>
 800ae18:	4b79      	ldr	r3, [pc, #484]	; (800b000 <_vfiprintf_r+0x248>)
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	bf08      	it	eq
 800ae1e:	68f5      	ldreq	r5, [r6, #12]
 800ae20:	e7da      	b.n	800add8 <_vfiprintf_r+0x20>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	0598      	lsls	r0, r3, #22
 800ae26:	d4ed      	bmi.n	800ae04 <_vfiprintf_r+0x4c>
 800ae28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae2a:	f000 fb84 	bl	800b536 <__retarget_lock_release_recursive>
 800ae2e:	e7e9      	b.n	800ae04 <_vfiprintf_r+0x4c>
 800ae30:	2300      	movs	r3, #0
 800ae32:	9309      	str	r3, [sp, #36]	; 0x24
 800ae34:	2320      	movs	r3, #32
 800ae36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae3e:	2330      	movs	r3, #48	; 0x30
 800ae40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b004 <_vfiprintf_r+0x24c>
 800ae44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae48:	f04f 0901 	mov.w	r9, #1
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	469a      	mov	sl, r3
 800ae50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae54:	b10a      	cbz	r2, 800ae5a <_vfiprintf_r+0xa2>
 800ae56:	2a25      	cmp	r2, #37	; 0x25
 800ae58:	d1f9      	bne.n	800ae4e <_vfiprintf_r+0x96>
 800ae5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae5e:	d00b      	beq.n	800ae78 <_vfiprintf_r+0xc0>
 800ae60:	465b      	mov	r3, fp
 800ae62:	4622      	mov	r2, r4
 800ae64:	4629      	mov	r1, r5
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ff93 	bl	800ad92 <__sfputs_r>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f000 80aa 	beq.w	800afc6 <_vfiprintf_r+0x20e>
 800ae72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae74:	445a      	add	r2, fp
 800ae76:	9209      	str	r2, [sp, #36]	; 0x24
 800ae78:	f89a 3000 	ldrb.w	r3, [sl]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 80a2 	beq.w	800afc6 <_vfiprintf_r+0x20e>
 800ae82:	2300      	movs	r3, #0
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae8c:	f10a 0a01 	add.w	sl, sl, #1
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	9307      	str	r3, [sp, #28]
 800ae94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae98:	931a      	str	r3, [sp, #104]	; 0x68
 800ae9a:	4654      	mov	r4, sl
 800ae9c:	2205      	movs	r2, #5
 800ae9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea2:	4858      	ldr	r0, [pc, #352]	; (800b004 <_vfiprintf_r+0x24c>)
 800aea4:	f7f5 f9ac 	bl	8000200 <memchr>
 800aea8:	9a04      	ldr	r2, [sp, #16]
 800aeaa:	b9d8      	cbnz	r0, 800aee4 <_vfiprintf_r+0x12c>
 800aeac:	06d1      	lsls	r1, r2, #27
 800aeae:	bf44      	itt	mi
 800aeb0:	2320      	movmi	r3, #32
 800aeb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeb6:	0713      	lsls	r3, r2, #28
 800aeb8:	bf44      	itt	mi
 800aeba:	232b      	movmi	r3, #43	; 0x2b
 800aebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec0:	f89a 3000 	ldrb.w	r3, [sl]
 800aec4:	2b2a      	cmp	r3, #42	; 0x2a
 800aec6:	d015      	beq.n	800aef4 <_vfiprintf_r+0x13c>
 800aec8:	9a07      	ldr	r2, [sp, #28]
 800aeca:	4654      	mov	r4, sl
 800aecc:	2000      	movs	r0, #0
 800aece:	f04f 0c0a 	mov.w	ip, #10
 800aed2:	4621      	mov	r1, r4
 800aed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed8:	3b30      	subs	r3, #48	; 0x30
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	d94e      	bls.n	800af7c <_vfiprintf_r+0x1c4>
 800aede:	b1b0      	cbz	r0, 800af0e <_vfiprintf_r+0x156>
 800aee0:	9207      	str	r2, [sp, #28]
 800aee2:	e014      	b.n	800af0e <_vfiprintf_r+0x156>
 800aee4:	eba0 0308 	sub.w	r3, r0, r8
 800aee8:	fa09 f303 	lsl.w	r3, r9, r3
 800aeec:	4313      	orrs	r3, r2
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	46a2      	mov	sl, r4
 800aef2:	e7d2      	b.n	800ae9a <_vfiprintf_r+0xe2>
 800aef4:	9b03      	ldr	r3, [sp, #12]
 800aef6:	1d19      	adds	r1, r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	9103      	str	r1, [sp, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	bfbb      	ittet	lt
 800af00:	425b      	neglt	r3, r3
 800af02:	f042 0202 	orrlt.w	r2, r2, #2
 800af06:	9307      	strge	r3, [sp, #28]
 800af08:	9307      	strlt	r3, [sp, #28]
 800af0a:	bfb8      	it	lt
 800af0c:	9204      	strlt	r2, [sp, #16]
 800af0e:	7823      	ldrb	r3, [r4, #0]
 800af10:	2b2e      	cmp	r3, #46	; 0x2e
 800af12:	d10c      	bne.n	800af2e <_vfiprintf_r+0x176>
 800af14:	7863      	ldrb	r3, [r4, #1]
 800af16:	2b2a      	cmp	r3, #42	; 0x2a
 800af18:	d135      	bne.n	800af86 <_vfiprintf_r+0x1ce>
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	1d1a      	adds	r2, r3, #4
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	9203      	str	r2, [sp, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	bfb8      	it	lt
 800af26:	f04f 33ff 	movlt.w	r3, #4294967295
 800af2a:	3402      	adds	r4, #2
 800af2c:	9305      	str	r3, [sp, #20]
 800af2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b014 <_vfiprintf_r+0x25c>
 800af32:	7821      	ldrb	r1, [r4, #0]
 800af34:	2203      	movs	r2, #3
 800af36:	4650      	mov	r0, sl
 800af38:	f7f5 f962 	bl	8000200 <memchr>
 800af3c:	b140      	cbz	r0, 800af50 <_vfiprintf_r+0x198>
 800af3e:	2340      	movs	r3, #64	; 0x40
 800af40:	eba0 000a 	sub.w	r0, r0, sl
 800af44:	fa03 f000 	lsl.w	r0, r3, r0
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	4303      	orrs	r3, r0
 800af4c:	3401      	adds	r4, #1
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af54:	482c      	ldr	r0, [pc, #176]	; (800b008 <_vfiprintf_r+0x250>)
 800af56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af5a:	2206      	movs	r2, #6
 800af5c:	f7f5 f950 	bl	8000200 <memchr>
 800af60:	2800      	cmp	r0, #0
 800af62:	d03f      	beq.n	800afe4 <_vfiprintf_r+0x22c>
 800af64:	4b29      	ldr	r3, [pc, #164]	; (800b00c <_vfiprintf_r+0x254>)
 800af66:	bb1b      	cbnz	r3, 800afb0 <_vfiprintf_r+0x1f8>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	3307      	adds	r3, #7
 800af6c:	f023 0307 	bic.w	r3, r3, #7
 800af70:	3308      	adds	r3, #8
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af76:	443b      	add	r3, r7
 800af78:	9309      	str	r3, [sp, #36]	; 0x24
 800af7a:	e767      	b.n	800ae4c <_vfiprintf_r+0x94>
 800af7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af80:	460c      	mov	r4, r1
 800af82:	2001      	movs	r0, #1
 800af84:	e7a5      	b.n	800aed2 <_vfiprintf_r+0x11a>
 800af86:	2300      	movs	r3, #0
 800af88:	3401      	adds	r4, #1
 800af8a:	9305      	str	r3, [sp, #20]
 800af8c:	4619      	mov	r1, r3
 800af8e:	f04f 0c0a 	mov.w	ip, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af98:	3a30      	subs	r2, #48	; 0x30
 800af9a:	2a09      	cmp	r2, #9
 800af9c:	d903      	bls.n	800afa6 <_vfiprintf_r+0x1ee>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0c5      	beq.n	800af2e <_vfiprintf_r+0x176>
 800afa2:	9105      	str	r1, [sp, #20]
 800afa4:	e7c3      	b.n	800af2e <_vfiprintf_r+0x176>
 800afa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800afaa:	4604      	mov	r4, r0
 800afac:	2301      	movs	r3, #1
 800afae:	e7f0      	b.n	800af92 <_vfiprintf_r+0x1da>
 800afb0:	ab03      	add	r3, sp, #12
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	462a      	mov	r2, r5
 800afb6:	4b16      	ldr	r3, [pc, #88]	; (800b010 <_vfiprintf_r+0x258>)
 800afb8:	a904      	add	r1, sp, #16
 800afba:	4630      	mov	r0, r6
 800afbc:	f7fd fe0a 	bl	8008bd4 <_printf_float>
 800afc0:	4607      	mov	r7, r0
 800afc2:	1c78      	adds	r0, r7, #1
 800afc4:	d1d6      	bne.n	800af74 <_vfiprintf_r+0x1bc>
 800afc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc8:	07d9      	lsls	r1, r3, #31
 800afca:	d405      	bmi.n	800afd8 <_vfiprintf_r+0x220>
 800afcc:	89ab      	ldrh	r3, [r5, #12]
 800afce:	059a      	lsls	r2, r3, #22
 800afd0:	d402      	bmi.n	800afd8 <_vfiprintf_r+0x220>
 800afd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd4:	f000 faaf 	bl	800b536 <__retarget_lock_release_recursive>
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	065b      	lsls	r3, r3, #25
 800afdc:	f53f af12 	bmi.w	800ae04 <_vfiprintf_r+0x4c>
 800afe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afe2:	e711      	b.n	800ae08 <_vfiprintf_r+0x50>
 800afe4:	ab03      	add	r3, sp, #12
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	462a      	mov	r2, r5
 800afea:	4b09      	ldr	r3, [pc, #36]	; (800b010 <_vfiprintf_r+0x258>)
 800afec:	a904      	add	r1, sp, #16
 800afee:	4630      	mov	r0, r6
 800aff0:	f7fe f894 	bl	800911c <_printf_i>
 800aff4:	e7e4      	b.n	800afc0 <_vfiprintf_r+0x208>
 800aff6:	bf00      	nop
 800aff8:	0800bd04 	.word	0x0800bd04
 800affc:	0800bd24 	.word	0x0800bd24
 800b000:	0800bce4 	.word	0x0800bce4
 800b004:	0800bb8c 	.word	0x0800bb8c
 800b008:	0800bb96 	.word	0x0800bb96
 800b00c:	08008bd5 	.word	0x08008bd5
 800b010:	0800ad93 	.word	0x0800ad93
 800b014:	0800bb92 	.word	0x0800bb92

0800b018 <__swbuf_r>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	460e      	mov	r6, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	4605      	mov	r5, r0
 800b020:	b118      	cbz	r0, 800b02a <__swbuf_r+0x12>
 800b022:	6983      	ldr	r3, [r0, #24]
 800b024:	b90b      	cbnz	r3, 800b02a <__swbuf_r+0x12>
 800b026:	f000 f9e7 	bl	800b3f8 <__sinit>
 800b02a:	4b21      	ldr	r3, [pc, #132]	; (800b0b0 <__swbuf_r+0x98>)
 800b02c:	429c      	cmp	r4, r3
 800b02e:	d12b      	bne.n	800b088 <__swbuf_r+0x70>
 800b030:	686c      	ldr	r4, [r5, #4]
 800b032:	69a3      	ldr	r3, [r4, #24]
 800b034:	60a3      	str	r3, [r4, #8]
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	071a      	lsls	r2, r3, #28
 800b03a:	d52f      	bpl.n	800b09c <__swbuf_r+0x84>
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	b36b      	cbz	r3, 800b09c <__swbuf_r+0x84>
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	6820      	ldr	r0, [r4, #0]
 800b044:	1ac0      	subs	r0, r0, r3
 800b046:	6963      	ldr	r3, [r4, #20]
 800b048:	b2f6      	uxtb	r6, r6
 800b04a:	4283      	cmp	r3, r0
 800b04c:	4637      	mov	r7, r6
 800b04e:	dc04      	bgt.n	800b05a <__swbuf_r+0x42>
 800b050:	4621      	mov	r1, r4
 800b052:	4628      	mov	r0, r5
 800b054:	f000 f93c 	bl	800b2d0 <_fflush_r>
 800b058:	bb30      	cbnz	r0, 800b0a8 <__swbuf_r+0x90>
 800b05a:	68a3      	ldr	r3, [r4, #8]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	60a3      	str	r3, [r4, #8]
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	6022      	str	r2, [r4, #0]
 800b066:	701e      	strb	r6, [r3, #0]
 800b068:	6963      	ldr	r3, [r4, #20]
 800b06a:	3001      	adds	r0, #1
 800b06c:	4283      	cmp	r3, r0
 800b06e:	d004      	beq.n	800b07a <__swbuf_r+0x62>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	07db      	lsls	r3, r3, #31
 800b074:	d506      	bpl.n	800b084 <__swbuf_r+0x6c>
 800b076:	2e0a      	cmp	r6, #10
 800b078:	d104      	bne.n	800b084 <__swbuf_r+0x6c>
 800b07a:	4621      	mov	r1, r4
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 f927 	bl	800b2d0 <_fflush_r>
 800b082:	b988      	cbnz	r0, 800b0a8 <__swbuf_r+0x90>
 800b084:	4638      	mov	r0, r7
 800b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b088:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <__swbuf_r+0x9c>)
 800b08a:	429c      	cmp	r4, r3
 800b08c:	d101      	bne.n	800b092 <__swbuf_r+0x7a>
 800b08e:	68ac      	ldr	r4, [r5, #8]
 800b090:	e7cf      	b.n	800b032 <__swbuf_r+0x1a>
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <__swbuf_r+0xa0>)
 800b094:	429c      	cmp	r4, r3
 800b096:	bf08      	it	eq
 800b098:	68ec      	ldreq	r4, [r5, #12]
 800b09a:	e7ca      	b.n	800b032 <__swbuf_r+0x1a>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 f81a 	bl	800b0d8 <__swsetup_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d0cb      	beq.n	800b040 <__swbuf_r+0x28>
 800b0a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b0ac:	e7ea      	b.n	800b084 <__swbuf_r+0x6c>
 800b0ae:	bf00      	nop
 800b0b0:	0800bd04 	.word	0x0800bd04
 800b0b4:	0800bd24 	.word	0x0800bd24
 800b0b8:	0800bce4 	.word	0x0800bce4

0800b0bc <__ascii_wctomb>:
 800b0bc:	b149      	cbz	r1, 800b0d2 <__ascii_wctomb+0x16>
 800b0be:	2aff      	cmp	r2, #255	; 0xff
 800b0c0:	bf85      	ittet	hi
 800b0c2:	238a      	movhi	r3, #138	; 0x8a
 800b0c4:	6003      	strhi	r3, [r0, #0]
 800b0c6:	700a      	strbls	r2, [r1, #0]
 800b0c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0cc:	bf98      	it	ls
 800b0ce:	2001      	movls	r0, #1
 800b0d0:	4770      	bx	lr
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <__swsetup_r>:
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <__swsetup_r+0xcc>)
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b125      	cbz	r5, 800b0ee <__swsetup_r+0x16>
 800b0e4:	69ab      	ldr	r3, [r5, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__swsetup_r+0x16>
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f000 f985 	bl	800b3f8 <__sinit>
 800b0ee:	4b2e      	ldr	r3, [pc, #184]	; (800b1a8 <__swsetup_r+0xd0>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d10f      	bne.n	800b114 <__swsetup_r+0x3c>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0fc:	0719      	lsls	r1, r3, #28
 800b0fe:	d42c      	bmi.n	800b15a <__swsetup_r+0x82>
 800b100:	06dd      	lsls	r5, r3, #27
 800b102:	d411      	bmi.n	800b128 <__swsetup_r+0x50>
 800b104:	2309      	movs	r3, #9
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	e03e      	b.n	800b192 <__swsetup_r+0xba>
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <__swsetup_r+0xd4>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <__swsetup_r+0x46>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7eb      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <__swsetup_r+0xd8>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7e6      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b128:	0758      	lsls	r0, r3, #29
 800b12a:	d512      	bpl.n	800b152 <__swsetup_r+0x7a>
 800b12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12e:	b141      	cbz	r1, 800b142 <__swsetup_r+0x6a>
 800b130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b134:	4299      	cmp	r1, r3
 800b136:	d002      	beq.n	800b13e <__swsetup_r+0x66>
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fb6f 	bl	800a81c <_free_r>
 800b13e:	2300      	movs	r3, #0
 800b140:	6363      	str	r3, [r4, #52]	; 0x34
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	2300      	movs	r3, #0
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	b94b      	cbnz	r3, 800b172 <__swsetup_r+0x9a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b168:	d003      	beq.n	800b172 <__swsetup_r+0x9a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 fa07 	bl	800b580 <__smakebuf_r>
 800b172:	89a0      	ldrh	r0, [r4, #12]
 800b174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b178:	f010 0301 	ands.w	r3, r0, #1
 800b17c:	d00a      	beq.n	800b194 <__swsetup_r+0xbc>
 800b17e:	2300      	movs	r3, #0
 800b180:	60a3      	str	r3, [r4, #8]
 800b182:	6963      	ldr	r3, [r4, #20]
 800b184:	425b      	negs	r3, r3
 800b186:	61a3      	str	r3, [r4, #24]
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	b943      	cbnz	r3, 800b19e <__swsetup_r+0xc6>
 800b18c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b190:	d1ba      	bne.n	800b108 <__swsetup_r+0x30>
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0781      	lsls	r1, r0, #30
 800b196:	bf58      	it	pl
 800b198:	6963      	ldrpl	r3, [r4, #20]
 800b19a:	60a3      	str	r3, [r4, #8]
 800b19c:	e7f4      	b.n	800b188 <__swsetup_r+0xb0>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e7f7      	b.n	800b192 <__swsetup_r+0xba>
 800b1a2:	bf00      	nop
 800b1a4:	20000190 	.word	0x20000190
 800b1a8:	0800bd04 	.word	0x0800bd04
 800b1ac:	0800bd24 	.word	0x0800bd24
 800b1b0:	0800bce4 	.word	0x0800bce4

0800b1b4 <abort>:
 800b1b4:	b508      	push	{r3, lr}
 800b1b6:	2006      	movs	r0, #6
 800b1b8:	f000 fa52 	bl	800b660 <raise>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7f5 ff81 	bl	80010c4 <_exit>
	...

0800b1c4 <__sflush_r>:
 800b1c4:	898a      	ldrh	r2, [r1, #12]
 800b1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	0710      	lsls	r0, r2, #28
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	d458      	bmi.n	800b284 <__sflush_r+0xc0>
 800b1d2:	684b      	ldr	r3, [r1, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dc05      	bgt.n	800b1e4 <__sflush_r+0x20>
 800b1d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	dc02      	bgt.n	800b1e4 <__sflush_r+0x20>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d0f9      	beq.n	800b1de <__sflush_r+0x1a>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1f0:	682f      	ldr	r7, [r5, #0]
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	d032      	beq.n	800b25c <__sflush_r+0x98>
 800b1f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	075a      	lsls	r2, r3, #29
 800b1fc:	d505      	bpl.n	800b20a <__sflush_r+0x46>
 800b1fe:	6863      	ldr	r3, [r4, #4]
 800b200:	1ac0      	subs	r0, r0, r3
 800b202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b204:	b10b      	cbz	r3, 800b20a <__sflush_r+0x46>
 800b206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b208:	1ac0      	subs	r0, r0, r3
 800b20a:	2300      	movs	r3, #0
 800b20c:	4602      	mov	r2, r0
 800b20e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b210:	6a21      	ldr	r1, [r4, #32]
 800b212:	4628      	mov	r0, r5
 800b214:	47b0      	blx	r6
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	d106      	bne.n	800b22a <__sflush_r+0x66>
 800b21c:	6829      	ldr	r1, [r5, #0]
 800b21e:	291d      	cmp	r1, #29
 800b220:	d82c      	bhi.n	800b27c <__sflush_r+0xb8>
 800b222:	4a2a      	ldr	r2, [pc, #168]	; (800b2cc <__sflush_r+0x108>)
 800b224:	40ca      	lsrs	r2, r1
 800b226:	07d6      	lsls	r6, r2, #31
 800b228:	d528      	bpl.n	800b27c <__sflush_r+0xb8>
 800b22a:	2200      	movs	r2, #0
 800b22c:	6062      	str	r2, [r4, #4]
 800b22e:	04d9      	lsls	r1, r3, #19
 800b230:	6922      	ldr	r2, [r4, #16]
 800b232:	6022      	str	r2, [r4, #0]
 800b234:	d504      	bpl.n	800b240 <__sflush_r+0x7c>
 800b236:	1c42      	adds	r2, r0, #1
 800b238:	d101      	bne.n	800b23e <__sflush_r+0x7a>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	b903      	cbnz	r3, 800b240 <__sflush_r+0x7c>
 800b23e:	6560      	str	r0, [r4, #84]	; 0x54
 800b240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b242:	602f      	str	r7, [r5, #0]
 800b244:	2900      	cmp	r1, #0
 800b246:	d0ca      	beq.n	800b1de <__sflush_r+0x1a>
 800b248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b24c:	4299      	cmp	r1, r3
 800b24e:	d002      	beq.n	800b256 <__sflush_r+0x92>
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fae3 	bl	800a81c <_free_r>
 800b256:	2000      	movs	r0, #0
 800b258:	6360      	str	r0, [r4, #52]	; 0x34
 800b25a:	e7c1      	b.n	800b1e0 <__sflush_r+0x1c>
 800b25c:	6a21      	ldr	r1, [r4, #32]
 800b25e:	2301      	movs	r3, #1
 800b260:	4628      	mov	r0, r5
 800b262:	47b0      	blx	r6
 800b264:	1c41      	adds	r1, r0, #1
 800b266:	d1c7      	bne.n	800b1f8 <__sflush_r+0x34>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0c4      	beq.n	800b1f8 <__sflush_r+0x34>
 800b26e:	2b1d      	cmp	r3, #29
 800b270:	d001      	beq.n	800b276 <__sflush_r+0xb2>
 800b272:	2b16      	cmp	r3, #22
 800b274:	d101      	bne.n	800b27a <__sflush_r+0xb6>
 800b276:	602f      	str	r7, [r5, #0]
 800b278:	e7b1      	b.n	800b1de <__sflush_r+0x1a>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b280:	81a3      	strh	r3, [r4, #12]
 800b282:	e7ad      	b.n	800b1e0 <__sflush_r+0x1c>
 800b284:	690f      	ldr	r7, [r1, #16]
 800b286:	2f00      	cmp	r7, #0
 800b288:	d0a9      	beq.n	800b1de <__sflush_r+0x1a>
 800b28a:	0793      	lsls	r3, r2, #30
 800b28c:	680e      	ldr	r6, [r1, #0]
 800b28e:	bf08      	it	eq
 800b290:	694b      	ldreq	r3, [r1, #20]
 800b292:	600f      	str	r7, [r1, #0]
 800b294:	bf18      	it	ne
 800b296:	2300      	movne	r3, #0
 800b298:	eba6 0807 	sub.w	r8, r6, r7
 800b29c:	608b      	str	r3, [r1, #8]
 800b29e:	f1b8 0f00 	cmp.w	r8, #0
 800b2a2:	dd9c      	ble.n	800b1de <__sflush_r+0x1a>
 800b2a4:	6a21      	ldr	r1, [r4, #32]
 800b2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2a8:	4643      	mov	r3, r8
 800b2aa:	463a      	mov	r2, r7
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	47b0      	blx	r6
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dc06      	bgt.n	800b2c2 <__sflush_r+0xfe>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	e78e      	b.n	800b1e0 <__sflush_r+0x1c>
 800b2c2:	4407      	add	r7, r0
 800b2c4:	eba8 0800 	sub.w	r8, r8, r0
 800b2c8:	e7e9      	b.n	800b29e <__sflush_r+0xda>
 800b2ca:	bf00      	nop
 800b2cc:	20400001 	.word	0x20400001

0800b2d0 <_fflush_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	690b      	ldr	r3, [r1, #16]
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	b913      	cbnz	r3, 800b2e0 <_fflush_r+0x10>
 800b2da:	2500      	movs	r5, #0
 800b2dc:	4628      	mov	r0, r5
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	b118      	cbz	r0, 800b2ea <_fflush_r+0x1a>
 800b2e2:	6983      	ldr	r3, [r0, #24]
 800b2e4:	b90b      	cbnz	r3, 800b2ea <_fflush_r+0x1a>
 800b2e6:	f000 f887 	bl	800b3f8 <__sinit>
 800b2ea:	4b14      	ldr	r3, [pc, #80]	; (800b33c <_fflush_r+0x6c>)
 800b2ec:	429c      	cmp	r4, r3
 800b2ee:	d11b      	bne.n	800b328 <_fflush_r+0x58>
 800b2f0:	686c      	ldr	r4, [r5, #4]
 800b2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0ef      	beq.n	800b2da <_fflush_r+0xa>
 800b2fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2fc:	07d0      	lsls	r0, r2, #31
 800b2fe:	d404      	bmi.n	800b30a <_fflush_r+0x3a>
 800b300:	0599      	lsls	r1, r3, #22
 800b302:	d402      	bmi.n	800b30a <_fflush_r+0x3a>
 800b304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b306:	f000 f915 	bl	800b534 <__retarget_lock_acquire_recursive>
 800b30a:	4628      	mov	r0, r5
 800b30c:	4621      	mov	r1, r4
 800b30e:	f7ff ff59 	bl	800b1c4 <__sflush_r>
 800b312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b314:	07da      	lsls	r2, r3, #31
 800b316:	4605      	mov	r5, r0
 800b318:	d4e0      	bmi.n	800b2dc <_fflush_r+0xc>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	059b      	lsls	r3, r3, #22
 800b31e:	d4dd      	bmi.n	800b2dc <_fflush_r+0xc>
 800b320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b322:	f000 f908 	bl	800b536 <__retarget_lock_release_recursive>
 800b326:	e7d9      	b.n	800b2dc <_fflush_r+0xc>
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <_fflush_r+0x70>)
 800b32a:	429c      	cmp	r4, r3
 800b32c:	d101      	bne.n	800b332 <_fflush_r+0x62>
 800b32e:	68ac      	ldr	r4, [r5, #8]
 800b330:	e7df      	b.n	800b2f2 <_fflush_r+0x22>
 800b332:	4b04      	ldr	r3, [pc, #16]	; (800b344 <_fflush_r+0x74>)
 800b334:	429c      	cmp	r4, r3
 800b336:	bf08      	it	eq
 800b338:	68ec      	ldreq	r4, [r5, #12]
 800b33a:	e7da      	b.n	800b2f2 <_fflush_r+0x22>
 800b33c:	0800bd04 	.word	0x0800bd04
 800b340:	0800bd24 	.word	0x0800bd24
 800b344:	0800bce4 	.word	0x0800bce4

0800b348 <std>:
 800b348:	2300      	movs	r3, #0
 800b34a:	b510      	push	{r4, lr}
 800b34c:	4604      	mov	r4, r0
 800b34e:	e9c0 3300 	strd	r3, r3, [r0]
 800b352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b356:	6083      	str	r3, [r0, #8]
 800b358:	8181      	strh	r1, [r0, #12]
 800b35a:	6643      	str	r3, [r0, #100]	; 0x64
 800b35c:	81c2      	strh	r2, [r0, #14]
 800b35e:	6183      	str	r3, [r0, #24]
 800b360:	4619      	mov	r1, r3
 800b362:	2208      	movs	r2, #8
 800b364:	305c      	adds	r0, #92	; 0x5c
 800b366:	f7fd fb8d 	bl	8008a84 <memset>
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <std+0x38>)
 800b36c:	6263      	str	r3, [r4, #36]	; 0x24
 800b36e:	4b05      	ldr	r3, [pc, #20]	; (800b384 <std+0x3c>)
 800b370:	62a3      	str	r3, [r4, #40]	; 0x28
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <std+0x40>)
 800b374:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <std+0x44>)
 800b378:	6224      	str	r4, [r4, #32]
 800b37a:	6323      	str	r3, [r4, #48]	; 0x30
 800b37c:	bd10      	pop	{r4, pc}
 800b37e:	bf00      	nop
 800b380:	0800b699 	.word	0x0800b699
 800b384:	0800b6bb 	.word	0x0800b6bb
 800b388:	0800b6f3 	.word	0x0800b6f3
 800b38c:	0800b717 	.word	0x0800b717

0800b390 <_cleanup_r>:
 800b390:	4901      	ldr	r1, [pc, #4]	; (800b398 <_cleanup_r+0x8>)
 800b392:	f000 b8af 	b.w	800b4f4 <_fwalk_reent>
 800b396:	bf00      	nop
 800b398:	0800b2d1 	.word	0x0800b2d1

0800b39c <__sfmoreglue>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	1e4a      	subs	r2, r1, #1
 800b3a0:	2568      	movs	r5, #104	; 0x68
 800b3a2:	4355      	muls	r5, r2
 800b3a4:	460e      	mov	r6, r1
 800b3a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3aa:	f7ff fa87 	bl	800a8bc <_malloc_r>
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	b140      	cbz	r0, 800b3c4 <__sfmoreglue+0x28>
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b3b8:	300c      	adds	r0, #12
 800b3ba:	60a0      	str	r0, [r4, #8]
 800b3bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3c0:	f7fd fb60 	bl	8008a84 <memset>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}

0800b3c8 <__sfp_lock_acquire>:
 800b3c8:	4801      	ldr	r0, [pc, #4]	; (800b3d0 <__sfp_lock_acquire+0x8>)
 800b3ca:	f000 b8b3 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800b3ce:	bf00      	nop
 800b3d0:	20001610 	.word	0x20001610

0800b3d4 <__sfp_lock_release>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__sfp_lock_release+0x8>)
 800b3d6:	f000 b8ae 	b.w	800b536 <__retarget_lock_release_recursive>
 800b3da:	bf00      	nop
 800b3dc:	20001610 	.word	0x20001610

0800b3e0 <__sinit_lock_acquire>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__sinit_lock_acquire+0x8>)
 800b3e2:	f000 b8a7 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	2000160b 	.word	0x2000160b

0800b3ec <__sinit_lock_release>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	; (800b3f4 <__sinit_lock_release+0x8>)
 800b3ee:	f000 b8a2 	b.w	800b536 <__retarget_lock_release_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	2000160b 	.word	0x2000160b

0800b3f8 <__sinit>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	f7ff fff0 	bl	800b3e0 <__sinit_lock_acquire>
 800b400:	69a3      	ldr	r3, [r4, #24]
 800b402:	b11b      	cbz	r3, 800b40c <__sinit+0x14>
 800b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b408:	f7ff bff0 	b.w	800b3ec <__sinit_lock_release>
 800b40c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b410:	6523      	str	r3, [r4, #80]	; 0x50
 800b412:	4b13      	ldr	r3, [pc, #76]	; (800b460 <__sinit+0x68>)
 800b414:	4a13      	ldr	r2, [pc, #76]	; (800b464 <__sinit+0x6c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	62a2      	str	r2, [r4, #40]	; 0x28
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	bf04      	itt	eq
 800b41e:	2301      	moveq	r3, #1
 800b420:	61a3      	streq	r3, [r4, #24]
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f820 	bl	800b468 <__sfp>
 800b428:	6060      	str	r0, [r4, #4]
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 f81c 	bl	800b468 <__sfp>
 800b430:	60a0      	str	r0, [r4, #8]
 800b432:	4620      	mov	r0, r4
 800b434:	f000 f818 	bl	800b468 <__sfp>
 800b438:	2200      	movs	r2, #0
 800b43a:	60e0      	str	r0, [r4, #12]
 800b43c:	2104      	movs	r1, #4
 800b43e:	6860      	ldr	r0, [r4, #4]
 800b440:	f7ff ff82 	bl	800b348 <std>
 800b444:	68a0      	ldr	r0, [r4, #8]
 800b446:	2201      	movs	r2, #1
 800b448:	2109      	movs	r1, #9
 800b44a:	f7ff ff7d 	bl	800b348 <std>
 800b44e:	68e0      	ldr	r0, [r4, #12]
 800b450:	2202      	movs	r2, #2
 800b452:	2112      	movs	r1, #18
 800b454:	f7ff ff78 	bl	800b348 <std>
 800b458:	2301      	movs	r3, #1
 800b45a:	61a3      	str	r3, [r4, #24]
 800b45c:	e7d2      	b.n	800b404 <__sinit+0xc>
 800b45e:	bf00      	nop
 800b460:	0800b960 	.word	0x0800b960
 800b464:	0800b391 	.word	0x0800b391

0800b468 <__sfp>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	4607      	mov	r7, r0
 800b46c:	f7ff ffac 	bl	800b3c8 <__sfp_lock_acquire>
 800b470:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <__sfp+0x84>)
 800b472:	681e      	ldr	r6, [r3, #0]
 800b474:	69b3      	ldr	r3, [r6, #24]
 800b476:	b913      	cbnz	r3, 800b47e <__sfp+0x16>
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff ffbd 	bl	800b3f8 <__sinit>
 800b47e:	3648      	adds	r6, #72	; 0x48
 800b480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b484:	3b01      	subs	r3, #1
 800b486:	d503      	bpl.n	800b490 <__sfp+0x28>
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	b30b      	cbz	r3, 800b4d0 <__sfp+0x68>
 800b48c:	6836      	ldr	r6, [r6, #0]
 800b48e:	e7f7      	b.n	800b480 <__sfp+0x18>
 800b490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b494:	b9d5      	cbnz	r5, 800b4cc <__sfp+0x64>
 800b496:	4b16      	ldr	r3, [pc, #88]	; (800b4f0 <__sfp+0x88>)
 800b498:	60e3      	str	r3, [r4, #12]
 800b49a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b49e:	6665      	str	r5, [r4, #100]	; 0x64
 800b4a0:	f000 f847 	bl	800b532 <__retarget_lock_init_recursive>
 800b4a4:	f7ff ff96 	bl	800b3d4 <__sfp_lock_release>
 800b4a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4b0:	6025      	str	r5, [r4, #0]
 800b4b2:	61a5      	str	r5, [r4, #24]
 800b4b4:	2208      	movs	r2, #8
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4bc:	f7fd fae2 	bl	8008a84 <memset>
 800b4c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4cc:	3468      	adds	r4, #104	; 0x68
 800b4ce:	e7d9      	b.n	800b484 <__sfp+0x1c>
 800b4d0:	2104      	movs	r1, #4
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	f7ff ff62 	bl	800b39c <__sfmoreglue>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	6030      	str	r0, [r6, #0]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1d5      	bne.n	800b48c <__sfp+0x24>
 800b4e0:	f7ff ff78 	bl	800b3d4 <__sfp_lock_release>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	e7ee      	b.n	800b4c8 <__sfp+0x60>
 800b4ea:	bf00      	nop
 800b4ec:	0800b960 	.word	0x0800b960
 800b4f0:	ffff0001 	.word	0xffff0001

0800b4f4 <_fwalk_reent>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	4688      	mov	r8, r1
 800b4fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b500:	2700      	movs	r7, #0
 800b502:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b506:	f1b9 0901 	subs.w	r9, r9, #1
 800b50a:	d505      	bpl.n	800b518 <_fwalk_reent+0x24>
 800b50c:	6824      	ldr	r4, [r4, #0]
 800b50e:	2c00      	cmp	r4, #0
 800b510:	d1f7      	bne.n	800b502 <_fwalk_reent+0xe>
 800b512:	4638      	mov	r0, r7
 800b514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b518:	89ab      	ldrh	r3, [r5, #12]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d907      	bls.n	800b52e <_fwalk_reent+0x3a>
 800b51e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b522:	3301      	adds	r3, #1
 800b524:	d003      	beq.n	800b52e <_fwalk_reent+0x3a>
 800b526:	4629      	mov	r1, r5
 800b528:	4630      	mov	r0, r6
 800b52a:	47c0      	blx	r8
 800b52c:	4307      	orrs	r7, r0
 800b52e:	3568      	adds	r5, #104	; 0x68
 800b530:	e7e9      	b.n	800b506 <_fwalk_reent+0x12>

0800b532 <__retarget_lock_init_recursive>:
 800b532:	4770      	bx	lr

0800b534 <__retarget_lock_acquire_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__retarget_lock_release_recursive>:
 800b536:	4770      	bx	lr

0800b538 <__swhatbuf_r>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	460e      	mov	r6, r1
 800b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b540:	2900      	cmp	r1, #0
 800b542:	b096      	sub	sp, #88	; 0x58
 800b544:	4614      	mov	r4, r2
 800b546:	461d      	mov	r5, r3
 800b548:	da07      	bge.n	800b55a <__swhatbuf_r+0x22>
 800b54a:	2300      	movs	r3, #0
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	89b3      	ldrh	r3, [r6, #12]
 800b550:	061a      	lsls	r2, r3, #24
 800b552:	d410      	bmi.n	800b576 <__swhatbuf_r+0x3e>
 800b554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b558:	e00e      	b.n	800b578 <__swhatbuf_r+0x40>
 800b55a:	466a      	mov	r2, sp
 800b55c:	f000 f902 	bl	800b764 <_fstat_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	dbf2      	blt.n	800b54a <__swhatbuf_r+0x12>
 800b564:	9a01      	ldr	r2, [sp, #4]
 800b566:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b56a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b56e:	425a      	negs	r2, r3
 800b570:	415a      	adcs	r2, r3
 800b572:	602a      	str	r2, [r5, #0]
 800b574:	e7ee      	b.n	800b554 <__swhatbuf_r+0x1c>
 800b576:	2340      	movs	r3, #64	; 0x40
 800b578:	2000      	movs	r0, #0
 800b57a:	6023      	str	r3, [r4, #0]
 800b57c:	b016      	add	sp, #88	; 0x58
 800b57e:	bd70      	pop	{r4, r5, r6, pc}

0800b580 <__smakebuf_r>:
 800b580:	898b      	ldrh	r3, [r1, #12]
 800b582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b584:	079d      	lsls	r5, r3, #30
 800b586:	4606      	mov	r6, r0
 800b588:	460c      	mov	r4, r1
 800b58a:	d507      	bpl.n	800b59c <__smakebuf_r+0x1c>
 800b58c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	2301      	movs	r3, #1
 800b596:	6163      	str	r3, [r4, #20]
 800b598:	b002      	add	sp, #8
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	ab01      	add	r3, sp, #4
 800b59e:	466a      	mov	r2, sp
 800b5a0:	f7ff ffca 	bl	800b538 <__swhatbuf_r>
 800b5a4:	9900      	ldr	r1, [sp, #0]
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff f987 	bl	800a8bc <_malloc_r>
 800b5ae:	b948      	cbnz	r0, 800b5c4 <__smakebuf_r+0x44>
 800b5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b4:	059a      	lsls	r2, r3, #22
 800b5b6:	d4ef      	bmi.n	800b598 <__smakebuf_r+0x18>
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	f043 0302 	orr.w	r3, r3, #2
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	e7e3      	b.n	800b58c <__smakebuf_r+0xc>
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <__smakebuf_r+0x7c>)
 800b5c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	6020      	str	r0, [r4, #0]
 800b5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	9b00      	ldr	r3, [sp, #0]
 800b5d4:	6163      	str	r3, [r4, #20]
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	6120      	str	r0, [r4, #16]
 800b5da:	b15b      	cbz	r3, 800b5f4 <__smakebuf_r+0x74>
 800b5dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f000 f8d1 	bl	800b788 <_isatty_r>
 800b5e6:	b128      	cbz	r0, 800b5f4 <__smakebuf_r+0x74>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	f043 0301 	orr.w	r3, r3, #1
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	89a0      	ldrh	r0, [r4, #12]
 800b5f6:	4305      	orrs	r5, r0
 800b5f8:	81a5      	strh	r5, [r4, #12]
 800b5fa:	e7cd      	b.n	800b598 <__smakebuf_r+0x18>
 800b5fc:	0800b391 	.word	0x0800b391

0800b600 <_malloc_usable_size_r>:
 800b600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b604:	1f18      	subs	r0, r3, #4
 800b606:	2b00      	cmp	r3, #0
 800b608:	bfbc      	itt	lt
 800b60a:	580b      	ldrlt	r3, [r1, r0]
 800b60c:	18c0      	addlt	r0, r0, r3
 800b60e:	4770      	bx	lr

0800b610 <_raise_r>:
 800b610:	291f      	cmp	r1, #31
 800b612:	b538      	push	{r3, r4, r5, lr}
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	d904      	bls.n	800b624 <_raise_r+0x14>
 800b61a:	2316      	movs	r3, #22
 800b61c:	6003      	str	r3, [r0, #0]
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b626:	b112      	cbz	r2, 800b62e <_raise_r+0x1e>
 800b628:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b62c:	b94b      	cbnz	r3, 800b642 <_raise_r+0x32>
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 f830 	bl	800b694 <_getpid_r>
 800b634:	462a      	mov	r2, r5
 800b636:	4601      	mov	r1, r0
 800b638:	4620      	mov	r0, r4
 800b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b63e:	f000 b817 	b.w	800b670 <_kill_r>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d00a      	beq.n	800b65c <_raise_r+0x4c>
 800b646:	1c59      	adds	r1, r3, #1
 800b648:	d103      	bne.n	800b652 <_raise_r+0x42>
 800b64a:	2316      	movs	r3, #22
 800b64c:	6003      	str	r3, [r0, #0]
 800b64e:	2001      	movs	r0, #1
 800b650:	e7e7      	b.n	800b622 <_raise_r+0x12>
 800b652:	2400      	movs	r4, #0
 800b654:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b658:	4628      	mov	r0, r5
 800b65a:	4798      	blx	r3
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7e0      	b.n	800b622 <_raise_r+0x12>

0800b660 <raise>:
 800b660:	4b02      	ldr	r3, [pc, #8]	; (800b66c <raise+0xc>)
 800b662:	4601      	mov	r1, r0
 800b664:	6818      	ldr	r0, [r3, #0]
 800b666:	f7ff bfd3 	b.w	800b610 <_raise_r>
 800b66a:	bf00      	nop
 800b66c:	20000190 	.word	0x20000190

0800b670 <_kill_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_kill_r+0x20>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f7f5 fd11 	bl	80010a4 <_kill>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d102      	bne.n	800b68c <_kill_r+0x1c>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b103      	cbz	r3, 800b68c <_kill_r+0x1c>
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	20001604 	.word	0x20001604

0800b694 <_getpid_r>:
 800b694:	f7f5 bcfe 	b.w	8001094 <_getpid>

0800b698 <__sread>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	460c      	mov	r4, r1
 800b69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a0:	f000 f894 	bl	800b7cc <_read_r>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	bfab      	itete	ge
 800b6a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b6ac:	181b      	addge	r3, r3, r0
 800b6ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6b2:	bfac      	ite	ge
 800b6b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6b6:	81a3      	strhlt	r3, [r4, #12]
 800b6b8:	bd10      	pop	{r4, pc}

0800b6ba <__swrite>:
 800b6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6be:	461f      	mov	r7, r3
 800b6c0:	898b      	ldrh	r3, [r1, #12]
 800b6c2:	05db      	lsls	r3, r3, #23
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4616      	mov	r6, r2
 800b6ca:	d505      	bpl.n	800b6d8 <__swrite+0x1e>
 800b6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f000 f868 	bl	800b7a8 <_lseek_r>
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	f000 b817 	b.w	800b720 <_write_r>

0800b6f2 <__sseek>:
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fa:	f000 f855 	bl	800b7a8 <_lseek_r>
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	bf15      	itete	ne
 800b704:	6560      	strne	r0, [r4, #84]	; 0x54
 800b706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b70a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b70e:	81a3      	strheq	r3, [r4, #12]
 800b710:	bf18      	it	ne
 800b712:	81a3      	strhne	r3, [r4, #12]
 800b714:	bd10      	pop	{r4, pc}

0800b716 <__sclose>:
 800b716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71a:	f000 b813 	b.w	800b744 <_close_r>
	...

0800b720 <_write_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	; (800b740 <_write_r+0x20>)
 800b724:	4604      	mov	r4, r0
 800b726:	4608      	mov	r0, r1
 800b728:	4611      	mov	r1, r2
 800b72a:	2200      	movs	r2, #0
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	f7f5 fcef 	bl	8001112 <_write>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_write_r+0x1e>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_write_r+0x1e>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	20001604 	.word	0x20001604

0800b744 <_close_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	; (800b760 <_close_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f5 fcfb 	bl	800114a <_close>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_close_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_close_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20001604 	.word	0x20001604

0800b764 <_fstat_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_fstat_r+0x20>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	4611      	mov	r1, r2
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	f7f5 fcf6 	bl	8001162 <_fstat>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d102      	bne.n	800b780 <_fstat_r+0x1c>
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b103      	cbz	r3, 800b780 <_fstat_r+0x1c>
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop
 800b784:	20001604 	.word	0x20001604

0800b788 <_isatty_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d06      	ldr	r5, [pc, #24]	; (800b7a4 <_isatty_r+0x1c>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	f7f5 fcf5 	bl	8001182 <_isatty>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_isatty_r+0x1a>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_isatty_r+0x1a>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	20001604 	.word	0x20001604

0800b7a8 <_lseek_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	; (800b7c8 <_lseek_r+0x20>)
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	4608      	mov	r0, r1
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	602a      	str	r2, [r5, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f7f5 fcee 	bl	8001198 <_lseek>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_lseek_r+0x1e>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_lseek_r+0x1e>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20001604 	.word	0x20001604

0800b7cc <_read_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_read_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f5 fc7c 	bl	80010d8 <_read>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_read_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_read_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20001604 	.word	0x20001604

0800b7f0 <_init>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_fini>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	bf00      	nop
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr
